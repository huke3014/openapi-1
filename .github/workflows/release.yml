name: Release
on:
  push:
    branches:
      - publish-cpp

jobs:
  copy-cpp-headers:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: include-c
          path: c/csrc/include

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: include-cpp
          path: cpp/include

  build-cpp-sdk-debug:
    needs:
      - copy-cpp-headers
    strategy:
      fail-fast: true
      matrix:
        settings:
          - host: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            platform: x86_64_linux
            dylib_ext: so
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            platform: x86_64_windows
          - host: macos-13
            target: x86_64-apple-darwin
            platform: x86_64_macos
            dylib_ext: dylib
          - host: macos-13
            target: aarch64-apple-darwin
            platform: aarch64_macos
            dylib_ext: dylib
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install MSBuild
        if: ${{ matrix.settings.host == 'windows-latest' }}
        uses: microsoft/setup-msbuild@v1.1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          targets: ${{ matrix.settings.target }}

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Install cargo make
        uses: davidB/rust-cargo-make@v1

      - name: Build
        if: ${{ matrix.settings.target != 'aarch64-apple-darwin' }}
        run: |
          cargo make cmake-debug
          cargo make c
          cargo make cpp

      - name: Build
        if: ${{ matrix.settings.target == 'aarch64-apple-darwin' }}
        run: |
          cargo make cmake-debug-macos-aarch64
          cargo make cpp

      - name: Copy files
        if: ${{ matrix.settings.host == 'windows-latest' }}
        run: |
          md dist\lib\${{ matrix.settings.platform }}\debug
          copy cmake.build\x64\Debug\cargo\build\${{ matrix.settings.target }}\debug\longport_c.dll dist\lib\${{ matrix.settings.platform }}\debug
          copy cmake.build\x64\Debug\cargo\build\${{ matrix.settings.target }}\debug\longport_c.dll.lib dist\lib\${{ matrix.settings.platform }}\debug\longport_c.lib
          copy cmake.build\Debug\longport_cpp.dll dist\lib\${{ matrix.settings.platform }}\debug
          copy cmake.build\cpp\Debug\longport_cpp.lib dist\lib\${{ matrix.settings.platform }}\debug

      - name: Copy files
        if: ${{ matrix.settings.host != 'windows-latest' }}
        run: |
          mkdir -p dist/lib/${{ matrix.settings.platform }}/debug
          cp cmake.build/cargo/build/${{ matrix.settings.target }}/debug/liblongport_c.${{ matrix.settings.dylib_ext }} dist/lib/${{ matrix.settings.platform }}/debug
          cp cmake.build/liblongport_cpp.${{ matrix.settings.dylib_ext }} dist/lib/${{ matrix.settings.platform }}/debug

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libs-debug-${{ matrix.settings.target }}
          path: dist/lib

  build-cpp-sdk-release:
    needs:
      - copy-cpp-headers
    strategy:
      fail-fast: true
      matrix:
        settings:
          - host: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            platform: x86_64_linux
            dylib_ext: so
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            platform: x86_64_windows
          - host: macos-13
            target: x86_64-apple-darwin
            platform: x86_64_macos
            dylib_ext: dylib
          - host: macos-13
            target: aarch64-apple-darwin
            platform: aarch64_macos
            dylib_ext: dylib
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install MSBuild
        if: ${{ matrix.settings.host == 'windows-latest' }}
        uses: microsoft/setup-msbuild@v1.1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          targets: ${{ matrix.settings.target }}

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Install cargo make
        uses: davidB/rust-cargo-make@v1

      - name: Build
        if: ${{ matrix.settings.target != 'aarch64-apple-darwin' }}
        run: |
          cargo make cmake-release
          cargo make c-release
          cargo make cpp-release

      - name: Build
        if: ${{ matrix.settings.target == 'aarch64-apple-darwin' }}
        run: |
          cargo make cmake-release-macos-aarch64
          cargo make cpp-release

      - name: Copy files
        if: ${{ matrix.settings.host == 'windows-latest' }}
        run: |
          md dist\lib\${{ matrix.settings.platform }}\release
          copy cmake.build\x64\Release\cargo\build\${{ matrix.settings.target }}\release\longport_c.dll dist\lib\${{ matrix.settings.platform }}\release
          copy cmake.build\x64\Release\cargo\build\${{ matrix.settings.target }}\release\longport_c.dll.lib dist\lib\${{ matrix.settings.platform }}\release\longport_c.lib
          copy cmake.build\Release\longport_cpp.dll dist\lib\${{ matrix.settings.platform }}\release
          copy cmake.build\cpp\Release\longport_cpp.lib dist\lib\${{ matrix.settings.platform }}\release

      - name: Copy files
        if: ${{ matrix.settings.host != 'windows-latest' }}
        run: |
          mkdir -p dist/lib/${{ matrix.settings.platform }}/release
          cp cmake.build/cargo/build/${{ matrix.settings.target }}/release/liblongport_c.${{ matrix.settings.dylib_ext }} dist/lib/${{ matrix.settings.platform }}/release
          cp cmake.build/liblongport_cpp.${{ matrix.settings.dylib_ext }} dist/lib/${{ matrix.settings.platform }}/release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libs-release-${{ matrix.settings.target }}
          path: dist/lib

  build-ios-cpp-sdk:
    needs:
      - copy-cpp-headers
    strategy:
      fail-fast: true
      matrix:
        settings:
          - target: aarch64-apple-ios
            platform: OS64
            build-type: Debug
            target-dir: debug
            cargo-args: ""
          - target: aarch64-apple-ios
            platform: OS64
            build-type: Release
            target-dir: release
            cargo-args: -r
          - target: aarch64-apple-ios-sim
            platform: SIMULATOR64
            build-type: Debug
            target-dir: debug
            cargo-args: ""
          - target: aarch64-apple-ios-sim
            platform: SIMULATOR64
            build-type: Release
            target-dir: release
            cargo-args: -r
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install target
        run: |
          rustup target install ${{ matrix.settings.target }}

      - name: Build C
        working-directory: c
        run: |
          cargo rustc --crate-type=staticlib --target --target ${{ matrix.settings.target }} ${{ matrix.settings.cargo-args }}

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Build CPP
        working-directory: cpp
        run: |
          mkdir cmake.build
          cd cmake.build && cmake -DCMAKE_BUILD_TYPE={{ matrix.settings.build-type }} -DCMAKE_TOOLCHAIN_FILE=../static/toolchains/ios.cmake -DPLATFORM=${{ matrix.settings.platform }} -DDENABLE_BITCODE=true ../static && make

      - name: Copy files
        run: |
          mkdir -p dist/lib/${{ matrix.settings.target }}/${{ matrix.settings.target-dir }}
          cp target/${{ matrix.settings.target }}/${{ matrix.settings.target-dir }}/liblongport_c.a dist/lib/${{ matrix.settings.target }}/${{ matrix.settings.target-dir }}
          cp cpp/cmake.build/liblongport_cpp.a dist/lib/${{ matrix.settings.target }}/${{ matrix.settings.target-dir }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libs-ios-${{ matrix.settings.build-type }}-${{ matrix.settings.target }}
          path: dist/lib

  build-android-cpp-sdk:
    needs:
      - copy-cpp-headers
    strategy:
      fail-fast: true
      matrix:
        settings:
          - target: armv7-linux-androideabi
            cc: armv7a-linux-androideabi28-clang
            cxx: armv7a-linux-androideabi28-clang++
            ar: llvm-ar
            build-type: Debug
            target-dir: debug
            cargo-args: ""
          - target: armv7-linux-androideabi
            cc: armv7a-linux-androideabi28-clang
            cxx: armv7a-linux-androideabi28-clang++
            ar: llvm-ar
            build-type: Release
            target-dir: release
            cargo-args: -r
          - target: aarch64-linux-android
            cc: aarch64-linux-android28-clang
            cxx: aarch64-linux-android28-clang++
            ar: llvm-ar
            build-type: Debug
            target-dir: debug
            cargo-args: ""
          - target: aarch64-linux-android
            cc: aarch64-linux-android28-clang
            cxx: aarch64-linux-android28-clang++
            ar: llvm-ar
            build-type: Release
            target-dir: release
            cargo-args: -r
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install target
        run: |
          rustup target install ${{ matrix.settings.target }}

      - name: Setup NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
          add-to-path: true

      - name: Build C
        working-directory: c
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          CC: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.settings.cc }}
          AR: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.settings.ar }}
        run: |
          cargo rustc --crate-type=staticlib --target ${{ matrix.settings.target }} ${{ matrix.settings.cargo-args }}

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Build CPP
        working-directory: cpp
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          CC: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.settings.cc }}
          CXX: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.settings.cxx }}
          AR: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.settings.ar }}
        run: |
          mkdir cmake.build
          cd cmake.build && cmake -DCMAKE_BUILD_TYPE=Debug ../static && make

      - name: Copy files
        run: |
          mkdir -p dist/lib/${{ matrix.settings.target }}/${{ matrix.settings.target-dir }}
          cp target/${{ matrix.settings.target }}/${{ matrix.settings.target-dir }}/liblongport_c.a dist/lib/${{ matrix.settings.target }}/${{ matrix.settings.target-dir }}
          cp cpp/cmake.build/liblongport_cpp.a dist/lib/${{ matrix.settings.target }}/${{ matrix.settings.target-dir }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libs-android-${{ matrix.settings.build-type }}-${{ matrix.settings.target }}
          path: dist/lib

  build:
    needs:
      - build-cpp-sdk-debug
      - build-cpp-sdk-release
      - build-ios-cpp-sdk
      - build-android-cpp-sdk
    runs-on: ubuntu-22.04
    steps:
      - run: echo "All builds are done"

  publish-cpp-sdk:
    needs:
      - build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Download includes
        uses: actions/download-artifact@v5
        with:
          path: ./sdk/libs
          pattern: libs-*
          merge-multiple: true

      - name: Download includes
        uses: actions/download-artifact@v5
        with:
          path: ./sdk/include
          pattern: include-*
          merge-multiple: true

      - name: Get Version
        run: echo SDK_VERSION=$(sed -nE 's/^\s*version = "(.*?)"/\1/p' Cargo.toml) >> $GITHUB_ENV

      - name: Package
        run: tar czvf openapi-cpp-sdk-$SDK_VERSION.tar.gz ./sdk

      - name: Upload SDK to BJ
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.FE_S3_OPEN_STATIC_PROD_BJ_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.FE_S3_OPEN_STATIC_PROD_BJ_ACCESS_KEY_SECRET }}
        run: |
          aws --region=${{ secrets.PROD_BJ_AWS_DEFAULT_REGION }} s3 cp openapi-cpp-sdk-$SDK_VERSION.tar.gz s3://${{ secrets.FE_S3_OPEN_STATIC_PROD_BJ_BUCKET }}/openapi-sdk/ --cache-control max-age=31536000

      - name: Upload SDK to HK
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.FE_S3_OPEN_STATIC_PROD_HK_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.FE_S3_OPEN_STATIC_PROD_HK_ACCESS_KEY_SECRET }}
        run: |
          aws --region=${{ secrets.PROD_HK_AWS_DEFAULT_REGION }} s3 cp openapi-cpp-sdk-$SDK_VERSION.tar.gz s3://${{ secrets.FE_S3_OPEN_STATIC_PROD_HK_BUCKET }}/openapi-sdk/ --cache-control max-age=31536000
