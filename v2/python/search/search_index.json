{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LongPort OpenAPI SDK for Python longport provides an easy-to-use interface for invokes LongPort OpenAPI . References Config The configuration of the SDK. QuoteContext The Quote API part of the SDK, e.g.: get basic information of securities, subscribe quotes... TradeContext The Trade API part of the SDK, e.g.: submit order, get order status... Quickstart Install LongPort OpenAPI SDK pip install longport Setting environment variables(MacOS/Linux) export LONGPORT_APP_KEY=\"App Key get from user center\" export LONGPORT_APP_SECRET=\"App Secret get from user center\" export LONGPORT_ACCESS_TOKEN=\"Access Token get from user center\" Setting environment variables(Windows) setx LONGPORT_APP_KEY \"App Key get from user center\" setx LONGPORT_APP_SECRET \"App Secret get from user center\" setx LONGPORT_ACCESS_TOKEN \"Access Token get from user center\" Quote API (Get basic information of securities) from longport.openapi import Config, QuoteContext # Load configuration from environment variables config = Config.from_env() # Create a context for quote APIs ctx = QuoteContext(config) # Get basic information of securities resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) Quote API (Subscribe quotes) from time import sleep from longport.openapi import Config, QuoteContext, SubType, PushQuote # Load configuration from environment variables config = Config.from_env() # A callback to receive quote data def on_quote(symbol: str, event: PushQuote): print(symbol, event) # Create a context for quote APIs ctx = QuoteContext(config) ctx.set_on_quote(on_quote) # Subscribe resp = ctx.subscribe([\"700.HK\"], [SubType.Quote], is_first_push=True) # Receive push duration to 30 seconds sleep(30) Trade API (Submit order) from decimal import Decimal from longport.openapi import TradeContext, Config, OrderType, OrderSide, TimeInForceType # Load configuration from environment variables config = Config.from_env() # Create a context for trade APIs ctx = TradeContext(config) # Submit order resp = ctx.submit_order(\"700.HK\", OrderType.LO, OrderSide.Buy, Decimal( \"500\"), TimeInForceType.Day, submitted_price=Decimal(\"50\"), remark=\"Hello from Python SDK\") print(resp) License Licensed under either of Apache License, Version 2.0 ( LICENSE-APACHE ) MIT license LICENSE-MIT at your option.","title":"Index"},{"location":"#longport-openapi-sdk-for-python","text":"longport provides an easy-to-use interface for invokes LongPort OpenAPI .","title":"LongPort OpenAPI SDK for Python"},{"location":"#references","text":"Config The configuration of the SDK. QuoteContext The Quote API part of the SDK, e.g.: get basic information of securities, subscribe quotes... TradeContext The Trade API part of the SDK, e.g.: submit order, get order status...","title":"References"},{"location":"#quickstart","text":"Install LongPort OpenAPI SDK pip install longport Setting environment variables(MacOS/Linux) export LONGPORT_APP_KEY=\"App Key get from user center\" export LONGPORT_APP_SECRET=\"App Secret get from user center\" export LONGPORT_ACCESS_TOKEN=\"Access Token get from user center\" Setting environment variables(Windows) setx LONGPORT_APP_KEY \"App Key get from user center\" setx LONGPORT_APP_SECRET \"App Secret get from user center\" setx LONGPORT_ACCESS_TOKEN \"Access Token get from user center\"","title":"Quickstart"},{"location":"#quote-api-get-basic-information-of-securities","text":"from longport.openapi import Config, QuoteContext # Load configuration from environment variables config = Config.from_env() # Create a context for quote APIs ctx = QuoteContext(config) # Get basic information of securities resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"Quote API (Get basic information of securities)"},{"location":"#quote-api-subscribe-quotes","text":"from time import sleep from longport.openapi import Config, QuoteContext, SubType, PushQuote # Load configuration from environment variables config = Config.from_env() # A callback to receive quote data def on_quote(symbol: str, event: PushQuote): print(symbol, event) # Create a context for quote APIs ctx = QuoteContext(config) ctx.set_on_quote(on_quote) # Subscribe resp = ctx.subscribe([\"700.HK\"], [SubType.Quote], is_first_push=True) # Receive push duration to 30 seconds sleep(30)","title":"Quote API (Subscribe quotes)"},{"location":"#trade-api-submit-order","text":"from decimal import Decimal from longport.openapi import TradeContext, Config, OrderType, OrderSide, TimeInForceType # Load configuration from environment variables config = Config.from_env() # Create a context for trade APIs ctx = TradeContext(config) # Submit order resp = ctx.submit_order(\"700.HK\", OrderType.LO, OrderSide.Buy, Decimal( \"500\"), TimeInForceType.Day, submitted_price=Decimal(\"50\"), remark=\"Hello from Python SDK\") print(resp)","title":"Trade API (Submit order)"},{"location":"#license","text":"Licensed under either of Apache License, Version 2.0 ( LICENSE-APACHE ) MIT license LICENSE-MIT at your option.","title":"License"},{"location":"config/","text":"Config Configuration options for LongPort sdk Parameters: Name Type Description Default app_key str App Key required app_secret str App Secret required access_token str Access Token required http_url Optional [ str ] HTTP API url None quote_ws_url Optional [ str ] Websocket url for quote API None trade_ws_url Optional [ str ] Websocket url for trade API None language Optional [ Type [ Language ]] Language identifier None enable_overnight bool Enable overnight quote False push_candlestick_mode Type [ PushCandlestickMode ] Push candlestick mode Realtime enable_print_quote_packages bool Enable printing the opened quote packages when connected to the server True from_env() classmethod Create a new Config from the given environment variables It first gets the environment variables from the .env file in the current directory. Variables LONGPORT_APP_KEY - App key LONGPORT_APP_SECRET - App secret LONGPORT_ACCESS_TOKEN - Access token LONGPORT_HTTP_URL - HTTP endpoint url LONGPORT_QUOTE_WS_URL - Quote websocket endpoint url LONGPORT_TRADE_WS_URL - Trade websocket endpoint url LONGPORT_ENABLE_OVERNIGHT - Enable overnight quote, true or false (Default: false ) refresh_access_token(expired_at=None) Gets a new access_token Parameters: Name Type Description Default expired_at Optional [ datetime ] The expiration time of the access token, defaults to 90 days. None Returns: Type Description str Access token","title":"Config"},{"location":"config/#config","text":"Configuration options for LongPort sdk Parameters: Name Type Description Default app_key str App Key required app_secret str App Secret required access_token str Access Token required http_url Optional [ str ] HTTP API url None quote_ws_url Optional [ str ] Websocket url for quote API None trade_ws_url Optional [ str ] Websocket url for trade API None language Optional [ Type [ Language ]] Language identifier None enable_overnight bool Enable overnight quote False push_candlestick_mode Type [ PushCandlestickMode ] Push candlestick mode Realtime enable_print_quote_packages bool Enable printing the opened quote packages when connected to the server True","title":"Config"},{"location":"config/#longport.openapi.Config.from_env","text":"Create a new Config from the given environment variables It first gets the environment variables from the .env file in the current directory.","title":"from_env"},{"location":"config/#longport.openapi.Config.from_env--variables","text":"LONGPORT_APP_KEY - App key LONGPORT_APP_SECRET - App secret LONGPORT_ACCESS_TOKEN - Access token LONGPORT_HTTP_URL - HTTP endpoint url LONGPORT_QUOTE_WS_URL - Quote websocket endpoint url LONGPORT_TRADE_WS_URL - Trade websocket endpoint url LONGPORT_ENABLE_OVERNIGHT - Enable overnight quote, true or false (Default: false )","title":"Variables"},{"location":"config/#longport.openapi.Config.refresh_access_token","text":"Gets a new access_token Parameters: Name Type Description Default expired_at Optional [ datetime ] The expiration time of the access token, defaults to 90 days. None Returns: Type Description str Access token","title":"refresh_access_token"},{"location":"quote_context/","text":"QuoteContext Quote context Parameters: Name Type Description Default config Config Configuration object required brokers(symbol) Get security brokers Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.brokers(\"700.HK\") print(resp) calc_indexes(symbols, indexes) Get calc indexes Parameters: Name Type Description Default symbols List [ str ] Security codes required indexes List [ Type [ CalcIndex ]] Calc indexes required Returns: Type Description List [ SecurityCalcIndex ] Calc indexes of the symbols Examples: :: from longport.openapi import QuoteContext, Config, CalcIndex config = Config.from_env() ctx = QuoteContext(config) resp = ctx.calc_indexes([\"700.HK\", \"APPL.US\"], [CalcIndex.LastDone, CalcIndex.ChangeRate]) print(resp) candlesticks(symbol, period, count, adjust_type) Get security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Candlestick period required count int Count of cancdlestick (Maximum is 1000 ) required adjust_type Type [ AdjustType ] Adjustment type required Returns: Type Description List [ Candlestick ] Candlesticks Examples: :: from longport.openapi import QuoteContext, Config, Period, AdjustType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.candlesticks( \"700.HK\", Period.Day, 10, AdjustType.NoAdjust) print(resp) capital_distribution(symbol) Get capital distribution Parameters: Name Type Description Default symbol str Security code required Returns: Type Description CapitalDistributionResponse Capital distribution Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_distribution(\"700.HK\") print(resp) capital_flow(symbol) Get capital flow intraday Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ CapitalFlowLine ] Capital flow list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_flow(\"700.HK\") print(resp) create_watchlist_group(name, securities=None) Create watchlist group Parameters: Name Type Description Default name str Group name required securities Optional [ List [ str ]] Securities None Returns: Type Description int Group ID Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) group_id = ctx.create_watchlist_group(name = \"Watchlist1\", securities = [\"700.HK\", \"AAPL.US\"]) print(group_id) delete_watchlist_group(id, purge=False) Delete watchlist group Parameters: Name Type Description Default id int Group ID required purge bool Move securities in this group to the default group False Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) ctx.delete_watchlist_group(10086) depth(symbol) Get security depth Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.depth(\"700.HK\") print(resp) history_candlesticks_by_date(symbol, period, adjust_type, start, end) Get security history candlesticks by date Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required adjust_type Type [ AdjustType ] Adjust type required start Optional [ date ] Start date required end Optional [ date ] End date required history_candlesticks_by_offset(symbol, period, adjust_type, forward, count, time=None) Get security history candlesticks by offset Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required adjust_type Type [ AdjustType ] Adjust type required forward bool If True , query the latest from the specified time required count int Count of candlesticks required time Optional [ datetime ] Datetime None intraday(symbol) Get security intraday lines Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ IntradayLine ] Intraday lines Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.intraday(\"700.HK\") print(resp) member_id() Returns the member ID option_chain_expiry_date_list(symbol) Get option chain expiry date list Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ date ] Option chain expiry date list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_expiry_date_list(\"AAPL.US\") print(resp) option_chain_info_by_date(symbol, expiry_date) Get option chain info by date Parameters: Name Type Description Default symbol str Security code required expiry_date date Expiry date required Returns: Type Description List [ StrikePriceInfo ] Option chain info Examples: :: from datetime import date from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_info_by_date( \"AAPL.US\", date(2023, 1, 20)) print(resp) option_quote(symbols) Get quote of option securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ OptionQuote ] Option quote list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_quote([\"AAPL230317P160000.US\"]) print(resp) participants() Get participants Returns: Type Description List [ ParticipantInfo ] Participants Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.participants() print(resp) quote(symbols) Get quote of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityQuote ] Security quote list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) quote_level() Returns the quote level quote_package_details() Returns the quote package details realtime_brokers(symbol) Get real-time brokers Get real-time brokers of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Brokers], is_first_push = True) sleep(5) resp = ctx.realtime_brokers(\"700.HK\") print(resp) realtime_candlesticks(symbol, period, count) Get real-time candlesticks Get Get real-time candlesticks of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required count int Count of candlesticks required Returns: Type Description List [ Candlestick ] Security candlesticks Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, Period config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe_candlesticks(\"AAPL.US\", Period.Min_1) sleep(5) resp = ctx.realtime_candlesticks(\"AAPL.US\", Period.Min_1, 10) print(resp) realtime_depth(symbol) Get real-time depth Get real-time depth of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Depth], is_first_push = True) sleep(5) resp = ctx.realtime_depth(\"700.HK\") print(resp) realtime_quote(symbols) Get real-time quote Get real-time quotes of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ RealtimeQuote ] Quote list Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(5) resp = ctx.realtime_quote([\"700.HK\", \"AAPL.US\"]) print(resp) realtime_trades(symbol, count) Get real-time trades Get real-time trades of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required count int Count of trades required Returns: Type Description List [ Trade ] Security trades Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Trade], is_first_push = False) sleep(5) resp = ctx.realtime_trades(\"700.HK\", 10) print(resp) security_list(market, category) Get security list Parameters: Name Type Description Default market Type [ Market ] Market required category Type [ SecurityListCategory ] Security list category required Returns: Type Description List [ Security ] Security list Examples: :: from longport.openapi import QuoteContext, Config, Market, SecurityListCategory config = Config.from_env() ctx = QuoteContext(config) resp = ctx.security_list(Market.HK, SecurityListCategory.Overnight) print(resp) set_on_brokers(callback) Set brokers callback, after receiving the brokers data push, it will call back to this function. set_on_candlestick(callback) Set candlestick callback, after receiving the candlestick updated event, it will call back to this function. set_on_depth(callback) Set depth callback, after receiving the depth data push, it will call back to this function. set_on_quote(callback) Set quote callback, after receiving the quote data push, it will call back to this function. set_on_trades(callback) Set trades callback, after receiving the trades data push, it will call back to this function. static_info(symbols) Get basic information of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityStaticInfo ] Security info list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.static_info( [\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) subscribe(symbols, sub_types, is_first_push=False) Subscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required is_first_push bool Whether to perform a data push immediately after subscribing. (trade not supported) False Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType, PushQuote def on_quote(symbol: str, event: PushQuote): print(symbol, event) config = Config.from_env() ctx = QuoteContext(config) ctx.set_on_quote(on_quote) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(30) subscribe_candlesticks(symbol, period) Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required Examples: :: from longport.openapi import QuoteContext, Config, PushCandlestick config = Config.from_env() ctx = QuoteContext(config) def on_candlestick(symbol: str, event: PushCandlestick): print(symbol, event) ctx.set_on_candlestick(on_candlestick) ctx.subscribe_candlesticks(\"700.HK\", Period.Min_1) sleep(30) subscriptions() Get subscription information Examples: :: from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) resp = ctx.subscriptions() print(resp) trades(symbol, count) Get security trades Parameters: Name Type Description Default symbol str Security code required count int Count of trades (Maximum is 1000 ) required Returns: Type Description List [ Trade ] Trades Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trades(\"700.HK\", 10) print(resp) trading_days(market, begin, end) Get trading session of the day The interval must be less than one month, and only the most recent year is supported. Parameters: Name Type Description Default market Type [ Market ] Market required begin date Begin date required end date End date required Returns: Type Description MarketTradingDays Trading days Examples: :: from datetime import date from longport.openapi import QuoteContext, Config, Market config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_days( Market.HK, date(2022, 1, 1), date(2022, 2, 1)) print(resp) trading_session() Get trading session of the day Returns: Type Description List [ MarketTradingSession ] Trading session of the day Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_session() print(resp) unsubscribe(symbols, sub_types) Unsubscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required Examples: :: from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) ctx.unsubscribe([\"AAPL.US\"], [SubType.Quote]) unsubscribe_candlesticks(symbol, period) Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required update_watchlist_group(id, name=None, securities=None, mode=None) Update watchlist group Parameters: Name Type Description Default id int Group ID required name Optional [ str ] Group name None securities Optional [ List [ str ]] Securities None Examples: :: from longport.openapi import QuoteContext, Config, SecuritiesUpdateMode config = Config.from_env() ctx = QuoteContext(config) ctx.update_watchlist_group(10086, name = \"Watchlist2\", securities = [\"700.HK\", \"AAPL.US\"], SecuritiesUpdateMode.Replace) warrant_issuers() Get warrant issuers Returns: Type Description List [ IssuerInfo ] Warrant issuers Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_issuers() print(resp) warrant_list(symbol, sort_by, sort_order, warrant_type=None, issuer=None, expiry_date=None, price_type=None, status=None) Get warrant list Parameters: Name Type Description Default symbol str Security code required sort_by Type [ WarrantSortBy ] Sort by field required sort_order Type [ SortOrderType ] Sort order required warrant_type Optional [ List [ Type [ WarrantType ]]] Filter by warrant type None issuer Optional [ List [ int ]] Filter by issuer None expiry_date Optional [ List [ Type [ FilterWarrantExpiryDate ]]] Filter by expiry date None price_type Optional [ List [ Type [ FilterWarrantInOutBoundsType ]]] Filter by price type None status Optional [ List [ Type [ WarrantStatus ]]] Filter by status None Returns: Type Description List [ WarrantInfo ] Warrant list Examples: :: from longport.openapi import QuoteContext, Config, WarrantSortBy, SortOrderType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_list(\"700.HK\", WarrantSortBy.LastDone, SortOrderType.Ascending) print(resp) warrant_quote(symbols) Get quote of warrant securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ WarrantQuote ] Warrant quote list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_quote([\"21125.HK\"]) print(resp) watchlist() Get watch list Returns: Type Description List [ WatchlistGroup ] Watch list groups Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.watchlist() print(resp)","title":"QuoteContext"},{"location":"quote_context/#quotecontext","text":"Quote context Parameters: Name Type Description Default config Config Configuration object required","title":"QuoteContext"},{"location":"quote_context/#longport.openapi.QuoteContext.brokers","text":"Get security brokers Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.brokers(\"700.HK\") print(resp)","title":"brokers"},{"location":"quote_context/#longport.openapi.QuoteContext.calc_indexes","text":"Get calc indexes Parameters: Name Type Description Default symbols List [ str ] Security codes required indexes List [ Type [ CalcIndex ]] Calc indexes required Returns: Type Description List [ SecurityCalcIndex ] Calc indexes of the symbols Examples: :: from longport.openapi import QuoteContext, Config, CalcIndex config = Config.from_env() ctx = QuoteContext(config) resp = ctx.calc_indexes([\"700.HK\", \"APPL.US\"], [CalcIndex.LastDone, CalcIndex.ChangeRate]) print(resp)","title":"calc_indexes"},{"location":"quote_context/#longport.openapi.QuoteContext.candlesticks","text":"Get security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Candlestick period required count int Count of cancdlestick (Maximum is 1000 ) required adjust_type Type [ AdjustType ] Adjustment type required Returns: Type Description List [ Candlestick ] Candlesticks Examples: :: from longport.openapi import QuoteContext, Config, Period, AdjustType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.candlesticks( \"700.HK\", Period.Day, 10, AdjustType.NoAdjust) print(resp)","title":"candlesticks"},{"location":"quote_context/#longport.openapi.QuoteContext.capital_distribution","text":"Get capital distribution Parameters: Name Type Description Default symbol str Security code required Returns: Type Description CapitalDistributionResponse Capital distribution Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_distribution(\"700.HK\") print(resp)","title":"capital_distribution"},{"location":"quote_context/#longport.openapi.QuoteContext.capital_flow","text":"Get capital flow intraday Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ CapitalFlowLine ] Capital flow list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_flow(\"700.HK\") print(resp)","title":"capital_flow"},{"location":"quote_context/#longport.openapi.QuoteContext.create_watchlist_group","text":"Create watchlist group Parameters: Name Type Description Default name str Group name required securities Optional [ List [ str ]] Securities None Returns: Type Description int Group ID Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) group_id = ctx.create_watchlist_group(name = \"Watchlist1\", securities = [\"700.HK\", \"AAPL.US\"]) print(group_id)","title":"create_watchlist_group"},{"location":"quote_context/#longport.openapi.QuoteContext.delete_watchlist_group","text":"Delete watchlist group Parameters: Name Type Description Default id int Group ID required purge bool Move securities in this group to the default group False Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) ctx.delete_watchlist_group(10086)","title":"delete_watchlist_group"},{"location":"quote_context/#longport.openapi.QuoteContext.depth","text":"Get security depth Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.depth(\"700.HK\") print(resp)","title":"depth"},{"location":"quote_context/#longport.openapi.QuoteContext.history_candlesticks_by_date","text":"Get security history candlesticks by date Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required adjust_type Type [ AdjustType ] Adjust type required start Optional [ date ] Start date required end Optional [ date ] End date required","title":"history_candlesticks_by_date"},{"location":"quote_context/#longport.openapi.QuoteContext.history_candlesticks_by_offset","text":"Get security history candlesticks by offset Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required adjust_type Type [ AdjustType ] Adjust type required forward bool If True , query the latest from the specified time required count int Count of candlesticks required time Optional [ datetime ] Datetime None","title":"history_candlesticks_by_offset"},{"location":"quote_context/#longport.openapi.QuoteContext.intraday","text":"Get security intraday lines Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ IntradayLine ] Intraday lines Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.intraday(\"700.HK\") print(resp)","title":"intraday"},{"location":"quote_context/#longport.openapi.QuoteContext.member_id","text":"Returns the member ID","title":"member_id"},{"location":"quote_context/#longport.openapi.QuoteContext.option_chain_expiry_date_list","text":"Get option chain expiry date list Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ date ] Option chain expiry date list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_expiry_date_list(\"AAPL.US\") print(resp)","title":"option_chain_expiry_date_list"},{"location":"quote_context/#longport.openapi.QuoteContext.option_chain_info_by_date","text":"Get option chain info by date Parameters: Name Type Description Default symbol str Security code required expiry_date date Expiry date required Returns: Type Description List [ StrikePriceInfo ] Option chain info Examples: :: from datetime import date from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_info_by_date( \"AAPL.US\", date(2023, 1, 20)) print(resp)","title":"option_chain_info_by_date"},{"location":"quote_context/#longport.openapi.QuoteContext.option_quote","text":"Get quote of option securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ OptionQuote ] Option quote list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_quote([\"AAPL230317P160000.US\"]) print(resp)","title":"option_quote"},{"location":"quote_context/#longport.openapi.QuoteContext.participants","text":"Get participants Returns: Type Description List [ ParticipantInfo ] Participants Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.participants() print(resp)","title":"participants"},{"location":"quote_context/#longport.openapi.QuoteContext.quote","text":"Get quote of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityQuote ] Security quote list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"quote"},{"location":"quote_context/#longport.openapi.QuoteContext.quote_level","text":"Returns the quote level","title":"quote_level"},{"location":"quote_context/#longport.openapi.QuoteContext.quote_package_details","text":"Returns the quote package details","title":"quote_package_details"},{"location":"quote_context/#longport.openapi.QuoteContext.realtime_brokers","text":"Get real-time brokers Get real-time brokers of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Brokers], is_first_push = True) sleep(5) resp = ctx.realtime_brokers(\"700.HK\") print(resp)","title":"realtime_brokers"},{"location":"quote_context/#longport.openapi.QuoteContext.realtime_candlesticks","text":"Get real-time candlesticks Get Get real-time candlesticks of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required count int Count of candlesticks required Returns: Type Description List [ Candlestick ] Security candlesticks Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, Period config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe_candlesticks(\"AAPL.US\", Period.Min_1) sleep(5) resp = ctx.realtime_candlesticks(\"AAPL.US\", Period.Min_1, 10) print(resp)","title":"realtime_candlesticks"},{"location":"quote_context/#longport.openapi.QuoteContext.realtime_depth","text":"Get real-time depth Get real-time depth of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Depth], is_first_push = True) sleep(5) resp = ctx.realtime_depth(\"700.HK\") print(resp)","title":"realtime_depth"},{"location":"quote_context/#longport.openapi.QuoteContext.realtime_quote","text":"Get real-time quote Get real-time quotes of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ RealtimeQuote ] Quote list Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(5) resp = ctx.realtime_quote([\"700.HK\", \"AAPL.US\"]) print(resp)","title":"realtime_quote"},{"location":"quote_context/#longport.openapi.QuoteContext.realtime_trades","text":"Get real-time trades Get real-time trades of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required count int Count of trades required Returns: Type Description List [ Trade ] Security trades Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Trade], is_first_push = False) sleep(5) resp = ctx.realtime_trades(\"700.HK\", 10) print(resp)","title":"realtime_trades"},{"location":"quote_context/#longport.openapi.QuoteContext.security_list","text":"Get security list Parameters: Name Type Description Default market Type [ Market ] Market required category Type [ SecurityListCategory ] Security list category required Returns: Type Description List [ Security ] Security list Examples: :: from longport.openapi import QuoteContext, Config, Market, SecurityListCategory config = Config.from_env() ctx = QuoteContext(config) resp = ctx.security_list(Market.HK, SecurityListCategory.Overnight) print(resp)","title":"security_list"},{"location":"quote_context/#longport.openapi.QuoteContext.set_on_brokers","text":"Set brokers callback, after receiving the brokers data push, it will call back to this function.","title":"set_on_brokers"},{"location":"quote_context/#longport.openapi.QuoteContext.set_on_candlestick","text":"Set candlestick callback, after receiving the candlestick updated event, it will call back to this function.","title":"set_on_candlestick"},{"location":"quote_context/#longport.openapi.QuoteContext.set_on_depth","text":"Set depth callback, after receiving the depth data push, it will call back to this function.","title":"set_on_depth"},{"location":"quote_context/#longport.openapi.QuoteContext.set_on_quote","text":"Set quote callback, after receiving the quote data push, it will call back to this function.","title":"set_on_quote"},{"location":"quote_context/#longport.openapi.QuoteContext.set_on_trades","text":"Set trades callback, after receiving the trades data push, it will call back to this function.","title":"set_on_trades"},{"location":"quote_context/#longport.openapi.QuoteContext.static_info","text":"Get basic information of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityStaticInfo ] Security info list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.static_info( [\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"static_info"},{"location":"quote_context/#longport.openapi.QuoteContext.subscribe","text":"Subscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required is_first_push bool Whether to perform a data push immediately after subscribing. (trade not supported) False Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType, PushQuote def on_quote(symbol: str, event: PushQuote): print(symbol, event) config = Config.from_env() ctx = QuoteContext(config) ctx.set_on_quote(on_quote) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(30)","title":"subscribe"},{"location":"quote_context/#longport.openapi.QuoteContext.subscribe_candlesticks","text":"Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required Examples: :: from longport.openapi import QuoteContext, Config, PushCandlestick config = Config.from_env() ctx = QuoteContext(config) def on_candlestick(symbol: str, event: PushCandlestick): print(symbol, event) ctx.set_on_candlestick(on_candlestick) ctx.subscribe_candlesticks(\"700.HK\", Period.Min_1) sleep(30)","title":"subscribe_candlesticks"},{"location":"quote_context/#longport.openapi.QuoteContext.subscriptions","text":"Get subscription information Examples: :: from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) resp = ctx.subscriptions() print(resp)","title":"subscriptions"},{"location":"quote_context/#longport.openapi.QuoteContext.trades","text":"Get security trades Parameters: Name Type Description Default symbol str Security code required count int Count of trades (Maximum is 1000 ) required Returns: Type Description List [ Trade ] Trades Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trades(\"700.HK\", 10) print(resp)","title":"trades"},{"location":"quote_context/#longport.openapi.QuoteContext.trading_days","text":"Get trading session of the day The interval must be less than one month, and only the most recent year is supported. Parameters: Name Type Description Default market Type [ Market ] Market required begin date Begin date required end date End date required Returns: Type Description MarketTradingDays Trading days Examples: :: from datetime import date from longport.openapi import QuoteContext, Config, Market config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_days( Market.HK, date(2022, 1, 1), date(2022, 2, 1)) print(resp)","title":"trading_days"},{"location":"quote_context/#longport.openapi.QuoteContext.trading_session","text":"Get trading session of the day Returns: Type Description List [ MarketTradingSession ] Trading session of the day Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_session() print(resp)","title":"trading_session"},{"location":"quote_context/#longport.openapi.QuoteContext.unsubscribe","text":"Unsubscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required Examples: :: from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) ctx.unsubscribe([\"AAPL.US\"], [SubType.Quote])","title":"unsubscribe"},{"location":"quote_context/#longport.openapi.QuoteContext.unsubscribe_candlesticks","text":"Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required","title":"unsubscribe_candlesticks"},{"location":"quote_context/#longport.openapi.QuoteContext.update_watchlist_group","text":"Update watchlist group Parameters: Name Type Description Default id int Group ID required name Optional [ str ] Group name None securities Optional [ List [ str ]] Securities None Examples: :: from longport.openapi import QuoteContext, Config, SecuritiesUpdateMode config = Config.from_env() ctx = QuoteContext(config) ctx.update_watchlist_group(10086, name = \"Watchlist2\", securities = [\"700.HK\", \"AAPL.US\"], SecuritiesUpdateMode.Replace)","title":"update_watchlist_group"},{"location":"quote_context/#longport.openapi.QuoteContext.warrant_issuers","text":"Get warrant issuers Returns: Type Description List [ IssuerInfo ] Warrant issuers Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_issuers() print(resp)","title":"warrant_issuers"},{"location":"quote_context/#longport.openapi.QuoteContext.warrant_list","text":"Get warrant list Parameters: Name Type Description Default symbol str Security code required sort_by Type [ WarrantSortBy ] Sort by field required sort_order Type [ SortOrderType ] Sort order required warrant_type Optional [ List [ Type [ WarrantType ]]] Filter by warrant type None issuer Optional [ List [ int ]] Filter by issuer None expiry_date Optional [ List [ Type [ FilterWarrantExpiryDate ]]] Filter by expiry date None price_type Optional [ List [ Type [ FilterWarrantInOutBoundsType ]]] Filter by price type None status Optional [ List [ Type [ WarrantStatus ]]] Filter by status None Returns: Type Description List [ WarrantInfo ] Warrant list Examples: :: from longport.openapi import QuoteContext, Config, WarrantSortBy, SortOrderType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_list(\"700.HK\", WarrantSortBy.LastDone, SortOrderType.Ascending) print(resp)","title":"warrant_list"},{"location":"quote_context/#longport.openapi.QuoteContext.warrant_quote","text":"Get quote of warrant securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ WarrantQuote ] Warrant quote list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_quote([\"21125.HK\"]) print(resp)","title":"warrant_quote"},{"location":"quote_context/#longport.openapi.QuoteContext.watchlist","text":"Get watch list Returns: Type Description List [ WatchlistGroup ] Watch list groups Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.watchlist() print(resp)","title":"watchlist"},{"location":"reference_all/","text":"Code Reference AccountBalance Account balance buy_power instance-attribute Buy power cash_infos instance-attribute Cash details currency instance-attribute Currency init_margin instance-attribute Initial margin maintenance_margin instance-attribute Maintenance margin margin_call instance-attribute Margin call max_finance_amount instance-attribute Maximum financing amount net_assets instance-attribute Net assets remaining_finance_amount instance-attribute Remaining financing amount risk_level instance-attribute Risk control level total_cash instance-attribute Total cash AdjustType Candlestick adjustment type ForwardAdjust Bases: AdjustType Adjust forward NoAdjust Bases: AdjustType Actual Brokers Brokers broker_ids instance-attribute Broker IDs position instance-attribute Position CalcIndex Calc index Amplitude Bases: CalcIndex Amplitude BalancePoint Bases: CalcIndex Breakeven point CallPrice Bases: CalcIndex Call price CapitalFlow Bases: CalcIndex Capital flow ChangeRate Bases: CalcIndex Change rate ChangeValue Bases: CalcIndex Change value ConversionRatio Bases: CalcIndex Conversion ratio Delta Bases: CalcIndex Delta DividendRatioTtm Bases: CalcIndex Dividend ratio (TTM) EffectiveLeverage Bases: CalcIndex Effective leverage ExpiryDate Bases: CalcIndex Expiry date FiveDayChangeRate Bases: CalcIndex Five days change ratio FiveMinutesChangeRate Bases: CalcIndex Five minutes change ratio Gamma Bases: CalcIndex Gamma HalfYearChangeRate Bases: CalcIndex Half year change ratio ImpliedVolatility Bases: CalcIndex Implied volatility ItmOtm Bases: CalcIndex In/out of the bound LastDone Bases: CalcIndex Latest price LeverageRatio Bases: CalcIndex Leverage ratio LowerStrikePrice Bases: CalcIndex Lower bound price OpenInterest Bases: CalcIndex Open interest OutstandingQty Bases: CalcIndex Outstanding quantity OutstandingRatio Bases: CalcIndex Outstanding ratio PbRatio Bases: CalcIndex PB PeTtmRatio Bases: CalcIndex PE (TTM) Premium Bases: CalcIndex Premium Rho Bases: CalcIndex Rho StrikePrice Bases: CalcIndex Strike price TenDayChangeRate Bases: CalcIndex Ten days change ratio Theta Bases: CalcIndex Theta ToCallPrice Bases: CalcIndex Price interval from the call price TotalMarketValue Bases: CalcIndex Total market value Turnover Bases: CalcIndex Turnover TurnoverRate Bases: CalcIndex Turnover rate UpperStrikePrice Bases: CalcIndex Upper bound price Vega Bases: CalcIndex Vega Volume Bases: CalcIndex Volume VolumeRatio Bases: CalcIndex Volume ratio WarrantDelta Bases: CalcIndex Warrant delta YtdChangeRate Bases: CalcIndex Year-to-date change ratio Candlestick Candlestick close instance-attribute Close price high instance-attribute High price low instance-attribute Low price open instance-attribute Open price timestamp instance-attribute Timestamp turnover instance-attribute Turnover volume instance-attribute Volume CapitalDistribution Capital distribution large instance-attribute Large order medium instance-attribute Medium order small instance-attribute Small order CapitalDistributionResponse Capital distribution response capital_in instance-attribute Inflow capital data capital_out instance-attribute Outflow capital data timestamp instance-attribute Time CapitalFlowLine Capital flow line inflow instance-attribute Inflow capital data timestamp instance-attribute Time CashFlow Cash flow balance instance-attribute Cash amount business_time instance-attribute Business time business_type instance-attribute Balance type currency instance-attribute Cash currency description instance-attribute Cash flow description direction instance-attribute Outflow direction symbol instance-attribute Associated Stock code information transaction_flow_name instance-attribute Cash flow name CashFlowDirection Cash flow direction In Bases: CashFlowDirection In Out Bases: CashFlowDirection Out Unknown Bases: CashFlowDirection Unknown CashInfo CashInfo available_cash instance-attribute Available cash currency instance-attribute Currency frozen_cash instance-attribute Frozen cash settling_cash instance-attribute Cash to be settled withdraw_cash instance-attribute Withdraw cash ChargeCategoryCode Charge category code Broker Bases: ChargeCategoryCode Broker Third Bases: ChargeCategoryCode Third Unknown Bases: ChargeCategoryCode Unknown CommissionFreeStatus Commission-free Status Calculated Bases: CommissionFreeStatus Commission-free amount to be calculated None_ Bases: CommissionFreeStatus None Pending Bases: CommissionFreeStatus Pending commission-free Ready Bases: CommissionFreeStatus Commission-free applied Unknown Bases: CommissionFreeStatus Unknown Config Configuration options for LongPort sdk Parameters: Name Type Description Default app_key str App Key required app_secret str App Secret required access_token str Access Token required http_url Optional [ str ] HTTP API url None quote_ws_url Optional [ str ] Websocket url for quote API None trade_ws_url Optional [ str ] Websocket url for trade API None language Optional [ Type [ Language ]] Language identifier None enable_overnight bool Enable overnight quote False push_candlestick_mode Type [ PushCandlestickMode ] Push candlestick mode Realtime enable_print_quote_packages bool Enable printing the opened quote packages when connected to the server True from_env() classmethod Create a new Config from the given environment variables It first gets the environment variables from the .env file in the current directory. Variables LONGPORT_APP_KEY - App key LONGPORT_APP_SECRET - App secret LONGPORT_ACCESS_TOKEN - Access token LONGPORT_HTTP_URL - HTTP endpoint url LONGPORT_QUOTE_WS_URL - Quote websocket endpoint url LONGPORT_TRADE_WS_URL - Trade websocket endpoint url LONGPORT_ENABLE_OVERNIGHT - Enable overnight quote, true or false (Default: false ) refresh_access_token(expired_at=None) Gets a new access_token Parameters: Name Type Description Default expired_at Optional [ datetime ] The expiration time of the access token, defaults to 90 days. None Returns: Type Description str Access token DeductionStatus Deduction status Done Bases: DeductionStatus Settled and distributed NoData Bases: DeductionStatus Settled with no data None_ Bases: DeductionStatus None Pending Bases: DeductionStatus Settled and pending distribution Unknown Bases: DeductionStatus Unknown Depth Depth order_num instance-attribute Number of orders position instance-attribute Position price instance-attribute Price volume instance-attribute Volume DerivativeType Derivative type Option Bases: DerivativeType US stock options Warrant Bases: DerivativeType HK warrants EstimateMaxPurchaseQuantityResponse Response for estimate maximum purchase quantity cash_max_qty instance-attribute Cash available quantity margin_max_qty instance-attribute Margin available quantity Execution Execution order_id instance-attribute Order ID price instance-attribute Executed price quantity instance-attribute Executed quantity symbol instance-attribute Security code trade_done_at instance-attribute Trade done time trade_id instance-attribute Execution ID FilterWarrantExpiryDate Filter warrant expiry date type Between_3_6 Bases: FilterWarrantExpiryDate 3 - 6 months Between_6_12 Bases: FilterWarrantExpiryDate 6 - 12 months GT_12 Bases: FilterWarrantExpiryDate Greater than 12 months LT_3 Bases: FilterWarrantExpiryDate Less than 3 months FilterWarrantInOutBoundsType Filter warrant in/out of the bounds type In Bases: FilterWarrantInOutBoundsType In bounds Out Bases: FilterWarrantInOutBoundsType Out bounds FundPosition Fund position cost_net_asset_value instance-attribute Net cost currency instance-attribute Currency current_net_asset_value instance-attribute Current equity holding_units instance-attribute Holding units net_asset_value_day instance-attribute Current equity PyDecimal symbol instance-attribute Fund ISIN code symbol_name instance-attribute Fund name FundPositionChannel Fund position channel account_channel instance-attribute Account type positions instance-attribute Fund positions FundPositionsResponse Fund positions response channels instance-attribute Channels HttpClient A HTTP client for longPort open api Parameters: Name Type Description Default http_url str HTTP API url required app_key str App Key required app_secret str App Secret required access_token str Access Token required from_env() classmethod Create a new HttpClient from the given environment variables It first gets the environment variables from the .env file in the current directory. Variables LONGPORT_HTTP_URL - HTTP endpoint url LONGPORT_APP_KEY - App key LONGPORT_APP_SECRET - App secret LONGPORT_ACCESS_TOKEN - Access token request(method, path, headers=None, body=None) Performs a HTTP reqest Examples: :: from longport.openapi import HttpClient client = HttpClient(http_url, app_key, app_secret, access_token); # get resp = client.request(\"get\", \"/foo/bar\"); print(resp) # post client.request(\"get\", \"/foo/bar\", { \"foo\": 1, \"bar\": 2 }); IntradayLine Intraday line avg_price instance-attribute Average price price instance-attribute Close price of the minute timestamp instance-attribute Start time of the minute turnover instance-attribute Turnover volume instance-attribute Volume IssuerInfo Issuer info issuer_id instance-attribute Issuer ID name_cn instance-attribute Issuer name (zh-CN) name_en instance-attribute Issuer name (en) name_hk instance-attribute Issuer name (zh-HK) Language Language identifier EN Bases: Language en ZH_CN Bases: Language zh-CN ZH_HK Bases: Language zh-HK MarginRatio Margin ratio fm_factor instance-attribute Forced close-out margin ratio im_factor instance-attribute Initial margin ratio mm_factor instance-attribute Maintain the initial margin ratio Market Market CN Bases: Market CN market HK Bases: Market HK market SG Bases: Market SG market US Bases: Market US market Unknown Bases: Market Unknown MarketTradingSession Market trading session market instance-attribute Market trade_sessions instance-attribute Trading session OpenApiException Bases: Exception OpenAPI exception code instance-attribute Error code message instance-attribute Error message OptionDirection Option direction Call Bases: OptionDirection Call Put Bases: OptionDirection Put Unknown Bases: OptionDirection Unknown OptionQuote Quote of option contract_multiplier instance-attribute Contract multiplier contract_size instance-attribute Contract size contract_type instance-attribute Option type direction instance-attribute Option direction expiry_date instance-attribute Exprity date high instance-attribute High historical_volatility instance-attribute Underlying security historical volatility of the option implied_volatility instance-attribute Implied volatility last_done instance-attribute Latest price low instance-attribute Low open instance-attribute Open open_interest instance-attribute Number of open positions prev_close instance-attribute Yesterday's close strike_price instance-attribute Strike price symbol instance-attribute Security code timestamp instance-attribute Time of latest price trade_status instance-attribute Security trading status turnover instance-attribute Turnover underlying_symbol instance-attribute Underlying security symbol of the option volume instance-attribute Volume OptionType Option type American Bases: OptionType American Europe Bases: OptionType Europe Unknown Bases: OptionType Unknown Order Order currency instance-attribute Currency executed_price instance-attribute Executed price executed_quantity instance-attribute Executed quantity expire_date instance-attribute Long term order expire date last_done instance-attribute Last done limit_offset instance-attribute TSLPAMT / TSLPPCT order limit offset amount msg instance-attribute Rejected Message or remark order_id instance-attribute Order ID order_type instance-attribute Order type outside_rth instance-attribute Enable or disable outside regular trading hours price instance-attribute Submitted price quantity instance-attribute Submitted quantity remark instance-attribute Remark side instance-attribute Order side status instance-attribute Order status stock_name instance-attribute Stock name submitted_at instance-attribute Submitted time symbol instance-attribute Security code tag instance-attribute Order tag time_in_force instance-attribute Time in force type trailing_amount instance-attribute TSMAMT / TSLPAMT order trailing amount trailing_percent instance-attribute TSMPCT / TSLPPCT order trailing percent trigger_at instance-attribute Conditional order trigger time trigger_price instance-attribute LIT / MIT Order Trigger Price trigger_status instance-attribute Conditional order trigger status updated_at instance-attribute Last updated time OrderChargeDetail Order charge detail currency instance-attribute Settlement currency items instance-attribute Order charge items total_amount instance-attribute Total charges amount OrderChargeFee Order charge fee amount instance-attribute Charge amount code instance-attribute Charge code currency instance-attribute Charge currency name instance-attribute Charge name OrderChargeItem Order charge item code instance-attribute Charge category code fees instance-attribute Charge details name instance-attribute Charge category name OrderDetail Order detail charge_detail instance-attribute Order charges currency instance-attribute Currency deductions_amount instance-attribute Deduction amount deductions_currency instance-attribute Deduction currency deductions_status instance-attribute Deduction status executed_price instance-attribute Executed price executed_quantity instance-attribute Executed quantity expire_date instance-attribute Long term order expire date free_amount instance-attribute Commission-free amount free_currency instance-attribute Commission-free currency free_status instance-attribute Commission-free Status history instance-attribute Order history details last_done instance-attribute Last done limit_offset instance-attribute TSLPAMT / TSLPPCT order limit offset amount msg instance-attribute Rejected Message or remark order_id instance-attribute Order ID order_type instance-attribute Order type outside_rth instance-attribute Enable or disable outside regular trading hours platform_deducted_amount instance-attribute Platform deduction amount platform_deducted_currency instance-attribute Platform deduction currency platform_deducted_status instance-attribute Platform fee deduction status price instance-attribute Submitted price quantity instance-attribute Submitted quantity remark instance-attribute Remark side instance-attribute Order side status instance-attribute Order status stock_name instance-attribute Stock name submitted_at instance-attribute Submitted time symbol instance-attribute Security code tag instance-attribute Order tag time_in_force instance-attribute Time in force type trailing_amount instance-attribute TSMAMT / TSLPAMT order trailing amount trailing_percent instance-attribute TSMPCT / TSLPPCT order trailing percent trigger_at instance-attribute Conditional order trigger time trigger_price instance-attribute LIT / MIT Order Trigger Price trigger_status instance-attribute Conditional order trigger status updated_at instance-attribute Last updated time OrderHistoryDetail Order history detail msg instance-attribute Execution or error message price instance-attribute Executed price for executed orders, submitted price for expired, canceled, rejected orders, etc. quantity instance-attribute Executed quantity for executed orders, remaining quantity for expired, canceled, rejected orders, etc. status instance-attribute Order status time instance-attribute Occurrence time OrderSide Order side Buy Bases: OrderSide Buy Sell Bases: OrderSide Sell Unknown Bases: OrderSide Unknown OrderStatus Order status Canceled Bases: OrderStatus Canceled Expired Bases: OrderStatus ExpiredStatus Filled Bases: OrderStatus Filled New Bases: OrderStatus New NotReported Bases: OrderStatus Not reported PartialFilled Bases: OrderStatus Partial Filled PartialWithdrawal Bases: OrderStatus PartialWithdrawal PendingCancel Bases: OrderStatus Pending Cancel PendingReplace Bases: OrderStatus Pending Replace ProtectedNotReported Bases: OrderStatus Not reported (Protected Order) Rejected Bases: OrderStatus Rejected Replaced Bases: OrderStatus Replaced ReplacedNotReported Bases: OrderStatus Not reported (Replaced Order) Unknown Bases: OrderStatus Unknown VarietiesNotReported Bases: OrderStatus Not reported (Conditional Order) WaitToCancel Bases: OrderStatus Wait To Cancel WaitToNew Bases: OrderStatus Wait To New WaitToReplace Bases: OrderStatus Wait To Replace OrderTag Order tag AllocatedSub Bases: OrderTag Trade Allocation Creditor Bases: OrderTag Option Exercise Long Debtor Bases: OrderTag Option Exercise Short Grey Bases: OrderTag Grey Order LongTerm Bases: OrderTag Long term Order MarginCall Bases: OrderTag Force Selling NonExercise Bases: OrderTag Wavier Of Option Exercise Normal Bases: OrderTag Normal Order Offline Bases: OrderTag OTC Unknown Bases: OrderTag Unknown OrderType Order type ALO Bases: OrderType At-auction Limit Order AO Bases: OrderType At-auction Order ELO Bases: OrderType Enhanced Limit Order LIT Bases: OrderType Limit If Touched LO Bases: OrderType Limit Order MIT Bases: OrderType Market If Touched MO Bases: OrderType Market Order ODD Bases: OrderType Odd Lots SLO Bases: OrderType Special Limit Order TSLPAMT Bases: OrderType Trailing Limit If Touched (Trailing Amount) TSLPPCT Bases: OrderType Trailing Limit If Touched (Trailing Percent) TSMAMT Bases: OrderType Trailing Market If Touched (Trailing Amount) TSMPCT Bases: OrderType Trailing Market If Touched (Trailing Percent) Unknown Bases: OrderType Unknown OutsideRTH Enable or disable outside regular trading hours AnyTime Bases: OutsideRTH Any time Overnight Bases: OutsideRTH Overnight RTHOnly Bases: OutsideRTH Regular trading hour only Unknown Bases: OutsideRTH Unknown ParticipantInfo Participant info broker_ids instance-attribute Broker IDs name_cn instance-attribute Participant name (zh-CN) name_en instance-attribute Participant name (en) name_hk instance-attribute Participant name (zh-HK) Period Candlestick period Day Bases: Period Daily Min_1 Bases: Period One Minute Min_10 Bases: Period Ten Minutes Min_120 Bases: Period Two Hours Min_15 Bases: Period Fifteen Minutes Min_180 Bases: Period Three Hours Min_2 Bases: Period Two Minutes Min_20 Bases: Period Twenty Minutes Min_240 Bases: Period Four Hours Min_3 Bases: Period Three Minutes Min_30 Bases: Period Thirty Minutes Min_45 Bases: Period Forty-Five Minutes Min_5 Bases: Period Five Minutes Min_60 Bases: Period Sixty Minutes Month Bases: Period Monthly Quarter Bases: Period Quarterly Unknown Bases: Period Unknown Week Bases: Period Weekly Year Bases: Period Yearly PrePostQuote Quote of US pre/post market high instance-attribute High last_done instance-attribute Latest price low instance-attribute Low prev_close instance-attribute Close of the last trade session timestamp instance-attribute Time of latest price turnover instance-attribute Turnover volume instance-attribute Volume PushBrokers Brokers message ask_brokers instance-attribute Ask brokers bid_brokers instance-attribute Bid brokers PushCandlestick Candlestick updated event candlestick instance-attribute Candlestick is_confirmed instance-attribute Is confirmed period instance-attribute Period type PushCandlestickMode Push candlestick mode Confirmed Bases: PushCandlestickMode Confirmed Realtime Bases: PushCandlestickMode Real-time PushDepth Depth message asks instance-attribute Ask depth bids instance-attribute Bid depth PushOrderChanged Order changed message account_no instance-attribute Account no currency instance-attribute Currency executed_price instance-attribute Executed price executed_quantity instance-attribute Executed quantity last_price instance-attribute Last price last_share instance-attribute Last share limit_offset instance-attribute Limit offset amount msg instance-attribute Rejected message or remark order_id instance-attribute Order ID order_type instance-attribute Order type remark instance-attribute Remark message side instance-attribute Order side status instance-attribute Order status stock_name instance-attribute Stock name submitted_at instance-attribute Submitted time submitted_price instance-attribute Submitted price submitted_quantity instance-attribute Submitted quantity symbol instance-attribute Order symbol tag instance-attribute Order tag trailing_amount instance-attribute Trailing amount trailing_percent instance-attribute Trailing percent trigger_at instance-attribute Conditional order trigger time trigger_price instance-attribute Order trigger price trigger_status instance-attribute Conditional order trigger status updated_at instance-attribute Last updated time PushQuote Quote message high instance-attribute High last_done instance-attribute Latest price low instance-attribute Low open instance-attribute Open timestamp instance-attribute Time of latest price trade_session instance-attribute Trade session trade_status instance-attribute Security trading status turnover instance-attribute Turnover volume instance-attribute Volume PushTrades Trades message trades instance-attribute Trades data QuoteContext Quote context Parameters: Name Type Description Default config Config Configuration object required brokers(symbol) Get security brokers Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.brokers(\"700.HK\") print(resp) calc_indexes(symbols, indexes) Get calc indexes Parameters: Name Type Description Default symbols List [ str ] Security codes required indexes List [ Type [ CalcIndex ]] Calc indexes required Returns: Type Description List [ SecurityCalcIndex ] Calc indexes of the symbols Examples: :: from longport.openapi import QuoteContext, Config, CalcIndex config = Config.from_env() ctx = QuoteContext(config) resp = ctx.calc_indexes([\"700.HK\", \"APPL.US\"], [CalcIndex.LastDone, CalcIndex.ChangeRate]) print(resp) candlesticks(symbol, period, count, adjust_type) Get security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Candlestick period required count int Count of cancdlestick (Maximum is 1000 ) required adjust_type Type [ AdjustType ] Adjustment type required Returns: Type Description List [ Candlestick ] Candlesticks Examples: :: from longport.openapi import QuoteContext, Config, Period, AdjustType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.candlesticks( \"700.HK\", Period.Day, 10, AdjustType.NoAdjust) print(resp) capital_distribution(symbol) Get capital distribution Parameters: Name Type Description Default symbol str Security code required Returns: Type Description CapitalDistributionResponse Capital distribution Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_distribution(\"700.HK\") print(resp) capital_flow(symbol) Get capital flow intraday Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ CapitalFlowLine ] Capital flow list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_flow(\"700.HK\") print(resp) create_watchlist_group(name, securities=None) Create watchlist group Parameters: Name Type Description Default name str Group name required securities Optional [ List [ str ]] Securities None Returns: Type Description int Group ID Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) group_id = ctx.create_watchlist_group(name = \"Watchlist1\", securities = [\"700.HK\", \"AAPL.US\"]) print(group_id) delete_watchlist_group(id, purge=False) Delete watchlist group Parameters: Name Type Description Default id int Group ID required purge bool Move securities in this group to the default group False Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) ctx.delete_watchlist_group(10086) depth(symbol) Get security depth Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.depth(\"700.HK\") print(resp) history_candlesticks_by_date(symbol, period, adjust_type, start, end) Get security history candlesticks by date Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required adjust_type Type [ AdjustType ] Adjust type required start Optional [ date ] Start date required end Optional [ date ] End date required history_candlesticks_by_offset(symbol, period, adjust_type, forward, count, time=None) Get security history candlesticks by offset Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required adjust_type Type [ AdjustType ] Adjust type required forward bool If True , query the latest from the specified time required count int Count of candlesticks required time Optional [ datetime ] Datetime None intraday(symbol) Get security intraday lines Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ IntradayLine ] Intraday lines Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.intraday(\"700.HK\") print(resp) member_id() Returns the member ID option_chain_expiry_date_list(symbol) Get option chain expiry date list Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ date ] Option chain expiry date list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_expiry_date_list(\"AAPL.US\") print(resp) option_chain_info_by_date(symbol, expiry_date) Get option chain info by date Parameters: Name Type Description Default symbol str Security code required expiry_date date Expiry date required Returns: Type Description List [ StrikePriceInfo ] Option chain info Examples: :: from datetime import date from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_info_by_date( \"AAPL.US\", date(2023, 1, 20)) print(resp) option_quote(symbols) Get quote of option securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ OptionQuote ] Option quote list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_quote([\"AAPL230317P160000.US\"]) print(resp) participants() Get participants Returns: Type Description List [ ParticipantInfo ] Participants Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.participants() print(resp) quote(symbols) Get quote of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityQuote ] Security quote list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) quote_level() Returns the quote level quote_package_details() Returns the quote package details realtime_brokers(symbol) Get real-time brokers Get real-time brokers of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Brokers], is_first_push = True) sleep(5) resp = ctx.realtime_brokers(\"700.HK\") print(resp) realtime_candlesticks(symbol, period, count) Get real-time candlesticks Get Get real-time candlesticks of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required count int Count of candlesticks required Returns: Type Description List [ Candlestick ] Security candlesticks Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, Period config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe_candlesticks(\"AAPL.US\", Period.Min_1) sleep(5) resp = ctx.realtime_candlesticks(\"AAPL.US\", Period.Min_1, 10) print(resp) realtime_depth(symbol) Get real-time depth Get real-time depth of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Depth], is_first_push = True) sleep(5) resp = ctx.realtime_depth(\"700.HK\") print(resp) realtime_quote(symbols) Get real-time quote Get real-time quotes of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ RealtimeQuote ] Quote list Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(5) resp = ctx.realtime_quote([\"700.HK\", \"AAPL.US\"]) print(resp) realtime_trades(symbol, count) Get real-time trades Get real-time trades of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required count int Count of trades required Returns: Type Description List [ Trade ] Security trades Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Trade], is_first_push = False) sleep(5) resp = ctx.realtime_trades(\"700.HK\", 10) print(resp) security_list(market, category) Get security list Parameters: Name Type Description Default market Type [ Market ] Market required category Type [ SecurityListCategory ] Security list category required Returns: Type Description List [ Security ] Security list Examples: :: from longport.openapi import QuoteContext, Config, Market, SecurityListCategory config = Config.from_env() ctx = QuoteContext(config) resp = ctx.security_list(Market.HK, SecurityListCategory.Overnight) print(resp) set_on_brokers(callback) Set brokers callback, after receiving the brokers data push, it will call back to this function. set_on_candlestick(callback) Set candlestick callback, after receiving the candlestick updated event, it will call back to this function. set_on_depth(callback) Set depth callback, after receiving the depth data push, it will call back to this function. set_on_quote(callback) Set quote callback, after receiving the quote data push, it will call back to this function. set_on_trades(callback) Set trades callback, after receiving the trades data push, it will call back to this function. static_info(symbols) Get basic information of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityStaticInfo ] Security info list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.static_info( [\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp) subscribe(symbols, sub_types, is_first_push=False) Subscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required is_first_push bool Whether to perform a data push immediately after subscribing. (trade not supported) False Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType, PushQuote def on_quote(symbol: str, event: PushQuote): print(symbol, event) config = Config.from_env() ctx = QuoteContext(config) ctx.set_on_quote(on_quote) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(30) subscribe_candlesticks(symbol, period) Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required Examples: :: from longport.openapi import QuoteContext, Config, PushCandlestick config = Config.from_env() ctx = QuoteContext(config) def on_candlestick(symbol: str, event: PushCandlestick): print(symbol, event) ctx.set_on_candlestick(on_candlestick) ctx.subscribe_candlesticks(\"700.HK\", Period.Min_1) sleep(30) subscriptions() Get subscription information Examples: :: from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) resp = ctx.subscriptions() print(resp) trades(symbol, count) Get security trades Parameters: Name Type Description Default symbol str Security code required count int Count of trades (Maximum is 1000 ) required Returns: Type Description List [ Trade ] Trades Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trades(\"700.HK\", 10) print(resp) trading_days(market, begin, end) Get trading session of the day The interval must be less than one month, and only the most recent year is supported. Parameters: Name Type Description Default market Type [ Market ] Market required begin date Begin date required end date End date required Returns: Type Description MarketTradingDays Trading days Examples: :: from datetime import date from longport.openapi import QuoteContext, Config, Market config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_days( Market.HK, date(2022, 1, 1), date(2022, 2, 1)) print(resp) trading_session() Get trading session of the day Returns: Type Description List [ MarketTradingSession ] Trading session of the day Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_session() print(resp) unsubscribe(symbols, sub_types) Unsubscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required Examples: :: from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) ctx.unsubscribe([\"AAPL.US\"], [SubType.Quote]) unsubscribe_candlesticks(symbol, period) Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required update_watchlist_group(id, name=None, securities=None, mode=None) Update watchlist group Parameters: Name Type Description Default id int Group ID required name Optional [ str ] Group name None securities Optional [ List [ str ]] Securities None Examples: :: from longport.openapi import QuoteContext, Config, SecuritiesUpdateMode config = Config.from_env() ctx = QuoteContext(config) ctx.update_watchlist_group(10086, name = \"Watchlist2\", securities = [\"700.HK\", \"AAPL.US\"], SecuritiesUpdateMode.Replace) warrant_issuers() Get warrant issuers Returns: Type Description List [ IssuerInfo ] Warrant issuers Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_issuers() print(resp) warrant_list(symbol, sort_by, sort_order, warrant_type=None, issuer=None, expiry_date=None, price_type=None, status=None) Get warrant list Parameters: Name Type Description Default symbol str Security code required sort_by Type [ WarrantSortBy ] Sort by field required sort_order Type [ SortOrderType ] Sort order required warrant_type Optional [ List [ Type [ WarrantType ]]] Filter by warrant type None issuer Optional [ List [ int ]] Filter by issuer None expiry_date Optional [ List [ Type [ FilterWarrantExpiryDate ]]] Filter by expiry date None price_type Optional [ List [ Type [ FilterWarrantInOutBoundsType ]]] Filter by price type None status Optional [ List [ Type [ WarrantStatus ]]] Filter by status None Returns: Type Description List [ WarrantInfo ] Warrant list Examples: :: from longport.openapi import QuoteContext, Config, WarrantSortBy, SortOrderType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_list(\"700.HK\", WarrantSortBy.LastDone, SortOrderType.Ascending) print(resp) warrant_quote(symbols) Get quote of warrant securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ WarrantQuote ] Warrant quote list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_quote([\"21125.HK\"]) print(resp) watchlist() Get watch list Returns: Type Description List [ WatchlistGroup ] Watch list groups Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.watchlist() print(resp) QuotePackageDetail Quote package detail description instance-attribute Description end_at instance-attribute End time key instance-attribute Key name instance-attribute Name start_at instance-attribute Start time RealtimeQuote Real-time quote high instance-attribute High last_done instance-attribute Latest price low instance-attribute Low open instance-attribute Open symbol instance-attribute Security code timestamp instance-attribute Time of latest price trade_status instance-attribute Security trading status turnover instance-attribute Turnover volume instance-attribute Volume SecuritiesUpdateMode Securities update mode Add Bases: SecuritiesUpdateMode Add securities Remove Bases: SecuritiesUpdateMode Remove securities Replace Bases: SecuritiesUpdateMode Replace securities Security Security name_cn instance-attribute Security name (zh-CN) name_en instance-attribute Security name (en) name_hk instance-attribute Security name (zh-HK) symbol instance-attribute Security code SecurityBoard Security board CNIX Bases: SecurityBoard CN Index CNSector Bases: SecurityBoard CN Industry Board HKEquity Bases: SecurityBoard Hong Kong Equity Securities HKHS Bases: SecurityBoard Hang Seng Index HKPreIPO Bases: SecurityBoard HK PreIPO Security HKSector Bases: SecurityBoard HK Industry Board HKWarrant Bases: SecurityBoard HK Warrant SGMain Bases: SecurityBoard SG Main Board SGSector Bases: SecurityBoard SG Industry Board SHMainConnect Bases: SecurityBoard SH Main Board(Connect) SHMainNonConnect Bases: SecurityBoard SH Main Board(Non Connect) SHSTAR Bases: SecurityBoard SH Science and Technology Innovation Board STI Bases: SecurityBoard Singapore Straits Index SZGEMConnect Bases: SecurityBoard SZ Gem Board(Connect) SZGEMNonConnect Bases: SecurityBoard SZ Gem Board(Non Connect) SZMainConnect Bases: SecurityBoard SZ Main Board(Connect) SZMainNonConnect Bases: SecurityBoard SZ Main Board(Non Connect) USDJI Bases: SecurityBoard Dow Jones Industrial Average USMain Bases: SecurityBoard US Pink Board USNSDQ Bases: SecurityBoard Nasdsaq Index USOption Bases: SecurityBoard US Option USOptionS Bases: SecurityBoard US Sepecial Option USPink Bases: SecurityBoard US Pink Board USSector Bases: SecurityBoard US Industry Board Unknown Bases: SecurityBoard Unknown SecurityBrokers Security brokers ask_brokers instance-attribute Ask brokers bid_brokers instance-attribute Bid brokers SecurityCalcIndex Security calc index response amplitude instance-attribute Amplitude balance_point instance-attribute Breakeven point call_price instance-attribute Call price capital_flow instance-attribute Capital flow change_rate instance-attribute Change ratio change_value instance-attribute Change value conversion_ratio instance-attribute Conversion ratio delta instance-attribute Delta dividend_ratio_ttm instance-attribute Dividend ratio (TTM) effective_leverage instance-attribute Effective leverage expiry_date instance-attribute Expiry date five_day_change_rate instance-attribute Five days change ratio five_minutes_change_rate instance-attribute Five minutes change ratio gamma instance-attribute Gamma half_year_change_rate instance-attribute Half year change ratio implied_volatility instance-attribute Implied volatility itm_otm instance-attribute In/out of the bound last_done instance-attribute Latest price leverage_ratio instance-attribute Leverage ratio lower_strike_price instance-attribute Lower bound price open_interest instance-attribute Open interest outstanding_qty instance-attribute Outstanding quantity outstanding_ratio instance-attribute Outstanding ratio pb_ratio instance-attribute PB pe_ttm_ratio instance-attribute PE (TTM) premium instance-attribute Premium rho instance-attribute Rho strike_price instance-attribute Strike price symbol instance-attribute Security symbol ten_day_change_rate instance-attribute Ten days change ratio theta instance-attribute Theta to_call_price instance-attribute Price interval from the call price total_market_value instance-attribute Total market value turnover instance-attribute Turnover turnover_rate instance-attribute turnover_rate upper_strike_price instance-attribute Upper bound price vega instance-attribute Vega volume instance-attribute Volume volume_ratio instance-attribute Volume ratio warrant_delta instance-attribute Warrant delta ytd_change_rate instance-attribute Year-to-date change ratio SecurityDepth Security depth asks instance-attribute Ask depth bids instance-attribute Bid depth SecurityListCategory Security list category Overnight Bases: SecurityListCategory Overnight SecurityQuote Quote of securitity high instance-attribute High last_done instance-attribute Latest price low instance-attribute Low open instance-attribute Open overnight_quote instance-attribute Quote of US overnight market post_market_quote instance-attribute Quote of US post market pre_market_quote instance-attribute Quote of US pre market prev_close instance-attribute Yesterday's close symbol instance-attribute Security code timestamp instance-attribute Time of latest price trade_status instance-attribute Security trading status turnover instance-attribute Turnover volume instance-attribute Volume SecurityStaticInfo The basic information of securities board instance-attribute Board bps instance-attribute Net assets per share circulating_shares instance-attribute Circulating shares currency instance-attribute Trading currency dividend_yield instance-attribute Dividend yield eps instance-attribute Earnings per share eps_ttm instance-attribute Earnings per share (TTM) exchange instance-attribute Exchange which the security belongs to hk_shares instance-attribute HK shares (only HK stocks) lot_size instance-attribute Lot size name_cn instance-attribute Security name (zh-CN) name_en instance-attribute Security name (en) name_hk instance-attribute Security name (zh-HK) stock_derivatives instance-attribute Types of supported derivatives symbol instance-attribute Security code total_shares instance-attribute Total shares SortOrderType Sort order type Ascending Bases: SortOrderType Ascending Descending Bases: SortOrderType Descending StockPosition Stock position available_quantity instance-attribute Available quantity cost_price instance-attribute Cost Price(According to the client's choice of average purchase or diluted cost) currency instance-attribute Currency init_quantity instance-attribute Initial position before market opening market instance-attribute Market quantity instance-attribute The number of holdings symbol instance-attribute Stock code symbol_name instance-attribute Stock name StockPositionChannel Stock position channel account_channel instance-attribute Account type positions instance-attribute Stock positions StockPositionsResponse Stock positions response channels instance-attribute Channels StrikePriceInfo Strike price info call_symbol instance-attribute Security code of call option price instance-attribute Strike price put_symbol instance-attribute Security code of put option standard instance-attribute Is standard SubType Subscription flags Brokers Bases: SubType Broker Depth Bases: SubType Depth Quote Bases: SubType Quote Trade Bases: SubType Trade SubmitOrderResponse Response for submit order request order_id instance-attribute Order id Subscription Subscription candlesticks instance-attribute Candlesticks sub_types instance-attribute Subscription types symbol instance-attribute Security code TimeInForceType Time in force type Day Bases: TimeInForceType Day Order GoodTilCanceled Bases: TimeInForceType Good Til Canceled Order GoodTilDate Bases: TimeInForceType Good Til Date Order Unknown Bases: TimeInForceType Unknown TopicType Topic type Private Bases: TopicType Private notification for trade Trade Trade direction instance-attribute Trade direction price instance-attribute Price timestamp instance-attribute Time of trading trade_session instance-attribute Trade session trade_type instance-attribute Trade type HK * - Overseas trade D - Odd-lot trade M - Non-direct off-exchange trade P - Late trade (Off-exchange previous day) U - Auction trade X - Direct off-exchange trade Y - Automatch internalized <empty string> - Automatch normal US <empty string> - Regular sale A - Acquisition B - Bunched trade D - Distribution F - Intermarket sweep G - Bunched sold trades H - Price variation trade I - Odd lot trade K - Rule 155 trde(NYSE MKT) M - Market center close price P - Prior reference price Q - Market center open price S - Split trade V - Contingent trade W - Average price trade X - Cross trade 1 - Stopped stock(Regular trade) volume instance-attribute Volume TradeContext Trade context Parameters: Name Type Description Default config Config Configuration object required account_balance(currency=None) Get account balance Parameters: Name Type Description Default currency Optional [ str ] Currency None Returns: Type Description List [ AccountBalance ] Account list Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.account_balance() print(resp) cancel_order(order_id) Cancel order Parameters: Name Type Description Default order_id str Order ID required Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.cancel_order(\"709043056541253632\") cash_flow(start_at, end_at, business_type=None, symbol=None, page=None, size=None) Get cash flow Parameters: Name Type Description Default start_at datetime Start time required end_at datetime End time required business_type Optional [ Type [ BalanceType ]] Balance type None symbol Optional [ str ] Target security code None page Optional [ int ] Start page (Default: 1) None size Optional [ int ] Page size (Default: 50) None Returns: Type Description List [ CashFlow ] Cash flow list Examples: :: from datetime import datetime from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.cash_flow( start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) estimate_max_purchase_quantity(symbol, order_type, side, price=None, currency=None, order_id=None, fractional_shares=False) Estimating the maximum purchase quantity for Hong Kong and US stocks, warrants, and options Parameters: Name Type Description Default symbol str Security symbol required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order side required price Optional [ Decimal ] Estimated order price, None currency Optional [ str ] Settlement currency None order_id Optional [ str ] Order ID, required when estimating the maximum purchase quantity for a modified order None fractional_shares bool Get the maximum fractional share buying power False Returns: Type Description EstimateMaxPurchaseQuantityResponse Response Examples: :: from longport.openapi import TradeContext, Config, OrderType, OrderSide config = Config.from_env() ctx = TradeContext(config) resp = ctx.estimate_max_purchase_quantity( symbol = \"700.HK\", order_type = OrderType.LO, side = OrderSide.Buy, ) print(resp) fund_positions(symbols=None) Get fund positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by fund codes None Returns: Type Description FundPositionsResponse Fund positions Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.fund_positions() print(resp) history_executions(symbol=None, start_at=None, end_at=None) Get history executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code, example: 700.HK , AAPL.US None start_at Optional [ datetime ] Start time None end_at Optional [ datetime ] End time None Returns: Type Description List [ Execution ] Execution list Examples: :: from datetime import datetime from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_executions( symbol = \"700.HK\", start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) history_orders(symbol=None, status=None, side=None, market=None, start_at=None, end_at=None) Get history orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None start_at Optional [ datetime ] Start time None end_at Optional [ datetime ] End time None Returns: Type Description List [ Order ] Order list Examples: :: from datetime import datetime from longport.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) margin_ratio(symbol) Get margin ratio Parameters: Name Type Description Default symbol str Security symbol required Returns: Type Description MarginRatio Margin ratio Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.margin_ratio(\"700.HK\") print(resp) order_detail(order_id) Get order detail Parameters: Name Type Description Default order id Order id required Returns: Type Description OrderDetail Order detail Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.order_detail(\"701276261045858304\") print(resp) replace_order(order_id, quantity, price=None, trigger_price=None, limit_offset=None, trailing_amount=None, trailing_percent=None, remark=None) Replace order Parameters: Name Type Description Default quantity Decimal Replaced quantity required price Optional [ Decimal ] Replaced price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Order Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None remark Optional [ str ] Remark (Maximum 64 characters) None Examples: :: from decimal import Decimal from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.replace_order( order_id = \"709043056541253632\", quantity = Decimal(100), price = Decimal(100), ) set_on_order_changed(callback) Set order changed callback, after receiving the order changed event, it will call back to this function. stock_positions(symbols=None) Get stock positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by stock codes None Returns: Type Description StockPositionsResponse Stock positions Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.stock_positions() print(resp) submit_order(symbol, order_type, side, submitted_quantity, time_in_force, submitted_price=None, trigger_price=None, limit_offset=None, trailing_amount=None, trailing_percent=None, expire_date=None, outside_rth=None, remark=None) Submit order Parameters: Name Type Description Default symbol str Security code required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order Side required submitted_quantity Decimal Submitted quantity required time_in_force Type [ TimeInForceType ] Time in force type required submitted_price Optional [ Decimal ] Submitted price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None expire_date Optional [ date ] Long term order expire date (Required when time_in_force is GoodTilDate ) None outside_rth Optional [ Type [ OutsideRTH ]] Enable or disable outside regular trading hours None remark Optional [ str ] Remark (Maximum 64 characters) None Returns: Type Description SubmitOrderResponse Response Examples: :: from decimal import Decimal from longport.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType config = Config.from_env() ctx = TradeContext(config) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(50), submitted_quantity = Decimal(200), time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp) subscribe(topics) Subscribe Parameters: Name Type Description Default topics List [ Type [ TopicType ]] Topic list required Examples: :: from time import sleep from decimal import Decimal from longport.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType, PushOrderChanged, TopicType def on_order_changed(event: PushOrderChanged): print(event) config = Config.from_env() ctx = TradeContext(config) ctx.set_on_order_changed(on_order_changed) ctx.subscribe([TopicType.Private]) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(50), submitted_quantity = Decimal(200), time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp) sleep(5) # waiting for push event today_executions(symbol=None, order_id=None) Get today executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None order_id Optional [ str ] Filter by Order ID None Returns: Type Description List [ Execution ] Execution list Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_executions(symbol = \"700.HK\") print(resp) today_orders(symbol=None, status=None, side=None, market=None, order_id=None) Get today orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None order_id Optional [ str ] Filter by order id None Returns: Type Description List [ Order ] Order list Examples: :: from longport.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, ) print(resp) unsubscribe(topics) Unsubscribe Parameters: Name Type Description Default topics List [ Type [ TopicType ]] Topic list required TradeDirection Trade direction Down Bases: TradeDirection Down Neutral Bases: TradeDirection Neutral Up Bases: TradeDirection Up TradeSession Trade session Normal Bases: TradeSession Trading Post Bases: TradeSession Post-Trading Pre Bases: TradeSession Pre-Trading TradeStatus Security Status CodeMoved Bases: TradeStatus Code Moved Delisted Bases: TradeStatus Delisted Expired Bases: TradeStatus Expired Fuse Bases: TradeStatus Fuse Halted Bases: TradeStatus Suspension Normal Bases: TradeStatus Normal PrepareList Bases: TradeStatus Prepare List SplitStockHalts Bases: TradeStatus Split Stock Halts Suspend Bases: TradeStatus Suspend ToBeOpened Bases: TradeStatus To Be Opened WarrantPrepareList Bases: TradeStatus Warrant To BeListed TradingSessionInfo The information of trading session begin_time instance-attribute Being trading time end_time instance-attribute End trading time trade_session instance-attribute Trading sessions TriggerStatus Trigger status Active Bases: TriggerStatus Active Deactive Bases: TriggerStatus Deactive Released Bases: TriggerStatus Released Unknown Bases: TriggerStatus Unknown WarrantInfo Warrant info balance_point instance-attribute Breakeven point call_price instance-attribute Call price change_rate instance-attribute Quote change rate change_value instance-attribute Quote change conversion_ratio instance-attribute Conversion ratio delta instance-attribute Greek value delta effective_leverage instance-attribute Effective leverage expiry_date instance-attribute Expiry date implied_volatility instance-attribute Implied volatility itm_otm instance-attribute In/out of the bound last_done instance-attribute Latest price leverage_ratio instance-attribute Leverage ratio lower_strike_price instance-attribute Lower strike price name instance-attribute Security name outstanding_qty instance-attribute Outstanding quantity outstanding_ratio instance-attribute Outstanding ratio premium instance-attribute Premium status instance-attribute Status strike_price instance-attribute Strike price symbol instance-attribute Security code to_call_price instance-attribute Price interval from the call price turnover instance-attribute Turnover upper_strike_price instance-attribute Upper strike price volume instance-attribute Volume warrant_type instance-attribute Warrant type WarrantQuote Quote of warrant call_price instance-attribute Call price category instance-attribute Warrant type conversion_ratio instance-attribute Conversion ratio expiry_date instance-attribute Exprity date high instance-attribute High implied_volatility instance-attribute Implied volatility last_done instance-attribute Latest price last_trade_date instance-attribute Last tradalbe date low instance-attribute Low lower_strike_price instance-attribute Lower bound price open instance-attribute Open outstanding_quantity instance-attribute Outstanding quantity outstanding_ratio instance-attribute Outstanding ratio prev_close instance-attribute Yesterday's close strike_price instance-attribute Strike price symbol instance-attribute Security code timestamp instance-attribute Time of latest price trade_status instance-attribute Security trading status turnover instance-attribute Turnover underlying_symbol instance-attribute Underlying security symbol of the warrant upper_strike_price instance-attribute Upper bound price volume instance-attribute Volume WarrantSortBy Warrant sort by BalancePoint Bases: WarrantSortBy Breakeven point CallPrice Bases: WarrantSortBy Call price ChangeRate Bases: WarrantSortBy Change rate ChangeValue Bases: WarrantSortBy Change value ConversionRatio Bases: WarrantSortBy Conversion ratio Delta Bases: WarrantSortBy Greek value delta EffectiveLeverage Bases: WarrantSortBy Effective leverage ExpiryDate Bases: WarrantSortBy Expiry date ImpliedVolatility Bases: WarrantSortBy Implied volatility ItmOtm Bases: WarrantSortBy In/out of the bound LastDone Bases: WarrantSortBy LastDone LeverageRatio Bases: WarrantSortBy Leverage ratio LowerStrikePrice Bases: WarrantSortBy Lower strike price OutstandingQuantity Bases: WarrantSortBy Outstanding quantity OutstandingRatio Bases: WarrantSortBy Outstanding ratio Premium Bases: WarrantSortBy Premium Status Bases: WarrantSortBy Status StrikePrice Bases: WarrantSortBy Strike price ToCallPrice Bases: WarrantSortBy Price interval from the call price Turnover Bases: WarrantSortBy Turnover UpperStrikePrice Bases: WarrantSortBy Upper strike price Volume Bases: WarrantSortBy Volume WarrantStatus Warrant status Normal Bases: WarrantStatus Normal PrepareList Bases: WarrantStatus Prepare List Suspend Bases: WarrantStatus Suspend WarrantType Warrant type Bear Bases: WarrantType Bear Bull Bases: WarrantType Bull Call Bases: WarrantType Call Inline Bases: WarrantType Inline Put Bases: WarrantType Put Unknown Bases: WarrantType Unknown WatchlistGroup id instance-attribute Group id name instance-attribute Group name securities instance-attribute Securities WatchlistSecurity Watchlist security market instance-attribute Market name instance-attribute Security name symbol instance-attribute Security symbol watched_at instance-attribute Watched time watched_price instance-attribute Watched price","title":"All"},{"location":"reference_all/#code-reference","text":"","title":"Code Reference"},{"location":"reference_all/#longport.openapi.AccountBalance","text":"Account balance","title":"AccountBalance"},{"location":"reference_all/#longport.openapi.AccountBalance.buy_power","text":"Buy power","title":"buy_power"},{"location":"reference_all/#longport.openapi.AccountBalance.cash_infos","text":"Cash details","title":"cash_infos"},{"location":"reference_all/#longport.openapi.AccountBalance.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longport.openapi.AccountBalance.init_margin","text":"Initial margin","title":"init_margin"},{"location":"reference_all/#longport.openapi.AccountBalance.maintenance_margin","text":"Maintenance margin","title":"maintenance_margin"},{"location":"reference_all/#longport.openapi.AccountBalance.margin_call","text":"Margin call","title":"margin_call"},{"location":"reference_all/#longport.openapi.AccountBalance.max_finance_amount","text":"Maximum financing amount","title":"max_finance_amount"},{"location":"reference_all/#longport.openapi.AccountBalance.net_assets","text":"Net assets","title":"net_assets"},{"location":"reference_all/#longport.openapi.AccountBalance.remaining_finance_amount","text":"Remaining financing amount","title":"remaining_finance_amount"},{"location":"reference_all/#longport.openapi.AccountBalance.risk_level","text":"Risk control level","title":"risk_level"},{"location":"reference_all/#longport.openapi.AccountBalance.total_cash","text":"Total cash","title":"total_cash"},{"location":"reference_all/#longport.openapi.AdjustType","text":"Candlestick adjustment type","title":"AdjustType"},{"location":"reference_all/#longport.openapi.AdjustType.ForwardAdjust","text":"Bases: AdjustType Adjust forward","title":"ForwardAdjust"},{"location":"reference_all/#longport.openapi.AdjustType.NoAdjust","text":"Bases: AdjustType Actual","title":"NoAdjust"},{"location":"reference_all/#longport.openapi.Brokers","text":"Brokers","title":"Brokers"},{"location":"reference_all/#longport.openapi.Brokers.broker_ids","text":"Broker IDs","title":"broker_ids"},{"location":"reference_all/#longport.openapi.Brokers.position","text":"Position","title":"position"},{"location":"reference_all/#longport.openapi.CalcIndex","text":"Calc index","title":"CalcIndex"},{"location":"reference_all/#longport.openapi.CalcIndex.Amplitude","text":"Bases: CalcIndex Amplitude","title":"Amplitude"},{"location":"reference_all/#longport.openapi.CalcIndex.BalancePoint","text":"Bases: CalcIndex Breakeven point","title":"BalancePoint"},{"location":"reference_all/#longport.openapi.CalcIndex.CallPrice","text":"Bases: CalcIndex Call price","title":"CallPrice"},{"location":"reference_all/#longport.openapi.CalcIndex.CapitalFlow","text":"Bases: CalcIndex Capital flow","title":"CapitalFlow"},{"location":"reference_all/#longport.openapi.CalcIndex.ChangeRate","text":"Bases: CalcIndex Change rate","title":"ChangeRate"},{"location":"reference_all/#longport.openapi.CalcIndex.ChangeValue","text":"Bases: CalcIndex Change value","title":"ChangeValue"},{"location":"reference_all/#longport.openapi.CalcIndex.ConversionRatio","text":"Bases: CalcIndex Conversion ratio","title":"ConversionRatio"},{"location":"reference_all/#longport.openapi.CalcIndex.Delta","text":"Bases: CalcIndex Delta","title":"Delta"},{"location":"reference_all/#longport.openapi.CalcIndex.DividendRatioTtm","text":"Bases: CalcIndex Dividend ratio (TTM)","title":"DividendRatioTtm"},{"location":"reference_all/#longport.openapi.CalcIndex.EffectiveLeverage","text":"Bases: CalcIndex Effective leverage","title":"EffectiveLeverage"},{"location":"reference_all/#longport.openapi.CalcIndex.ExpiryDate","text":"Bases: CalcIndex Expiry date","title":"ExpiryDate"},{"location":"reference_all/#longport.openapi.CalcIndex.FiveDayChangeRate","text":"Bases: CalcIndex Five days change ratio","title":"FiveDayChangeRate"},{"location":"reference_all/#longport.openapi.CalcIndex.FiveMinutesChangeRate","text":"Bases: CalcIndex Five minutes change ratio","title":"FiveMinutesChangeRate"},{"location":"reference_all/#longport.openapi.CalcIndex.Gamma","text":"Bases: CalcIndex Gamma","title":"Gamma"},{"location":"reference_all/#longport.openapi.CalcIndex.HalfYearChangeRate","text":"Bases: CalcIndex Half year change ratio","title":"HalfYearChangeRate"},{"location":"reference_all/#longport.openapi.CalcIndex.ImpliedVolatility","text":"Bases: CalcIndex Implied volatility","title":"ImpliedVolatility"},{"location":"reference_all/#longport.openapi.CalcIndex.ItmOtm","text":"Bases: CalcIndex In/out of the bound","title":"ItmOtm"},{"location":"reference_all/#longport.openapi.CalcIndex.LastDone","text":"Bases: CalcIndex Latest price","title":"LastDone"},{"location":"reference_all/#longport.openapi.CalcIndex.LeverageRatio","text":"Bases: CalcIndex Leverage ratio","title":"LeverageRatio"},{"location":"reference_all/#longport.openapi.CalcIndex.LowerStrikePrice","text":"Bases: CalcIndex Lower bound price","title":"LowerStrikePrice"},{"location":"reference_all/#longport.openapi.CalcIndex.OpenInterest","text":"Bases: CalcIndex Open interest","title":"OpenInterest"},{"location":"reference_all/#longport.openapi.CalcIndex.OutstandingQty","text":"Bases: CalcIndex Outstanding quantity","title":"OutstandingQty"},{"location":"reference_all/#longport.openapi.CalcIndex.OutstandingRatio","text":"Bases: CalcIndex Outstanding ratio","title":"OutstandingRatio"},{"location":"reference_all/#longport.openapi.CalcIndex.PbRatio","text":"Bases: CalcIndex PB","title":"PbRatio"},{"location":"reference_all/#longport.openapi.CalcIndex.PeTtmRatio","text":"Bases: CalcIndex PE (TTM)","title":"PeTtmRatio"},{"location":"reference_all/#longport.openapi.CalcIndex.Premium","text":"Bases: CalcIndex Premium","title":"Premium"},{"location":"reference_all/#longport.openapi.CalcIndex.Rho","text":"Bases: CalcIndex Rho","title":"Rho"},{"location":"reference_all/#longport.openapi.CalcIndex.StrikePrice","text":"Bases: CalcIndex Strike price","title":"StrikePrice"},{"location":"reference_all/#longport.openapi.CalcIndex.TenDayChangeRate","text":"Bases: CalcIndex Ten days change ratio","title":"TenDayChangeRate"},{"location":"reference_all/#longport.openapi.CalcIndex.Theta","text":"Bases: CalcIndex Theta","title":"Theta"},{"location":"reference_all/#longport.openapi.CalcIndex.ToCallPrice","text":"Bases: CalcIndex Price interval from the call price","title":"ToCallPrice"},{"location":"reference_all/#longport.openapi.CalcIndex.TotalMarketValue","text":"Bases: CalcIndex Total market value","title":"TotalMarketValue"},{"location":"reference_all/#longport.openapi.CalcIndex.Turnover","text":"Bases: CalcIndex Turnover","title":"Turnover"},{"location":"reference_all/#longport.openapi.CalcIndex.TurnoverRate","text":"Bases: CalcIndex Turnover rate","title":"TurnoverRate"},{"location":"reference_all/#longport.openapi.CalcIndex.UpperStrikePrice","text":"Bases: CalcIndex Upper bound price","title":"UpperStrikePrice"},{"location":"reference_all/#longport.openapi.CalcIndex.Vega","text":"Bases: CalcIndex Vega","title":"Vega"},{"location":"reference_all/#longport.openapi.CalcIndex.Volume","text":"Bases: CalcIndex Volume","title":"Volume"},{"location":"reference_all/#longport.openapi.CalcIndex.VolumeRatio","text":"Bases: CalcIndex Volume ratio","title":"VolumeRatio"},{"location":"reference_all/#longport.openapi.CalcIndex.WarrantDelta","text":"Bases: CalcIndex Warrant delta","title":"WarrantDelta"},{"location":"reference_all/#longport.openapi.CalcIndex.YtdChangeRate","text":"Bases: CalcIndex Year-to-date change ratio","title":"YtdChangeRate"},{"location":"reference_all/#longport.openapi.Candlestick","text":"Candlestick","title":"Candlestick"},{"location":"reference_all/#longport.openapi.Candlestick.close","text":"Close price","title":"close"},{"location":"reference_all/#longport.openapi.Candlestick.high","text":"High price","title":"high"},{"location":"reference_all/#longport.openapi.Candlestick.low","text":"Low price","title":"low"},{"location":"reference_all/#longport.openapi.Candlestick.open","text":"Open price","title":"open"},{"location":"reference_all/#longport.openapi.Candlestick.timestamp","text":"Timestamp","title":"timestamp"},{"location":"reference_all/#longport.openapi.Candlestick.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longport.openapi.Candlestick.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longport.openapi.CapitalDistribution","text":"Capital distribution","title":"CapitalDistribution"},{"location":"reference_all/#longport.openapi.CapitalDistribution.large","text":"Large order","title":"large"},{"location":"reference_all/#longport.openapi.CapitalDistribution.medium","text":"Medium order","title":"medium"},{"location":"reference_all/#longport.openapi.CapitalDistribution.small","text":"Small order","title":"small"},{"location":"reference_all/#longport.openapi.CapitalDistributionResponse","text":"Capital distribution response","title":"CapitalDistributionResponse"},{"location":"reference_all/#longport.openapi.CapitalDistributionResponse.capital_in","text":"Inflow capital data","title":"capital_in"},{"location":"reference_all/#longport.openapi.CapitalDistributionResponse.capital_out","text":"Outflow capital data","title":"capital_out"},{"location":"reference_all/#longport.openapi.CapitalDistributionResponse.timestamp","text":"Time","title":"timestamp"},{"location":"reference_all/#longport.openapi.CapitalFlowLine","text":"Capital flow line","title":"CapitalFlowLine"},{"location":"reference_all/#longport.openapi.CapitalFlowLine.inflow","text":"Inflow capital data","title":"inflow"},{"location":"reference_all/#longport.openapi.CapitalFlowLine.timestamp","text":"Time","title":"timestamp"},{"location":"reference_all/#longport.openapi.CashFlow","text":"Cash flow","title":"CashFlow"},{"location":"reference_all/#longport.openapi.CashFlow.balance","text":"Cash amount","title":"balance"},{"location":"reference_all/#longport.openapi.CashFlow.business_time","text":"Business time","title":"business_time"},{"location":"reference_all/#longport.openapi.CashFlow.business_type","text":"Balance type","title":"business_type"},{"location":"reference_all/#longport.openapi.CashFlow.currency","text":"Cash currency","title":"currency"},{"location":"reference_all/#longport.openapi.CashFlow.description","text":"Cash flow description","title":"description"},{"location":"reference_all/#longport.openapi.CashFlow.direction","text":"Outflow direction","title":"direction"},{"location":"reference_all/#longport.openapi.CashFlow.symbol","text":"Associated Stock code information","title":"symbol"},{"location":"reference_all/#longport.openapi.CashFlow.transaction_flow_name","text":"Cash flow name","title":"transaction_flow_name"},{"location":"reference_all/#longport.openapi.CashFlowDirection","text":"Cash flow direction","title":"CashFlowDirection"},{"location":"reference_all/#longport.openapi.CashFlowDirection.In","text":"Bases: CashFlowDirection In","title":"In"},{"location":"reference_all/#longport.openapi.CashFlowDirection.Out","text":"Bases: CashFlowDirection Out","title":"Out"},{"location":"reference_all/#longport.openapi.CashFlowDirection.Unknown","text":"Bases: CashFlowDirection Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.CashInfo","text":"CashInfo","title":"CashInfo"},{"location":"reference_all/#longport.openapi.CashInfo.available_cash","text":"Available cash","title":"available_cash"},{"location":"reference_all/#longport.openapi.CashInfo.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longport.openapi.CashInfo.frozen_cash","text":"Frozen cash","title":"frozen_cash"},{"location":"reference_all/#longport.openapi.CashInfo.settling_cash","text":"Cash to be settled","title":"settling_cash"},{"location":"reference_all/#longport.openapi.CashInfo.withdraw_cash","text":"Withdraw cash","title":"withdraw_cash"},{"location":"reference_all/#longport.openapi.ChargeCategoryCode","text":"Charge category code","title":"ChargeCategoryCode"},{"location":"reference_all/#longport.openapi.ChargeCategoryCode.Broker","text":"Bases: ChargeCategoryCode Broker","title":"Broker"},{"location":"reference_all/#longport.openapi.ChargeCategoryCode.Third","text":"Bases: ChargeCategoryCode Third","title":"Third"},{"location":"reference_all/#longport.openapi.ChargeCategoryCode.Unknown","text":"Bases: ChargeCategoryCode Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.CommissionFreeStatus","text":"Commission-free Status","title":"CommissionFreeStatus"},{"location":"reference_all/#longport.openapi.CommissionFreeStatus.Calculated","text":"Bases: CommissionFreeStatus Commission-free amount to be calculated","title":"Calculated"},{"location":"reference_all/#longport.openapi.CommissionFreeStatus.None_","text":"Bases: CommissionFreeStatus None","title":"None_"},{"location":"reference_all/#longport.openapi.CommissionFreeStatus.Pending","text":"Bases: CommissionFreeStatus Pending commission-free","title":"Pending"},{"location":"reference_all/#longport.openapi.CommissionFreeStatus.Ready","text":"Bases: CommissionFreeStatus Commission-free applied","title":"Ready"},{"location":"reference_all/#longport.openapi.CommissionFreeStatus.Unknown","text":"Bases: CommissionFreeStatus Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.Config","text":"Configuration options for LongPort sdk Parameters: Name Type Description Default app_key str App Key required app_secret str App Secret required access_token str Access Token required http_url Optional [ str ] HTTP API url None quote_ws_url Optional [ str ] Websocket url for quote API None trade_ws_url Optional [ str ] Websocket url for trade API None language Optional [ Type [ Language ]] Language identifier None enable_overnight bool Enable overnight quote False push_candlestick_mode Type [ PushCandlestickMode ] Push candlestick mode Realtime enable_print_quote_packages bool Enable printing the opened quote packages when connected to the server True","title":"Config"},{"location":"reference_all/#longport.openapi.Config.from_env","text":"Create a new Config from the given environment variables It first gets the environment variables from the .env file in the current directory.","title":"from_env"},{"location":"reference_all/#longport.openapi.Config.from_env--variables","text":"LONGPORT_APP_KEY - App key LONGPORT_APP_SECRET - App secret LONGPORT_ACCESS_TOKEN - Access token LONGPORT_HTTP_URL - HTTP endpoint url LONGPORT_QUOTE_WS_URL - Quote websocket endpoint url LONGPORT_TRADE_WS_URL - Trade websocket endpoint url LONGPORT_ENABLE_OVERNIGHT - Enable overnight quote, true or false (Default: false )","title":"Variables"},{"location":"reference_all/#longport.openapi.Config.refresh_access_token","text":"Gets a new access_token Parameters: Name Type Description Default expired_at Optional [ datetime ] The expiration time of the access token, defaults to 90 days. None Returns: Type Description str Access token","title":"refresh_access_token"},{"location":"reference_all/#longport.openapi.DeductionStatus","text":"Deduction status","title":"DeductionStatus"},{"location":"reference_all/#longport.openapi.DeductionStatus.Done","text":"Bases: DeductionStatus Settled and distributed","title":"Done"},{"location":"reference_all/#longport.openapi.DeductionStatus.NoData","text":"Bases: DeductionStatus Settled with no data","title":"NoData"},{"location":"reference_all/#longport.openapi.DeductionStatus.None_","text":"Bases: DeductionStatus None","title":"None_"},{"location":"reference_all/#longport.openapi.DeductionStatus.Pending","text":"Bases: DeductionStatus Settled and pending distribution","title":"Pending"},{"location":"reference_all/#longport.openapi.DeductionStatus.Unknown","text":"Bases: DeductionStatus Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.Depth","text":"Depth","title":"Depth"},{"location":"reference_all/#longport.openapi.Depth.order_num","text":"Number of orders","title":"order_num"},{"location":"reference_all/#longport.openapi.Depth.position","text":"Position","title":"position"},{"location":"reference_all/#longport.openapi.Depth.price","text":"Price","title":"price"},{"location":"reference_all/#longport.openapi.Depth.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longport.openapi.DerivativeType","text":"Derivative type","title":"DerivativeType"},{"location":"reference_all/#longport.openapi.DerivativeType.Option","text":"Bases: DerivativeType US stock options","title":"Option"},{"location":"reference_all/#longport.openapi.DerivativeType.Warrant","text":"Bases: DerivativeType HK warrants","title":"Warrant"},{"location":"reference_all/#longport.openapi.EstimateMaxPurchaseQuantityResponse","text":"Response for estimate maximum purchase quantity","title":"EstimateMaxPurchaseQuantityResponse"},{"location":"reference_all/#longport.openapi.EstimateMaxPurchaseQuantityResponse.cash_max_qty","text":"Cash available quantity","title":"cash_max_qty"},{"location":"reference_all/#longport.openapi.EstimateMaxPurchaseQuantityResponse.margin_max_qty","text":"Margin available quantity","title":"margin_max_qty"},{"location":"reference_all/#longport.openapi.Execution","text":"Execution","title":"Execution"},{"location":"reference_all/#longport.openapi.Execution.order_id","text":"Order ID","title":"order_id"},{"location":"reference_all/#longport.openapi.Execution.price","text":"Executed price","title":"price"},{"location":"reference_all/#longport.openapi.Execution.quantity","text":"Executed quantity","title":"quantity"},{"location":"reference_all/#longport.openapi.Execution.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longport.openapi.Execution.trade_done_at","text":"Trade done time","title":"trade_done_at"},{"location":"reference_all/#longport.openapi.Execution.trade_id","text":"Execution ID","title":"trade_id"},{"location":"reference_all/#longport.openapi.FilterWarrantExpiryDate","text":"Filter warrant expiry date type","title":"FilterWarrantExpiryDate"},{"location":"reference_all/#longport.openapi.FilterWarrantExpiryDate.Between_3_6","text":"Bases: FilterWarrantExpiryDate 3 - 6 months","title":"Between_3_6"},{"location":"reference_all/#longport.openapi.FilterWarrantExpiryDate.Between_6_12","text":"Bases: FilterWarrantExpiryDate 6 - 12 months","title":"Between_6_12"},{"location":"reference_all/#longport.openapi.FilterWarrantExpiryDate.GT_12","text":"Bases: FilterWarrantExpiryDate Greater than 12 months","title":"GT_12"},{"location":"reference_all/#longport.openapi.FilterWarrantExpiryDate.LT_3","text":"Bases: FilterWarrantExpiryDate Less than 3 months","title":"LT_3"},{"location":"reference_all/#longport.openapi.FilterWarrantInOutBoundsType","text":"Filter warrant in/out of the bounds type","title":"FilterWarrantInOutBoundsType"},{"location":"reference_all/#longport.openapi.FilterWarrantInOutBoundsType.In","text":"Bases: FilterWarrantInOutBoundsType In bounds","title":"In"},{"location":"reference_all/#longport.openapi.FilterWarrantInOutBoundsType.Out","text":"Bases: FilterWarrantInOutBoundsType Out bounds","title":"Out"},{"location":"reference_all/#longport.openapi.FundPosition","text":"Fund position","title":"FundPosition"},{"location":"reference_all/#longport.openapi.FundPosition.cost_net_asset_value","text":"Net cost","title":"cost_net_asset_value"},{"location":"reference_all/#longport.openapi.FundPosition.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longport.openapi.FundPosition.current_net_asset_value","text":"Current equity","title":"current_net_asset_value"},{"location":"reference_all/#longport.openapi.FundPosition.holding_units","text":"Holding units","title":"holding_units"},{"location":"reference_all/#longport.openapi.FundPosition.net_asset_value_day","text":"Current equity PyDecimal","title":"net_asset_value_day"},{"location":"reference_all/#longport.openapi.FundPosition.symbol","text":"Fund ISIN code","title":"symbol"},{"location":"reference_all/#longport.openapi.FundPosition.symbol_name","text":"Fund name","title":"symbol_name"},{"location":"reference_all/#longport.openapi.FundPositionChannel","text":"Fund position channel","title":"FundPositionChannel"},{"location":"reference_all/#longport.openapi.FundPositionChannel.account_channel","text":"Account type","title":"account_channel"},{"location":"reference_all/#longport.openapi.FundPositionChannel.positions","text":"Fund positions","title":"positions"},{"location":"reference_all/#longport.openapi.FundPositionsResponse","text":"Fund positions response","title":"FundPositionsResponse"},{"location":"reference_all/#longport.openapi.FundPositionsResponse.channels","text":"Channels","title":"channels"},{"location":"reference_all/#longport.openapi.HttpClient","text":"A HTTP client for longPort open api Parameters: Name Type Description Default http_url str HTTP API url required app_key str App Key required app_secret str App Secret required access_token str Access Token required","title":"HttpClient"},{"location":"reference_all/#longport.openapi.HttpClient.from_env","text":"Create a new HttpClient from the given environment variables It first gets the environment variables from the .env file in the current directory.","title":"from_env"},{"location":"reference_all/#longport.openapi.HttpClient.from_env--variables","text":"LONGPORT_HTTP_URL - HTTP endpoint url LONGPORT_APP_KEY - App key LONGPORT_APP_SECRET - App secret LONGPORT_ACCESS_TOKEN - Access token","title":"Variables"},{"location":"reference_all/#longport.openapi.HttpClient.request","text":"Performs a HTTP reqest Examples: :: from longport.openapi import HttpClient client = HttpClient(http_url, app_key, app_secret, access_token); # get resp = client.request(\"get\", \"/foo/bar\"); print(resp) # post client.request(\"get\", \"/foo/bar\", { \"foo\": 1, \"bar\": 2 });","title":"request"},{"location":"reference_all/#longport.openapi.IntradayLine","text":"Intraday line","title":"IntradayLine"},{"location":"reference_all/#longport.openapi.IntradayLine.avg_price","text":"Average price","title":"avg_price"},{"location":"reference_all/#longport.openapi.IntradayLine.price","text":"Close price of the minute","title":"price"},{"location":"reference_all/#longport.openapi.IntradayLine.timestamp","text":"Start time of the minute","title":"timestamp"},{"location":"reference_all/#longport.openapi.IntradayLine.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longport.openapi.IntradayLine.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longport.openapi.IssuerInfo","text":"Issuer info","title":"IssuerInfo"},{"location":"reference_all/#longport.openapi.IssuerInfo.issuer_id","text":"Issuer ID","title":"issuer_id"},{"location":"reference_all/#longport.openapi.IssuerInfo.name_cn","text":"Issuer name (zh-CN)","title":"name_cn"},{"location":"reference_all/#longport.openapi.IssuerInfo.name_en","text":"Issuer name (en)","title":"name_en"},{"location":"reference_all/#longport.openapi.IssuerInfo.name_hk","text":"Issuer name (zh-HK)","title":"name_hk"},{"location":"reference_all/#longport.openapi.Language","text":"Language identifier","title":"Language"},{"location":"reference_all/#longport.openapi.Language.EN","text":"Bases: Language en","title":"EN"},{"location":"reference_all/#longport.openapi.Language.ZH_CN","text":"Bases: Language zh-CN","title":"ZH_CN"},{"location":"reference_all/#longport.openapi.Language.ZH_HK","text":"Bases: Language zh-HK","title":"ZH_HK"},{"location":"reference_all/#longport.openapi.MarginRatio","text":"Margin ratio","title":"MarginRatio"},{"location":"reference_all/#longport.openapi.MarginRatio.fm_factor","text":"Forced close-out margin ratio","title":"fm_factor"},{"location":"reference_all/#longport.openapi.MarginRatio.im_factor","text":"Initial margin ratio","title":"im_factor"},{"location":"reference_all/#longport.openapi.MarginRatio.mm_factor","text":"Maintain the initial margin ratio","title":"mm_factor"},{"location":"reference_all/#longport.openapi.Market","text":"Market","title":"Market"},{"location":"reference_all/#longport.openapi.Market.CN","text":"Bases: Market CN market","title":"CN"},{"location":"reference_all/#longport.openapi.Market.HK","text":"Bases: Market HK market","title":"HK"},{"location":"reference_all/#longport.openapi.Market.SG","text":"Bases: Market SG market","title":"SG"},{"location":"reference_all/#longport.openapi.Market.US","text":"Bases: Market US market","title":"US"},{"location":"reference_all/#longport.openapi.Market.Unknown","text":"Bases: Market Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.MarketTradingSession","text":"Market trading session","title":"MarketTradingSession"},{"location":"reference_all/#longport.openapi.MarketTradingSession.market","text":"Market","title":"market"},{"location":"reference_all/#longport.openapi.MarketTradingSession.trade_sessions","text":"Trading session","title":"trade_sessions"},{"location":"reference_all/#longport.openapi.OpenApiException","text":"Bases: Exception OpenAPI exception","title":"OpenApiException"},{"location":"reference_all/#longport.openapi.OpenApiException.code","text":"Error code","title":"code"},{"location":"reference_all/#longport.openapi.OpenApiException.message","text":"Error message","title":"message"},{"location":"reference_all/#longport.openapi.OptionDirection","text":"Option direction","title":"OptionDirection"},{"location":"reference_all/#longport.openapi.OptionDirection.Call","text":"Bases: OptionDirection Call","title":"Call"},{"location":"reference_all/#longport.openapi.OptionDirection.Put","text":"Bases: OptionDirection Put","title":"Put"},{"location":"reference_all/#longport.openapi.OptionDirection.Unknown","text":"Bases: OptionDirection Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.OptionQuote","text":"Quote of option","title":"OptionQuote"},{"location":"reference_all/#longport.openapi.OptionQuote.contract_multiplier","text":"Contract multiplier","title":"contract_multiplier"},{"location":"reference_all/#longport.openapi.OptionQuote.contract_size","text":"Contract size","title":"contract_size"},{"location":"reference_all/#longport.openapi.OptionQuote.contract_type","text":"Option type","title":"contract_type"},{"location":"reference_all/#longport.openapi.OptionQuote.direction","text":"Option direction","title":"direction"},{"location":"reference_all/#longport.openapi.OptionQuote.expiry_date","text":"Exprity date","title":"expiry_date"},{"location":"reference_all/#longport.openapi.OptionQuote.high","text":"High","title":"high"},{"location":"reference_all/#longport.openapi.OptionQuote.historical_volatility","text":"Underlying security historical volatility of the option","title":"historical_volatility"},{"location":"reference_all/#longport.openapi.OptionQuote.implied_volatility","text":"Implied volatility","title":"implied_volatility"},{"location":"reference_all/#longport.openapi.OptionQuote.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longport.openapi.OptionQuote.low","text":"Low","title":"low"},{"location":"reference_all/#longport.openapi.OptionQuote.open","text":"Open","title":"open"},{"location":"reference_all/#longport.openapi.OptionQuote.open_interest","text":"Number of open positions","title":"open_interest"},{"location":"reference_all/#longport.openapi.OptionQuote.prev_close","text":"Yesterday's close","title":"prev_close"},{"location":"reference_all/#longport.openapi.OptionQuote.strike_price","text":"Strike price","title":"strike_price"},{"location":"reference_all/#longport.openapi.OptionQuote.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longport.openapi.OptionQuote.timestamp","text":"Time of latest price","title":"timestamp"},{"location":"reference_all/#longport.openapi.OptionQuote.trade_status","text":"Security trading status","title":"trade_status"},{"location":"reference_all/#longport.openapi.OptionQuote.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longport.openapi.OptionQuote.underlying_symbol","text":"Underlying security symbol of the option","title":"underlying_symbol"},{"location":"reference_all/#longport.openapi.OptionQuote.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longport.openapi.OptionType","text":"Option type","title":"OptionType"},{"location":"reference_all/#longport.openapi.OptionType.American","text":"Bases: OptionType American","title":"American"},{"location":"reference_all/#longport.openapi.OptionType.Europe","text":"Bases: OptionType Europe","title":"Europe"},{"location":"reference_all/#longport.openapi.OptionType.Unknown","text":"Bases: OptionType Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.Order","text":"Order","title":"Order"},{"location":"reference_all/#longport.openapi.Order.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longport.openapi.Order.executed_price","text":"Executed price","title":"executed_price"},{"location":"reference_all/#longport.openapi.Order.executed_quantity","text":"Executed quantity","title":"executed_quantity"},{"location":"reference_all/#longport.openapi.Order.expire_date","text":"Long term order expire date","title":"expire_date"},{"location":"reference_all/#longport.openapi.Order.last_done","text":"Last done","title":"last_done"},{"location":"reference_all/#longport.openapi.Order.limit_offset","text":"TSLPAMT / TSLPPCT order limit offset amount","title":"limit_offset"},{"location":"reference_all/#longport.openapi.Order.msg","text":"Rejected Message or remark","title":"msg"},{"location":"reference_all/#longport.openapi.Order.order_id","text":"Order ID","title":"order_id"},{"location":"reference_all/#longport.openapi.Order.order_type","text":"Order type","title":"order_type"},{"location":"reference_all/#longport.openapi.Order.outside_rth","text":"Enable or disable outside regular trading hours","title":"outside_rth"},{"location":"reference_all/#longport.openapi.Order.price","text":"Submitted price","title":"price"},{"location":"reference_all/#longport.openapi.Order.quantity","text":"Submitted quantity","title":"quantity"},{"location":"reference_all/#longport.openapi.Order.remark","text":"Remark","title":"remark"},{"location":"reference_all/#longport.openapi.Order.side","text":"Order side","title":"side"},{"location":"reference_all/#longport.openapi.Order.status","text":"Order status","title":"status"},{"location":"reference_all/#longport.openapi.Order.stock_name","text":"Stock name","title":"stock_name"},{"location":"reference_all/#longport.openapi.Order.submitted_at","text":"Submitted time","title":"submitted_at"},{"location":"reference_all/#longport.openapi.Order.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longport.openapi.Order.tag","text":"Order tag","title":"tag"},{"location":"reference_all/#longport.openapi.Order.time_in_force","text":"Time in force type","title":"time_in_force"},{"location":"reference_all/#longport.openapi.Order.trailing_amount","text":"TSMAMT / TSLPAMT order trailing amount","title":"trailing_amount"},{"location":"reference_all/#longport.openapi.Order.trailing_percent","text":"TSMPCT / TSLPPCT order trailing percent","title":"trailing_percent"},{"location":"reference_all/#longport.openapi.Order.trigger_at","text":"Conditional order trigger time","title":"trigger_at"},{"location":"reference_all/#longport.openapi.Order.trigger_price","text":"LIT / MIT Order Trigger Price","title":"trigger_price"},{"location":"reference_all/#longport.openapi.Order.trigger_status","text":"Conditional order trigger status","title":"trigger_status"},{"location":"reference_all/#longport.openapi.Order.updated_at","text":"Last updated time","title":"updated_at"},{"location":"reference_all/#longport.openapi.OrderChargeDetail","text":"Order charge detail","title":"OrderChargeDetail"},{"location":"reference_all/#longport.openapi.OrderChargeDetail.currency","text":"Settlement currency","title":"currency"},{"location":"reference_all/#longport.openapi.OrderChargeDetail.items","text":"Order charge items","title":"items"},{"location":"reference_all/#longport.openapi.OrderChargeDetail.total_amount","text":"Total charges amount","title":"total_amount"},{"location":"reference_all/#longport.openapi.OrderChargeFee","text":"Order charge fee","title":"OrderChargeFee"},{"location":"reference_all/#longport.openapi.OrderChargeFee.amount","text":"Charge amount","title":"amount"},{"location":"reference_all/#longport.openapi.OrderChargeFee.code","text":"Charge code","title":"code"},{"location":"reference_all/#longport.openapi.OrderChargeFee.currency","text":"Charge currency","title":"currency"},{"location":"reference_all/#longport.openapi.OrderChargeFee.name","text":"Charge name","title":"name"},{"location":"reference_all/#longport.openapi.OrderChargeItem","text":"Order charge item","title":"OrderChargeItem"},{"location":"reference_all/#longport.openapi.OrderChargeItem.code","text":"Charge category code","title":"code"},{"location":"reference_all/#longport.openapi.OrderChargeItem.fees","text":"Charge details","title":"fees"},{"location":"reference_all/#longport.openapi.OrderChargeItem.name","text":"Charge category name","title":"name"},{"location":"reference_all/#longport.openapi.OrderDetail","text":"Order detail","title":"OrderDetail"},{"location":"reference_all/#longport.openapi.OrderDetail.charge_detail","text":"Order charges","title":"charge_detail"},{"location":"reference_all/#longport.openapi.OrderDetail.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longport.openapi.OrderDetail.deductions_amount","text":"Deduction amount","title":"deductions_amount"},{"location":"reference_all/#longport.openapi.OrderDetail.deductions_currency","text":"Deduction currency","title":"deductions_currency"},{"location":"reference_all/#longport.openapi.OrderDetail.deductions_status","text":"Deduction status","title":"deductions_status"},{"location":"reference_all/#longport.openapi.OrderDetail.executed_price","text":"Executed price","title":"executed_price"},{"location":"reference_all/#longport.openapi.OrderDetail.executed_quantity","text":"Executed quantity","title":"executed_quantity"},{"location":"reference_all/#longport.openapi.OrderDetail.expire_date","text":"Long term order expire date","title":"expire_date"},{"location":"reference_all/#longport.openapi.OrderDetail.free_amount","text":"Commission-free amount","title":"free_amount"},{"location":"reference_all/#longport.openapi.OrderDetail.free_currency","text":"Commission-free currency","title":"free_currency"},{"location":"reference_all/#longport.openapi.OrderDetail.free_status","text":"Commission-free Status","title":"free_status"},{"location":"reference_all/#longport.openapi.OrderDetail.history","text":"Order history details","title":"history"},{"location":"reference_all/#longport.openapi.OrderDetail.last_done","text":"Last done","title":"last_done"},{"location":"reference_all/#longport.openapi.OrderDetail.limit_offset","text":"TSLPAMT / TSLPPCT order limit offset amount","title":"limit_offset"},{"location":"reference_all/#longport.openapi.OrderDetail.msg","text":"Rejected Message or remark","title":"msg"},{"location":"reference_all/#longport.openapi.OrderDetail.order_id","text":"Order ID","title":"order_id"},{"location":"reference_all/#longport.openapi.OrderDetail.order_type","text":"Order type","title":"order_type"},{"location":"reference_all/#longport.openapi.OrderDetail.outside_rth","text":"Enable or disable outside regular trading hours","title":"outside_rth"},{"location":"reference_all/#longport.openapi.OrderDetail.platform_deducted_amount","text":"Platform deduction amount","title":"platform_deducted_amount"},{"location":"reference_all/#longport.openapi.OrderDetail.platform_deducted_currency","text":"Platform deduction currency","title":"platform_deducted_currency"},{"location":"reference_all/#longport.openapi.OrderDetail.platform_deducted_status","text":"Platform fee deduction status","title":"platform_deducted_status"},{"location":"reference_all/#longport.openapi.OrderDetail.price","text":"Submitted price","title":"price"},{"location":"reference_all/#longport.openapi.OrderDetail.quantity","text":"Submitted quantity","title":"quantity"},{"location":"reference_all/#longport.openapi.OrderDetail.remark","text":"Remark","title":"remark"},{"location":"reference_all/#longport.openapi.OrderDetail.side","text":"Order side","title":"side"},{"location":"reference_all/#longport.openapi.OrderDetail.status","text":"Order status","title":"status"},{"location":"reference_all/#longport.openapi.OrderDetail.stock_name","text":"Stock name","title":"stock_name"},{"location":"reference_all/#longport.openapi.OrderDetail.submitted_at","text":"Submitted time","title":"submitted_at"},{"location":"reference_all/#longport.openapi.OrderDetail.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longport.openapi.OrderDetail.tag","text":"Order tag","title":"tag"},{"location":"reference_all/#longport.openapi.OrderDetail.time_in_force","text":"Time in force type","title":"time_in_force"},{"location":"reference_all/#longport.openapi.OrderDetail.trailing_amount","text":"TSMAMT / TSLPAMT order trailing amount","title":"trailing_amount"},{"location":"reference_all/#longport.openapi.OrderDetail.trailing_percent","text":"TSMPCT / TSLPPCT order trailing percent","title":"trailing_percent"},{"location":"reference_all/#longport.openapi.OrderDetail.trigger_at","text":"Conditional order trigger time","title":"trigger_at"},{"location":"reference_all/#longport.openapi.OrderDetail.trigger_price","text":"LIT / MIT Order Trigger Price","title":"trigger_price"},{"location":"reference_all/#longport.openapi.OrderDetail.trigger_status","text":"Conditional order trigger status","title":"trigger_status"},{"location":"reference_all/#longport.openapi.OrderDetail.updated_at","text":"Last updated time","title":"updated_at"},{"location":"reference_all/#longport.openapi.OrderHistoryDetail","text":"Order history detail","title":"OrderHistoryDetail"},{"location":"reference_all/#longport.openapi.OrderHistoryDetail.msg","text":"Execution or error message","title":"msg"},{"location":"reference_all/#longport.openapi.OrderHistoryDetail.price","text":"Executed price for executed orders, submitted price for expired, canceled, rejected orders, etc.","title":"price"},{"location":"reference_all/#longport.openapi.OrderHistoryDetail.quantity","text":"Executed quantity for executed orders, remaining quantity for expired, canceled, rejected orders, etc.","title":"quantity"},{"location":"reference_all/#longport.openapi.OrderHistoryDetail.status","text":"Order status","title":"status"},{"location":"reference_all/#longport.openapi.OrderHistoryDetail.time","text":"Occurrence time","title":"time"},{"location":"reference_all/#longport.openapi.OrderSide","text":"Order side","title":"OrderSide"},{"location":"reference_all/#longport.openapi.OrderSide.Buy","text":"Bases: OrderSide Buy","title":"Buy"},{"location":"reference_all/#longport.openapi.OrderSide.Sell","text":"Bases: OrderSide Sell","title":"Sell"},{"location":"reference_all/#longport.openapi.OrderSide.Unknown","text":"Bases: OrderSide Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.OrderStatus","text":"Order status","title":"OrderStatus"},{"location":"reference_all/#longport.openapi.OrderStatus.Canceled","text":"Bases: OrderStatus Canceled","title":"Canceled"},{"location":"reference_all/#longport.openapi.OrderStatus.Expired","text":"Bases: OrderStatus ExpiredStatus","title":"Expired"},{"location":"reference_all/#longport.openapi.OrderStatus.Filled","text":"Bases: OrderStatus Filled","title":"Filled"},{"location":"reference_all/#longport.openapi.OrderStatus.New","text":"Bases: OrderStatus New","title":"New"},{"location":"reference_all/#longport.openapi.OrderStatus.NotReported","text":"Bases: OrderStatus Not reported","title":"NotReported"},{"location":"reference_all/#longport.openapi.OrderStatus.PartialFilled","text":"Bases: OrderStatus Partial Filled","title":"PartialFilled"},{"location":"reference_all/#longport.openapi.OrderStatus.PartialWithdrawal","text":"Bases: OrderStatus PartialWithdrawal","title":"PartialWithdrawal"},{"location":"reference_all/#longport.openapi.OrderStatus.PendingCancel","text":"Bases: OrderStatus Pending Cancel","title":"PendingCancel"},{"location":"reference_all/#longport.openapi.OrderStatus.PendingReplace","text":"Bases: OrderStatus Pending Replace","title":"PendingReplace"},{"location":"reference_all/#longport.openapi.OrderStatus.ProtectedNotReported","text":"Bases: OrderStatus Not reported (Protected Order)","title":"ProtectedNotReported"},{"location":"reference_all/#longport.openapi.OrderStatus.Rejected","text":"Bases: OrderStatus Rejected","title":"Rejected"},{"location":"reference_all/#longport.openapi.OrderStatus.Replaced","text":"Bases: OrderStatus Replaced","title":"Replaced"},{"location":"reference_all/#longport.openapi.OrderStatus.ReplacedNotReported","text":"Bases: OrderStatus Not reported (Replaced Order)","title":"ReplacedNotReported"},{"location":"reference_all/#longport.openapi.OrderStatus.Unknown","text":"Bases: OrderStatus Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.OrderStatus.VarietiesNotReported","text":"Bases: OrderStatus Not reported (Conditional Order)","title":"VarietiesNotReported"},{"location":"reference_all/#longport.openapi.OrderStatus.WaitToCancel","text":"Bases: OrderStatus Wait To Cancel","title":"WaitToCancel"},{"location":"reference_all/#longport.openapi.OrderStatus.WaitToNew","text":"Bases: OrderStatus Wait To New","title":"WaitToNew"},{"location":"reference_all/#longport.openapi.OrderStatus.WaitToReplace","text":"Bases: OrderStatus Wait To Replace","title":"WaitToReplace"},{"location":"reference_all/#longport.openapi.OrderTag","text":"Order tag","title":"OrderTag"},{"location":"reference_all/#longport.openapi.OrderTag.AllocatedSub","text":"Bases: OrderTag Trade Allocation","title":"AllocatedSub"},{"location":"reference_all/#longport.openapi.OrderTag.Creditor","text":"Bases: OrderTag Option Exercise Long","title":"Creditor"},{"location":"reference_all/#longport.openapi.OrderTag.Debtor","text":"Bases: OrderTag Option Exercise Short","title":"Debtor"},{"location":"reference_all/#longport.openapi.OrderTag.Grey","text":"Bases: OrderTag Grey Order","title":"Grey"},{"location":"reference_all/#longport.openapi.OrderTag.LongTerm","text":"Bases: OrderTag Long term Order","title":"LongTerm"},{"location":"reference_all/#longport.openapi.OrderTag.MarginCall","text":"Bases: OrderTag Force Selling","title":"MarginCall"},{"location":"reference_all/#longport.openapi.OrderTag.NonExercise","text":"Bases: OrderTag Wavier Of Option Exercise","title":"NonExercise"},{"location":"reference_all/#longport.openapi.OrderTag.Normal","text":"Bases: OrderTag Normal Order","title":"Normal"},{"location":"reference_all/#longport.openapi.OrderTag.Offline","text":"Bases: OrderTag OTC","title":"Offline"},{"location":"reference_all/#longport.openapi.OrderTag.Unknown","text":"Bases: OrderTag Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.OrderType","text":"Order type","title":"OrderType"},{"location":"reference_all/#longport.openapi.OrderType.ALO","text":"Bases: OrderType At-auction Limit Order","title":"ALO"},{"location":"reference_all/#longport.openapi.OrderType.AO","text":"Bases: OrderType At-auction Order","title":"AO"},{"location":"reference_all/#longport.openapi.OrderType.ELO","text":"Bases: OrderType Enhanced Limit Order","title":"ELO"},{"location":"reference_all/#longport.openapi.OrderType.LIT","text":"Bases: OrderType Limit If Touched","title":"LIT"},{"location":"reference_all/#longport.openapi.OrderType.LO","text":"Bases: OrderType Limit Order","title":"LO"},{"location":"reference_all/#longport.openapi.OrderType.MIT","text":"Bases: OrderType Market If Touched","title":"MIT"},{"location":"reference_all/#longport.openapi.OrderType.MO","text":"Bases: OrderType Market Order","title":"MO"},{"location":"reference_all/#longport.openapi.OrderType.ODD","text":"Bases: OrderType Odd Lots","title":"ODD"},{"location":"reference_all/#longport.openapi.OrderType.SLO","text":"Bases: OrderType Special Limit Order","title":"SLO"},{"location":"reference_all/#longport.openapi.OrderType.TSLPAMT","text":"Bases: OrderType Trailing Limit If Touched (Trailing Amount)","title":"TSLPAMT"},{"location":"reference_all/#longport.openapi.OrderType.TSLPPCT","text":"Bases: OrderType Trailing Limit If Touched (Trailing Percent)","title":"TSLPPCT"},{"location":"reference_all/#longport.openapi.OrderType.TSMAMT","text":"Bases: OrderType Trailing Market If Touched (Trailing Amount)","title":"TSMAMT"},{"location":"reference_all/#longport.openapi.OrderType.TSMPCT","text":"Bases: OrderType Trailing Market If Touched (Trailing Percent)","title":"TSMPCT"},{"location":"reference_all/#longport.openapi.OrderType.Unknown","text":"Bases: OrderType Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.OutsideRTH","text":"Enable or disable outside regular trading hours","title":"OutsideRTH"},{"location":"reference_all/#longport.openapi.OutsideRTH.AnyTime","text":"Bases: OutsideRTH Any time","title":"AnyTime"},{"location":"reference_all/#longport.openapi.OutsideRTH.Overnight","text":"Bases: OutsideRTH Overnight","title":"Overnight"},{"location":"reference_all/#longport.openapi.OutsideRTH.RTHOnly","text":"Bases: OutsideRTH Regular trading hour only","title":"RTHOnly"},{"location":"reference_all/#longport.openapi.OutsideRTH.Unknown","text":"Bases: OutsideRTH Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.ParticipantInfo","text":"Participant info","title":"ParticipantInfo"},{"location":"reference_all/#longport.openapi.ParticipantInfo.broker_ids","text":"Broker IDs","title":"broker_ids"},{"location":"reference_all/#longport.openapi.ParticipantInfo.name_cn","text":"Participant name (zh-CN)","title":"name_cn"},{"location":"reference_all/#longport.openapi.ParticipantInfo.name_en","text":"Participant name (en)","title":"name_en"},{"location":"reference_all/#longport.openapi.ParticipantInfo.name_hk","text":"Participant name (zh-HK)","title":"name_hk"},{"location":"reference_all/#longport.openapi.Period","text":"Candlestick period","title":"Period"},{"location":"reference_all/#longport.openapi.Period.Day","text":"Bases: Period Daily","title":"Day"},{"location":"reference_all/#longport.openapi.Period.Min_1","text":"Bases: Period One Minute","title":"Min_1"},{"location":"reference_all/#longport.openapi.Period.Min_10","text":"Bases: Period Ten Minutes","title":"Min_10"},{"location":"reference_all/#longport.openapi.Period.Min_120","text":"Bases: Period Two Hours","title":"Min_120"},{"location":"reference_all/#longport.openapi.Period.Min_15","text":"Bases: Period Fifteen Minutes","title":"Min_15"},{"location":"reference_all/#longport.openapi.Period.Min_180","text":"Bases: Period Three Hours","title":"Min_180"},{"location":"reference_all/#longport.openapi.Period.Min_2","text":"Bases: Period Two Minutes","title":"Min_2"},{"location":"reference_all/#longport.openapi.Period.Min_20","text":"Bases: Period Twenty Minutes","title":"Min_20"},{"location":"reference_all/#longport.openapi.Period.Min_240","text":"Bases: Period Four Hours","title":"Min_240"},{"location":"reference_all/#longport.openapi.Period.Min_3","text":"Bases: Period Three Minutes","title":"Min_3"},{"location":"reference_all/#longport.openapi.Period.Min_30","text":"Bases: Period Thirty Minutes","title":"Min_30"},{"location":"reference_all/#longport.openapi.Period.Min_45","text":"Bases: Period Forty-Five Minutes","title":"Min_45"},{"location":"reference_all/#longport.openapi.Period.Min_5","text":"Bases: Period Five Minutes","title":"Min_5"},{"location":"reference_all/#longport.openapi.Period.Min_60","text":"Bases: Period Sixty Minutes","title":"Min_60"},{"location":"reference_all/#longport.openapi.Period.Month","text":"Bases: Period Monthly","title":"Month"},{"location":"reference_all/#longport.openapi.Period.Quarter","text":"Bases: Period Quarterly","title":"Quarter"},{"location":"reference_all/#longport.openapi.Period.Unknown","text":"Bases: Period Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.Period.Week","text":"Bases: Period Weekly","title":"Week"},{"location":"reference_all/#longport.openapi.Period.Year","text":"Bases: Period Yearly","title":"Year"},{"location":"reference_all/#longport.openapi.PrePostQuote","text":"Quote of US pre/post market","title":"PrePostQuote"},{"location":"reference_all/#longport.openapi.PrePostQuote.high","text":"High","title":"high"},{"location":"reference_all/#longport.openapi.PrePostQuote.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longport.openapi.PrePostQuote.low","text":"Low","title":"low"},{"location":"reference_all/#longport.openapi.PrePostQuote.prev_close","text":"Close of the last trade session","title":"prev_close"},{"location":"reference_all/#longport.openapi.PrePostQuote.timestamp","text":"Time of latest price","title":"timestamp"},{"location":"reference_all/#longport.openapi.PrePostQuote.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longport.openapi.PrePostQuote.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longport.openapi.PushBrokers","text":"Brokers message","title":"PushBrokers"},{"location":"reference_all/#longport.openapi.PushBrokers.ask_brokers","text":"Ask brokers","title":"ask_brokers"},{"location":"reference_all/#longport.openapi.PushBrokers.bid_brokers","text":"Bid brokers","title":"bid_brokers"},{"location":"reference_all/#longport.openapi.PushCandlestick","text":"Candlestick updated event","title":"PushCandlestick"},{"location":"reference_all/#longport.openapi.PushCandlestick.candlestick","text":"Candlestick","title":"candlestick"},{"location":"reference_all/#longport.openapi.PushCandlestick.is_confirmed","text":"Is confirmed","title":"is_confirmed"},{"location":"reference_all/#longport.openapi.PushCandlestick.period","text":"Period type","title":"period"},{"location":"reference_all/#longport.openapi.PushCandlestickMode","text":"Push candlestick mode","title":"PushCandlestickMode"},{"location":"reference_all/#longport.openapi.PushCandlestickMode.Confirmed","text":"Bases: PushCandlestickMode Confirmed","title":"Confirmed"},{"location":"reference_all/#longport.openapi.PushCandlestickMode.Realtime","text":"Bases: PushCandlestickMode Real-time","title":"Realtime"},{"location":"reference_all/#longport.openapi.PushDepth","text":"Depth message","title":"PushDepth"},{"location":"reference_all/#longport.openapi.PushDepth.asks","text":"Ask depth","title":"asks"},{"location":"reference_all/#longport.openapi.PushDepth.bids","text":"Bid depth","title":"bids"},{"location":"reference_all/#longport.openapi.PushOrderChanged","text":"Order changed message","title":"PushOrderChanged"},{"location":"reference_all/#longport.openapi.PushOrderChanged.account_no","text":"Account no","title":"account_no"},{"location":"reference_all/#longport.openapi.PushOrderChanged.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longport.openapi.PushOrderChanged.executed_price","text":"Executed price","title":"executed_price"},{"location":"reference_all/#longport.openapi.PushOrderChanged.executed_quantity","text":"Executed quantity","title":"executed_quantity"},{"location":"reference_all/#longport.openapi.PushOrderChanged.last_price","text":"Last price","title":"last_price"},{"location":"reference_all/#longport.openapi.PushOrderChanged.last_share","text":"Last share","title":"last_share"},{"location":"reference_all/#longport.openapi.PushOrderChanged.limit_offset","text":"Limit offset amount","title":"limit_offset"},{"location":"reference_all/#longport.openapi.PushOrderChanged.msg","text":"Rejected message or remark","title":"msg"},{"location":"reference_all/#longport.openapi.PushOrderChanged.order_id","text":"Order ID","title":"order_id"},{"location":"reference_all/#longport.openapi.PushOrderChanged.order_type","text":"Order type","title":"order_type"},{"location":"reference_all/#longport.openapi.PushOrderChanged.remark","text":"Remark message","title":"remark"},{"location":"reference_all/#longport.openapi.PushOrderChanged.side","text":"Order side","title":"side"},{"location":"reference_all/#longport.openapi.PushOrderChanged.status","text":"Order status","title":"status"},{"location":"reference_all/#longport.openapi.PushOrderChanged.stock_name","text":"Stock name","title":"stock_name"},{"location":"reference_all/#longport.openapi.PushOrderChanged.submitted_at","text":"Submitted time","title":"submitted_at"},{"location":"reference_all/#longport.openapi.PushOrderChanged.submitted_price","text":"Submitted price","title":"submitted_price"},{"location":"reference_all/#longport.openapi.PushOrderChanged.submitted_quantity","text":"Submitted quantity","title":"submitted_quantity"},{"location":"reference_all/#longport.openapi.PushOrderChanged.symbol","text":"Order symbol","title":"symbol"},{"location":"reference_all/#longport.openapi.PushOrderChanged.tag","text":"Order tag","title":"tag"},{"location":"reference_all/#longport.openapi.PushOrderChanged.trailing_amount","text":"Trailing amount","title":"trailing_amount"},{"location":"reference_all/#longport.openapi.PushOrderChanged.trailing_percent","text":"Trailing percent","title":"trailing_percent"},{"location":"reference_all/#longport.openapi.PushOrderChanged.trigger_at","text":"Conditional order trigger time","title":"trigger_at"},{"location":"reference_all/#longport.openapi.PushOrderChanged.trigger_price","text":"Order trigger price","title":"trigger_price"},{"location":"reference_all/#longport.openapi.PushOrderChanged.trigger_status","text":"Conditional order trigger status","title":"trigger_status"},{"location":"reference_all/#longport.openapi.PushOrderChanged.updated_at","text":"Last updated time","title":"updated_at"},{"location":"reference_all/#longport.openapi.PushQuote","text":"Quote message","title":"PushQuote"},{"location":"reference_all/#longport.openapi.PushQuote.high","text":"High","title":"high"},{"location":"reference_all/#longport.openapi.PushQuote.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longport.openapi.PushQuote.low","text":"Low","title":"low"},{"location":"reference_all/#longport.openapi.PushQuote.open","text":"Open","title":"open"},{"location":"reference_all/#longport.openapi.PushQuote.timestamp","text":"Time of latest price","title":"timestamp"},{"location":"reference_all/#longport.openapi.PushQuote.trade_session","text":"Trade session","title":"trade_session"},{"location":"reference_all/#longport.openapi.PushQuote.trade_status","text":"Security trading status","title":"trade_status"},{"location":"reference_all/#longport.openapi.PushQuote.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longport.openapi.PushQuote.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longport.openapi.PushTrades","text":"Trades message","title":"PushTrades"},{"location":"reference_all/#longport.openapi.PushTrades.trades","text":"Trades data","title":"trades"},{"location":"reference_all/#longport.openapi.QuoteContext","text":"Quote context Parameters: Name Type Description Default config Config Configuration object required","title":"QuoteContext"},{"location":"reference_all/#longport.openapi.QuoteContext.brokers","text":"Get security brokers Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.brokers(\"700.HK\") print(resp)","title":"brokers"},{"location":"reference_all/#longport.openapi.QuoteContext.calc_indexes","text":"Get calc indexes Parameters: Name Type Description Default symbols List [ str ] Security codes required indexes List [ Type [ CalcIndex ]] Calc indexes required Returns: Type Description List [ SecurityCalcIndex ] Calc indexes of the symbols Examples: :: from longport.openapi import QuoteContext, Config, CalcIndex config = Config.from_env() ctx = QuoteContext(config) resp = ctx.calc_indexes([\"700.HK\", \"APPL.US\"], [CalcIndex.LastDone, CalcIndex.ChangeRate]) print(resp)","title":"calc_indexes"},{"location":"reference_all/#longport.openapi.QuoteContext.candlesticks","text":"Get security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Candlestick period required count int Count of cancdlestick (Maximum is 1000 ) required adjust_type Type [ AdjustType ] Adjustment type required Returns: Type Description List [ Candlestick ] Candlesticks Examples: :: from longport.openapi import QuoteContext, Config, Period, AdjustType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.candlesticks( \"700.HK\", Period.Day, 10, AdjustType.NoAdjust) print(resp)","title":"candlesticks"},{"location":"reference_all/#longport.openapi.QuoteContext.capital_distribution","text":"Get capital distribution Parameters: Name Type Description Default symbol str Security code required Returns: Type Description CapitalDistributionResponse Capital distribution Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_distribution(\"700.HK\") print(resp)","title":"capital_distribution"},{"location":"reference_all/#longport.openapi.QuoteContext.capital_flow","text":"Get capital flow intraday Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ CapitalFlowLine ] Capital flow list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.capital_flow(\"700.HK\") print(resp)","title":"capital_flow"},{"location":"reference_all/#longport.openapi.QuoteContext.create_watchlist_group","text":"Create watchlist group Parameters: Name Type Description Default name str Group name required securities Optional [ List [ str ]] Securities None Returns: Type Description int Group ID Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) group_id = ctx.create_watchlist_group(name = \"Watchlist1\", securities = [\"700.HK\", \"AAPL.US\"]) print(group_id)","title":"create_watchlist_group"},{"location":"reference_all/#longport.openapi.QuoteContext.delete_watchlist_group","text":"Delete watchlist group Parameters: Name Type Description Default id int Group ID required purge bool Move securities in this group to the default group False Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) ctx.delete_watchlist_group(10086)","title":"delete_watchlist_group"},{"location":"reference_all/#longport.openapi.QuoteContext.depth","text":"Get security depth Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.depth(\"700.HK\") print(resp)","title":"depth"},{"location":"reference_all/#longport.openapi.QuoteContext.history_candlesticks_by_date","text":"Get security history candlesticks by date Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required adjust_type Type [ AdjustType ] Adjust type required start Optional [ date ] Start date required end Optional [ date ] End date required","title":"history_candlesticks_by_date"},{"location":"reference_all/#longport.openapi.QuoteContext.history_candlesticks_by_offset","text":"Get security history candlesticks by offset Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required adjust_type Type [ AdjustType ] Adjust type required forward bool If True , query the latest from the specified time required count int Count of candlesticks required time Optional [ datetime ] Datetime None","title":"history_candlesticks_by_offset"},{"location":"reference_all/#longport.openapi.QuoteContext.intraday","text":"Get security intraday lines Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ IntradayLine ] Intraday lines Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.intraday(\"700.HK\") print(resp)","title":"intraday"},{"location":"reference_all/#longport.openapi.QuoteContext.member_id","text":"Returns the member ID","title":"member_id"},{"location":"reference_all/#longport.openapi.QuoteContext.option_chain_expiry_date_list","text":"Get option chain expiry date list Parameters: Name Type Description Default symbol str Security code required Returns: Type Description List [ date ] Option chain expiry date list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_expiry_date_list(\"AAPL.US\") print(resp)","title":"option_chain_expiry_date_list"},{"location":"reference_all/#longport.openapi.QuoteContext.option_chain_info_by_date","text":"Get option chain info by date Parameters: Name Type Description Default symbol str Security code required expiry_date date Expiry date required Returns: Type Description List [ StrikePriceInfo ] Option chain info Examples: :: from datetime import date from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_chain_info_by_date( \"AAPL.US\", date(2023, 1, 20)) print(resp)","title":"option_chain_info_by_date"},{"location":"reference_all/#longport.openapi.QuoteContext.option_quote","text":"Get quote of option securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ OptionQuote ] Option quote list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.option_quote([\"AAPL230317P160000.US\"]) print(resp)","title":"option_quote"},{"location":"reference_all/#longport.openapi.QuoteContext.participants","text":"Get participants Returns: Type Description List [ ParticipantInfo ] Participants Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.participants() print(resp)","title":"participants"},{"location":"reference_all/#longport.openapi.QuoteContext.quote","text":"Get quote of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityQuote ] Security quote list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.quote([\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"quote"},{"location":"reference_all/#longport.openapi.QuoteContext.quote_level","text":"Returns the quote level","title":"quote_level"},{"location":"reference_all/#longport.openapi.QuoteContext.quote_package_details","text":"Returns the quote package details","title":"quote_package_details"},{"location":"reference_all/#longport.openapi.QuoteContext.realtime_brokers","text":"Get real-time brokers Get real-time brokers of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityBrokers Security brokers Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Brokers], is_first_push = True) sleep(5) resp = ctx.realtime_brokers(\"700.HK\") print(resp)","title":"realtime_brokers"},{"location":"reference_all/#longport.openapi.QuoteContext.realtime_candlesticks","text":"Get real-time candlesticks Get Get real-time candlesticks of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required count int Count of candlesticks required Returns: Type Description List [ Candlestick ] Security candlesticks Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, Period config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe_candlesticks(\"AAPL.US\", Period.Min_1) sleep(5) resp = ctx.realtime_candlesticks(\"AAPL.US\", Period.Min_1, 10) print(resp)","title":"realtime_candlesticks"},{"location":"reference_all/#longport.openapi.QuoteContext.realtime_depth","text":"Get real-time depth Get real-time depth of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required Returns: Type Description SecurityDepth Security depth Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Depth], is_first_push = True) sleep(5) resp = ctx.realtime_depth(\"700.HK\") print(resp)","title":"realtime_depth"},{"location":"reference_all/#longport.openapi.QuoteContext.realtime_quote","text":"Get real-time quote Get real-time quotes of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ RealtimeQuote ] Quote list Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(5) resp = ctx.realtime_quote([\"700.HK\", \"AAPL.US\"]) print(resp)","title":"realtime_quote"},{"location":"reference_all/#longport.openapi.QuoteContext.realtime_trades","text":"Get real-time trades Get real-time trades of the subscribed symbols, it always returns the data in the local storage. Parameters: Name Type Description Default symbol str Security code required count int Count of trades required Returns: Type Description List [ Trade ] Security trades Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Trade], is_first_push = False) sleep(5) resp = ctx.realtime_trades(\"700.HK\", 10) print(resp)","title":"realtime_trades"},{"location":"reference_all/#longport.openapi.QuoteContext.security_list","text":"Get security list Parameters: Name Type Description Default market Type [ Market ] Market required category Type [ SecurityListCategory ] Security list category required Returns: Type Description List [ Security ] Security list Examples: :: from longport.openapi import QuoteContext, Config, Market, SecurityListCategory config = Config.from_env() ctx = QuoteContext(config) resp = ctx.security_list(Market.HK, SecurityListCategory.Overnight) print(resp)","title":"security_list"},{"location":"reference_all/#longport.openapi.QuoteContext.set_on_brokers","text":"Set brokers callback, after receiving the brokers data push, it will call back to this function.","title":"set_on_brokers"},{"location":"reference_all/#longport.openapi.QuoteContext.set_on_candlestick","text":"Set candlestick callback, after receiving the candlestick updated event, it will call back to this function.","title":"set_on_candlestick"},{"location":"reference_all/#longport.openapi.QuoteContext.set_on_depth","text":"Set depth callback, after receiving the depth data push, it will call back to this function.","title":"set_on_depth"},{"location":"reference_all/#longport.openapi.QuoteContext.set_on_quote","text":"Set quote callback, after receiving the quote data push, it will call back to this function.","title":"set_on_quote"},{"location":"reference_all/#longport.openapi.QuoteContext.set_on_trades","text":"Set trades callback, after receiving the trades data push, it will call back to this function.","title":"set_on_trades"},{"location":"reference_all/#longport.openapi.QuoteContext.static_info","text":"Get basic information of securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ SecurityStaticInfo ] Security info list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.static_info( [\"700.HK\", \"AAPL.US\", \"TSLA.US\", \"NFLX.US\"]) print(resp)","title":"static_info"},{"location":"reference_all/#longport.openapi.QuoteContext.subscribe","text":"Subscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required is_first_push bool Whether to perform a data push immediately after subscribing. (trade not supported) False Examples: :: from time import sleep from longport.openapi import QuoteContext, Config, SubType, PushQuote def on_quote(symbol: str, event: PushQuote): print(symbol, event) config = Config.from_env() ctx = QuoteContext(config) ctx.set_on_quote(on_quote) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [ SubType.Quote], is_first_push = True) sleep(30)","title":"subscribe"},{"location":"reference_all/#longport.openapi.QuoteContext.subscribe_candlesticks","text":"Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required Examples: :: from longport.openapi import QuoteContext, Config, PushCandlestick config = Config.from_env() ctx = QuoteContext(config) def on_candlestick(symbol: str, event: PushCandlestick): print(symbol, event) ctx.set_on_candlestick(on_candlestick) ctx.subscribe_candlesticks(\"700.HK\", Period.Min_1) sleep(30)","title":"subscribe_candlesticks"},{"location":"reference_all/#longport.openapi.QuoteContext.subscriptions","text":"Get subscription information Examples: :: from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) resp = ctx.subscriptions() print(resp)","title":"subscriptions"},{"location":"reference_all/#longport.openapi.QuoteContext.trades","text":"Get security trades Parameters: Name Type Description Default symbol str Security code required count int Count of trades (Maximum is 1000 ) required Returns: Type Description List [ Trade ] Trades Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trades(\"700.HK\", 10) print(resp)","title":"trades"},{"location":"reference_all/#longport.openapi.QuoteContext.trading_days","text":"Get trading session of the day The interval must be less than one month, and only the most recent year is supported. Parameters: Name Type Description Default market Type [ Market ] Market required begin date Begin date required end date End date required Returns: Type Description MarketTradingDays Trading days Examples: :: from datetime import date from longport.openapi import QuoteContext, Config, Market config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_days( Market.HK, date(2022, 1, 1), date(2022, 2, 1)) print(resp)","title":"trading_days"},{"location":"reference_all/#longport.openapi.QuoteContext.trading_session","text":"Get trading session of the day Returns: Type Description List [ MarketTradingSession ] Trading session of the day Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.trading_session() print(resp)","title":"trading_session"},{"location":"reference_all/#longport.openapi.QuoteContext.unsubscribe","text":"Unsubscribe Parameters: Name Type Description Default symbols List [ str ] Security codes required sub_types List [ Type [ SubType ]] Subscribe types required Examples: :: from longport.openapi import QuoteContext, Config, SubType config = Config.from_env() ctx = QuoteContext(config) ctx.subscribe([\"700.HK\", \"AAPL.US\"], [SubType.Quote]) ctx.unsubscribe([\"AAPL.US\"], [SubType.Quote])","title":"unsubscribe"},{"location":"reference_all/#longport.openapi.QuoteContext.unsubscribe_candlesticks","text":"Subscribe security candlesticks Parameters: Name Type Description Default symbol str Security code required period Type [ Period ] Period type required","title":"unsubscribe_candlesticks"},{"location":"reference_all/#longport.openapi.QuoteContext.update_watchlist_group","text":"Update watchlist group Parameters: Name Type Description Default id int Group ID required name Optional [ str ] Group name None securities Optional [ List [ str ]] Securities None Examples: :: from longport.openapi import QuoteContext, Config, SecuritiesUpdateMode config = Config.from_env() ctx = QuoteContext(config) ctx.update_watchlist_group(10086, name = \"Watchlist2\", securities = [\"700.HK\", \"AAPL.US\"], SecuritiesUpdateMode.Replace)","title":"update_watchlist_group"},{"location":"reference_all/#longport.openapi.QuoteContext.warrant_issuers","text":"Get warrant issuers Returns: Type Description List [ IssuerInfo ] Warrant issuers Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_issuers() print(resp)","title":"warrant_issuers"},{"location":"reference_all/#longport.openapi.QuoteContext.warrant_list","text":"Get warrant list Parameters: Name Type Description Default symbol str Security code required sort_by Type [ WarrantSortBy ] Sort by field required sort_order Type [ SortOrderType ] Sort order required warrant_type Optional [ List [ Type [ WarrantType ]]] Filter by warrant type None issuer Optional [ List [ int ]] Filter by issuer None expiry_date Optional [ List [ Type [ FilterWarrantExpiryDate ]]] Filter by expiry date None price_type Optional [ List [ Type [ FilterWarrantInOutBoundsType ]]] Filter by price type None status Optional [ List [ Type [ WarrantStatus ]]] Filter by status None Returns: Type Description List [ WarrantInfo ] Warrant list Examples: :: from longport.openapi import QuoteContext, Config, WarrantSortBy, SortOrderType config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_list(\"700.HK\", WarrantSortBy.LastDone, SortOrderType.Ascending) print(resp)","title":"warrant_list"},{"location":"reference_all/#longport.openapi.QuoteContext.warrant_quote","text":"Get quote of warrant securities Parameters: Name Type Description Default symbols List [ str ] Security codes required Returns: Type Description List [ WarrantQuote ] Warrant quote list Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.warrant_quote([\"21125.HK\"]) print(resp)","title":"warrant_quote"},{"location":"reference_all/#longport.openapi.QuoteContext.watchlist","text":"Get watch list Returns: Type Description List [ WatchlistGroup ] Watch list groups Examples: :: from longport.openapi import QuoteContext, Config config = Config.from_env() ctx = QuoteContext(config) resp = ctx.watchlist() print(resp)","title":"watchlist"},{"location":"reference_all/#longport.openapi.QuotePackageDetail","text":"Quote package detail","title":"QuotePackageDetail"},{"location":"reference_all/#longport.openapi.QuotePackageDetail.description","text":"Description","title":"description"},{"location":"reference_all/#longport.openapi.QuotePackageDetail.end_at","text":"End time","title":"end_at"},{"location":"reference_all/#longport.openapi.QuotePackageDetail.key","text":"Key","title":"key"},{"location":"reference_all/#longport.openapi.QuotePackageDetail.name","text":"Name","title":"name"},{"location":"reference_all/#longport.openapi.QuotePackageDetail.start_at","text":"Start time","title":"start_at"},{"location":"reference_all/#longport.openapi.RealtimeQuote","text":"Real-time quote","title":"RealtimeQuote"},{"location":"reference_all/#longport.openapi.RealtimeQuote.high","text":"High","title":"high"},{"location":"reference_all/#longport.openapi.RealtimeQuote.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longport.openapi.RealtimeQuote.low","text":"Low","title":"low"},{"location":"reference_all/#longport.openapi.RealtimeQuote.open","text":"Open","title":"open"},{"location":"reference_all/#longport.openapi.RealtimeQuote.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longport.openapi.RealtimeQuote.timestamp","text":"Time of latest price","title":"timestamp"},{"location":"reference_all/#longport.openapi.RealtimeQuote.trade_status","text":"Security trading status","title":"trade_status"},{"location":"reference_all/#longport.openapi.RealtimeQuote.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longport.openapi.RealtimeQuote.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longport.openapi.SecuritiesUpdateMode","text":"Securities update mode","title":"SecuritiesUpdateMode"},{"location":"reference_all/#longport.openapi.SecuritiesUpdateMode.Add","text":"Bases: SecuritiesUpdateMode Add securities","title":"Add"},{"location":"reference_all/#longport.openapi.SecuritiesUpdateMode.Remove","text":"Bases: SecuritiesUpdateMode Remove securities","title":"Remove"},{"location":"reference_all/#longport.openapi.SecuritiesUpdateMode.Replace","text":"Bases: SecuritiesUpdateMode Replace securities","title":"Replace"},{"location":"reference_all/#longport.openapi.Security","text":"Security","title":"Security"},{"location":"reference_all/#longport.openapi.Security.name_cn","text":"Security name (zh-CN)","title":"name_cn"},{"location":"reference_all/#longport.openapi.Security.name_en","text":"Security name (en)","title":"name_en"},{"location":"reference_all/#longport.openapi.Security.name_hk","text":"Security name (zh-HK)","title":"name_hk"},{"location":"reference_all/#longport.openapi.Security.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longport.openapi.SecurityBoard","text":"Security board","title":"SecurityBoard"},{"location":"reference_all/#longport.openapi.SecurityBoard.CNIX","text":"Bases: SecurityBoard CN Index","title":"CNIX"},{"location":"reference_all/#longport.openapi.SecurityBoard.CNSector","text":"Bases: SecurityBoard CN Industry Board","title":"CNSector"},{"location":"reference_all/#longport.openapi.SecurityBoard.HKEquity","text":"Bases: SecurityBoard Hong Kong Equity Securities","title":"HKEquity"},{"location":"reference_all/#longport.openapi.SecurityBoard.HKHS","text":"Bases: SecurityBoard Hang Seng Index","title":"HKHS"},{"location":"reference_all/#longport.openapi.SecurityBoard.HKPreIPO","text":"Bases: SecurityBoard HK PreIPO Security","title":"HKPreIPO"},{"location":"reference_all/#longport.openapi.SecurityBoard.HKSector","text":"Bases: SecurityBoard HK Industry Board","title":"HKSector"},{"location":"reference_all/#longport.openapi.SecurityBoard.HKWarrant","text":"Bases: SecurityBoard HK Warrant","title":"HKWarrant"},{"location":"reference_all/#longport.openapi.SecurityBoard.SGMain","text":"Bases: SecurityBoard SG Main Board","title":"SGMain"},{"location":"reference_all/#longport.openapi.SecurityBoard.SGSector","text":"Bases: SecurityBoard SG Industry Board","title":"SGSector"},{"location":"reference_all/#longport.openapi.SecurityBoard.SHMainConnect","text":"Bases: SecurityBoard SH Main Board(Connect)","title":"SHMainConnect"},{"location":"reference_all/#longport.openapi.SecurityBoard.SHMainNonConnect","text":"Bases: SecurityBoard SH Main Board(Non Connect)","title":"SHMainNonConnect"},{"location":"reference_all/#longport.openapi.SecurityBoard.SHSTAR","text":"Bases: SecurityBoard SH Science and Technology Innovation Board","title":"SHSTAR"},{"location":"reference_all/#longport.openapi.SecurityBoard.STI","text":"Bases: SecurityBoard Singapore Straits Index","title":"STI"},{"location":"reference_all/#longport.openapi.SecurityBoard.SZGEMConnect","text":"Bases: SecurityBoard SZ Gem Board(Connect)","title":"SZGEMConnect"},{"location":"reference_all/#longport.openapi.SecurityBoard.SZGEMNonConnect","text":"Bases: SecurityBoard SZ Gem Board(Non Connect)","title":"SZGEMNonConnect"},{"location":"reference_all/#longport.openapi.SecurityBoard.SZMainConnect","text":"Bases: SecurityBoard SZ Main Board(Connect)","title":"SZMainConnect"},{"location":"reference_all/#longport.openapi.SecurityBoard.SZMainNonConnect","text":"Bases: SecurityBoard SZ Main Board(Non Connect)","title":"SZMainNonConnect"},{"location":"reference_all/#longport.openapi.SecurityBoard.USDJI","text":"Bases: SecurityBoard Dow Jones Industrial Average","title":"USDJI"},{"location":"reference_all/#longport.openapi.SecurityBoard.USMain","text":"Bases: SecurityBoard US Pink Board","title":"USMain"},{"location":"reference_all/#longport.openapi.SecurityBoard.USNSDQ","text":"Bases: SecurityBoard Nasdsaq Index","title":"USNSDQ"},{"location":"reference_all/#longport.openapi.SecurityBoard.USOption","text":"Bases: SecurityBoard US Option","title":"USOption"},{"location":"reference_all/#longport.openapi.SecurityBoard.USOptionS","text":"Bases: SecurityBoard US Sepecial Option","title":"USOptionS"},{"location":"reference_all/#longport.openapi.SecurityBoard.USPink","text":"Bases: SecurityBoard US Pink Board","title":"USPink"},{"location":"reference_all/#longport.openapi.SecurityBoard.USSector","text":"Bases: SecurityBoard US Industry Board","title":"USSector"},{"location":"reference_all/#longport.openapi.SecurityBoard.Unknown","text":"Bases: SecurityBoard Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.SecurityBrokers","text":"Security brokers","title":"SecurityBrokers"},{"location":"reference_all/#longport.openapi.SecurityBrokers.ask_brokers","text":"Ask brokers","title":"ask_brokers"},{"location":"reference_all/#longport.openapi.SecurityBrokers.bid_brokers","text":"Bid brokers","title":"bid_brokers"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex","text":"Security calc index response","title":"SecurityCalcIndex"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.amplitude","text":"Amplitude","title":"amplitude"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.balance_point","text":"Breakeven point","title":"balance_point"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.call_price","text":"Call price","title":"call_price"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.capital_flow","text":"Capital flow","title":"capital_flow"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.change_rate","text":"Change ratio","title":"change_rate"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.change_value","text":"Change value","title":"change_value"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.conversion_ratio","text":"Conversion ratio","title":"conversion_ratio"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.delta","text":"Delta","title":"delta"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.dividend_ratio_ttm","text":"Dividend ratio (TTM)","title":"dividend_ratio_ttm"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.effective_leverage","text":"Effective leverage","title":"effective_leverage"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.expiry_date","text":"Expiry date","title":"expiry_date"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.five_day_change_rate","text":"Five days change ratio","title":"five_day_change_rate"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.five_minutes_change_rate","text":"Five minutes change ratio","title":"five_minutes_change_rate"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.gamma","text":"Gamma","title":"gamma"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.half_year_change_rate","text":"Half year change ratio","title":"half_year_change_rate"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.implied_volatility","text":"Implied volatility","title":"implied_volatility"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.itm_otm","text":"In/out of the bound","title":"itm_otm"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.leverage_ratio","text":"Leverage ratio","title":"leverage_ratio"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.lower_strike_price","text":"Lower bound price","title":"lower_strike_price"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.open_interest","text":"Open interest","title":"open_interest"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.outstanding_qty","text":"Outstanding quantity","title":"outstanding_qty"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.outstanding_ratio","text":"Outstanding ratio","title":"outstanding_ratio"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.pb_ratio","text":"PB","title":"pb_ratio"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.pe_ttm_ratio","text":"PE (TTM)","title":"pe_ttm_ratio"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.premium","text":"Premium","title":"premium"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.rho","text":"Rho","title":"rho"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.strike_price","text":"Strike price","title":"strike_price"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.symbol","text":"Security symbol","title":"symbol"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.ten_day_change_rate","text":"Ten days change ratio","title":"ten_day_change_rate"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.theta","text":"Theta","title":"theta"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.to_call_price","text":"Price interval from the call price","title":"to_call_price"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.total_market_value","text":"Total market value","title":"total_market_value"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.turnover_rate","text":"turnover_rate","title":"turnover_rate"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.upper_strike_price","text":"Upper bound price","title":"upper_strike_price"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.vega","text":"Vega","title":"vega"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.volume_ratio","text":"Volume ratio","title":"volume_ratio"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.warrant_delta","text":"Warrant delta","title":"warrant_delta"},{"location":"reference_all/#longport.openapi.SecurityCalcIndex.ytd_change_rate","text":"Year-to-date change ratio","title":"ytd_change_rate"},{"location":"reference_all/#longport.openapi.SecurityDepth","text":"Security depth","title":"SecurityDepth"},{"location":"reference_all/#longport.openapi.SecurityDepth.asks","text":"Ask depth","title":"asks"},{"location":"reference_all/#longport.openapi.SecurityDepth.bids","text":"Bid depth","title":"bids"},{"location":"reference_all/#longport.openapi.SecurityListCategory","text":"Security list category","title":"SecurityListCategory"},{"location":"reference_all/#longport.openapi.SecurityListCategory.Overnight","text":"Bases: SecurityListCategory Overnight","title":"Overnight"},{"location":"reference_all/#longport.openapi.SecurityQuote","text":"Quote of securitity","title":"SecurityQuote"},{"location":"reference_all/#longport.openapi.SecurityQuote.high","text":"High","title":"high"},{"location":"reference_all/#longport.openapi.SecurityQuote.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longport.openapi.SecurityQuote.low","text":"Low","title":"low"},{"location":"reference_all/#longport.openapi.SecurityQuote.open","text":"Open","title":"open"},{"location":"reference_all/#longport.openapi.SecurityQuote.overnight_quote","text":"Quote of US overnight market","title":"overnight_quote"},{"location":"reference_all/#longport.openapi.SecurityQuote.post_market_quote","text":"Quote of US post market","title":"post_market_quote"},{"location":"reference_all/#longport.openapi.SecurityQuote.pre_market_quote","text":"Quote of US pre market","title":"pre_market_quote"},{"location":"reference_all/#longport.openapi.SecurityQuote.prev_close","text":"Yesterday's close","title":"prev_close"},{"location":"reference_all/#longport.openapi.SecurityQuote.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longport.openapi.SecurityQuote.timestamp","text":"Time of latest price","title":"timestamp"},{"location":"reference_all/#longport.openapi.SecurityQuote.trade_status","text":"Security trading status","title":"trade_status"},{"location":"reference_all/#longport.openapi.SecurityQuote.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longport.openapi.SecurityQuote.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo","text":"The basic information of securities","title":"SecurityStaticInfo"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.board","text":"Board","title":"board"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.bps","text":"Net assets per share","title":"bps"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.circulating_shares","text":"Circulating shares","title":"circulating_shares"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.currency","text":"Trading currency","title":"currency"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.dividend_yield","text":"Dividend yield","title":"dividend_yield"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.eps","text":"Earnings per share","title":"eps"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.eps_ttm","text":"Earnings per share (TTM)","title":"eps_ttm"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.exchange","text":"Exchange which the security belongs to","title":"exchange"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.hk_shares","text":"HK shares (only HK stocks)","title":"hk_shares"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.lot_size","text":"Lot size","title":"lot_size"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.name_cn","text":"Security name (zh-CN)","title":"name_cn"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.name_en","text":"Security name (en)","title":"name_en"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.name_hk","text":"Security name (zh-HK)","title":"name_hk"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.stock_derivatives","text":"Types of supported derivatives","title":"stock_derivatives"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longport.openapi.SecurityStaticInfo.total_shares","text":"Total shares","title":"total_shares"},{"location":"reference_all/#longport.openapi.SortOrderType","text":"Sort order type","title":"SortOrderType"},{"location":"reference_all/#longport.openapi.SortOrderType.Ascending","text":"Bases: SortOrderType Ascending","title":"Ascending"},{"location":"reference_all/#longport.openapi.SortOrderType.Descending","text":"Bases: SortOrderType Descending","title":"Descending"},{"location":"reference_all/#longport.openapi.StockPosition","text":"Stock position","title":"StockPosition"},{"location":"reference_all/#longport.openapi.StockPosition.available_quantity","text":"Available quantity","title":"available_quantity"},{"location":"reference_all/#longport.openapi.StockPosition.cost_price","text":"Cost Price(According to the client's choice of average purchase or diluted cost)","title":"cost_price"},{"location":"reference_all/#longport.openapi.StockPosition.currency","text":"Currency","title":"currency"},{"location":"reference_all/#longport.openapi.StockPosition.init_quantity","text":"Initial position before market opening","title":"init_quantity"},{"location":"reference_all/#longport.openapi.StockPosition.market","text":"Market","title":"market"},{"location":"reference_all/#longport.openapi.StockPosition.quantity","text":"The number of holdings","title":"quantity"},{"location":"reference_all/#longport.openapi.StockPosition.symbol","text":"Stock code","title":"symbol"},{"location":"reference_all/#longport.openapi.StockPosition.symbol_name","text":"Stock name","title":"symbol_name"},{"location":"reference_all/#longport.openapi.StockPositionChannel","text":"Stock position channel","title":"StockPositionChannel"},{"location":"reference_all/#longport.openapi.StockPositionChannel.account_channel","text":"Account type","title":"account_channel"},{"location":"reference_all/#longport.openapi.StockPositionChannel.positions","text":"Stock positions","title":"positions"},{"location":"reference_all/#longport.openapi.StockPositionsResponse","text":"Stock positions response","title":"StockPositionsResponse"},{"location":"reference_all/#longport.openapi.StockPositionsResponse.channels","text":"Channels","title":"channels"},{"location":"reference_all/#longport.openapi.StrikePriceInfo","text":"Strike price info","title":"StrikePriceInfo"},{"location":"reference_all/#longport.openapi.StrikePriceInfo.call_symbol","text":"Security code of call option","title":"call_symbol"},{"location":"reference_all/#longport.openapi.StrikePriceInfo.price","text":"Strike price","title":"price"},{"location":"reference_all/#longport.openapi.StrikePriceInfo.put_symbol","text":"Security code of put option","title":"put_symbol"},{"location":"reference_all/#longport.openapi.StrikePriceInfo.standard","text":"Is standard","title":"standard"},{"location":"reference_all/#longport.openapi.SubType","text":"Subscription flags","title":"SubType"},{"location":"reference_all/#longport.openapi.SubType.Brokers","text":"Bases: SubType Broker","title":"Brokers"},{"location":"reference_all/#longport.openapi.SubType.Depth","text":"Bases: SubType Depth","title":"Depth"},{"location":"reference_all/#longport.openapi.SubType.Quote","text":"Bases: SubType Quote","title":"Quote"},{"location":"reference_all/#longport.openapi.SubType.Trade","text":"Bases: SubType Trade","title":"Trade"},{"location":"reference_all/#longport.openapi.SubmitOrderResponse","text":"Response for submit order request","title":"SubmitOrderResponse"},{"location":"reference_all/#longport.openapi.SubmitOrderResponse.order_id","text":"Order id","title":"order_id"},{"location":"reference_all/#longport.openapi.Subscription","text":"Subscription","title":"Subscription"},{"location":"reference_all/#longport.openapi.Subscription.candlesticks","text":"Candlesticks","title":"candlesticks"},{"location":"reference_all/#longport.openapi.Subscription.sub_types","text":"Subscription types","title":"sub_types"},{"location":"reference_all/#longport.openapi.Subscription.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longport.openapi.TimeInForceType","text":"Time in force type","title":"TimeInForceType"},{"location":"reference_all/#longport.openapi.TimeInForceType.Day","text":"Bases: TimeInForceType Day Order","title":"Day"},{"location":"reference_all/#longport.openapi.TimeInForceType.GoodTilCanceled","text":"Bases: TimeInForceType Good Til Canceled Order","title":"GoodTilCanceled"},{"location":"reference_all/#longport.openapi.TimeInForceType.GoodTilDate","text":"Bases: TimeInForceType Good Til Date Order","title":"GoodTilDate"},{"location":"reference_all/#longport.openapi.TimeInForceType.Unknown","text":"Bases: TimeInForceType Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.TopicType","text":"Topic type","title":"TopicType"},{"location":"reference_all/#longport.openapi.TopicType.Private","text":"Bases: TopicType Private notification for trade","title":"Private"},{"location":"reference_all/#longport.openapi.Trade","text":"Trade","title":"Trade"},{"location":"reference_all/#longport.openapi.Trade.direction","text":"Trade direction","title":"direction"},{"location":"reference_all/#longport.openapi.Trade.price","text":"Price","title":"price"},{"location":"reference_all/#longport.openapi.Trade.timestamp","text":"Time of trading","title":"timestamp"},{"location":"reference_all/#longport.openapi.Trade.trade_session","text":"Trade session","title":"trade_session"},{"location":"reference_all/#longport.openapi.Trade.trade_type","text":"Trade type HK * - Overseas trade D - Odd-lot trade M - Non-direct off-exchange trade P - Late trade (Off-exchange previous day) U - Auction trade X - Direct off-exchange trade Y - Automatch internalized <empty string> - Automatch normal US <empty string> - Regular sale A - Acquisition B - Bunched trade D - Distribution F - Intermarket sweep G - Bunched sold trades H - Price variation trade I - Odd lot trade K - Rule 155 trde(NYSE MKT) M - Market center close price P - Prior reference price Q - Market center open price S - Split trade V - Contingent trade W - Average price trade X - Cross trade 1 - Stopped stock(Regular trade)","title":"trade_type"},{"location":"reference_all/#longport.openapi.Trade.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longport.openapi.TradeContext","text":"Trade context Parameters: Name Type Description Default config Config Configuration object required","title":"TradeContext"},{"location":"reference_all/#longport.openapi.TradeContext.account_balance","text":"Get account balance Parameters: Name Type Description Default currency Optional [ str ] Currency None Returns: Type Description List [ AccountBalance ] Account list Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.account_balance() print(resp)","title":"account_balance"},{"location":"reference_all/#longport.openapi.TradeContext.cancel_order","text":"Cancel order Parameters: Name Type Description Default order_id str Order ID required Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.cancel_order(\"709043056541253632\")","title":"cancel_order"},{"location":"reference_all/#longport.openapi.TradeContext.cash_flow","text":"Get cash flow Parameters: Name Type Description Default start_at datetime Start time required end_at datetime End time required business_type Optional [ Type [ BalanceType ]] Balance type None symbol Optional [ str ] Target security code None page Optional [ int ] Start page (Default: 1) None size Optional [ int ] Page size (Default: 50) None Returns: Type Description List [ CashFlow ] Cash flow list Examples: :: from datetime import datetime from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.cash_flow( start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"cash_flow"},{"location":"reference_all/#longport.openapi.TradeContext.estimate_max_purchase_quantity","text":"Estimating the maximum purchase quantity for Hong Kong and US stocks, warrants, and options Parameters: Name Type Description Default symbol str Security symbol required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order side required price Optional [ Decimal ] Estimated order price, None currency Optional [ str ] Settlement currency None order_id Optional [ str ] Order ID, required when estimating the maximum purchase quantity for a modified order None fractional_shares bool Get the maximum fractional share buying power False Returns: Type Description EstimateMaxPurchaseQuantityResponse Response Examples: :: from longport.openapi import TradeContext, Config, OrderType, OrderSide config = Config.from_env() ctx = TradeContext(config) resp = ctx.estimate_max_purchase_quantity( symbol = \"700.HK\", order_type = OrderType.LO, side = OrderSide.Buy, ) print(resp)","title":"estimate_max_purchase_quantity"},{"location":"reference_all/#longport.openapi.TradeContext.fund_positions","text":"Get fund positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by fund codes None Returns: Type Description FundPositionsResponse Fund positions Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.fund_positions() print(resp)","title":"fund_positions"},{"location":"reference_all/#longport.openapi.TradeContext.history_executions","text":"Get history executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code, example: 700.HK , AAPL.US None start_at Optional [ datetime ] Start time None end_at Optional [ datetime ] End time None Returns: Type Description List [ Execution ] Execution list Examples: :: from datetime import datetime from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_executions( symbol = \"700.HK\", start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"history_executions"},{"location":"reference_all/#longport.openapi.TradeContext.history_orders","text":"Get history orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None start_at Optional [ datetime ] Start time None end_at Optional [ datetime ] End time None Returns: Type Description List [ Order ] Order list Examples: :: from datetime import datetime from longport.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"history_orders"},{"location":"reference_all/#longport.openapi.TradeContext.margin_ratio","text":"Get margin ratio Parameters: Name Type Description Default symbol str Security symbol required Returns: Type Description MarginRatio Margin ratio Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.margin_ratio(\"700.HK\") print(resp)","title":"margin_ratio"},{"location":"reference_all/#longport.openapi.TradeContext.order_detail","text":"Get order detail Parameters: Name Type Description Default order id Order id required Returns: Type Description OrderDetail Order detail Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.order_detail(\"701276261045858304\") print(resp)","title":"order_detail"},{"location":"reference_all/#longport.openapi.TradeContext.replace_order","text":"Replace order Parameters: Name Type Description Default quantity Decimal Replaced quantity required price Optional [ Decimal ] Replaced price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Order Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None remark Optional [ str ] Remark (Maximum 64 characters) None Examples: :: from decimal import Decimal from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.replace_order( order_id = \"709043056541253632\", quantity = Decimal(100), price = Decimal(100), )","title":"replace_order"},{"location":"reference_all/#longport.openapi.TradeContext.set_on_order_changed","text":"Set order changed callback, after receiving the order changed event, it will call back to this function.","title":"set_on_order_changed"},{"location":"reference_all/#longport.openapi.TradeContext.stock_positions","text":"Get stock positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by stock codes None Returns: Type Description StockPositionsResponse Stock positions Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.stock_positions() print(resp)","title":"stock_positions"},{"location":"reference_all/#longport.openapi.TradeContext.submit_order","text":"Submit order Parameters: Name Type Description Default symbol str Security code required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order Side required submitted_quantity Decimal Submitted quantity required time_in_force Type [ TimeInForceType ] Time in force type required submitted_price Optional [ Decimal ] Submitted price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None expire_date Optional [ date ] Long term order expire date (Required when time_in_force is GoodTilDate ) None outside_rth Optional [ Type [ OutsideRTH ]] Enable or disable outside regular trading hours None remark Optional [ str ] Remark (Maximum 64 characters) None Returns: Type Description SubmitOrderResponse Response Examples: :: from decimal import Decimal from longport.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType config = Config.from_env() ctx = TradeContext(config) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(50), submitted_quantity = Decimal(200), time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp)","title":"submit_order"},{"location":"reference_all/#longport.openapi.TradeContext.subscribe","text":"Subscribe Parameters: Name Type Description Default topics List [ Type [ TopicType ]] Topic list required Examples: :: from time import sleep from decimal import Decimal from longport.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType, PushOrderChanged, TopicType def on_order_changed(event: PushOrderChanged): print(event) config = Config.from_env() ctx = TradeContext(config) ctx.set_on_order_changed(on_order_changed) ctx.subscribe([TopicType.Private]) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(50), submitted_quantity = Decimal(200), time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp) sleep(5) # waiting for push event","title":"subscribe"},{"location":"reference_all/#longport.openapi.TradeContext.today_executions","text":"Get today executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None order_id Optional [ str ] Filter by Order ID None Returns: Type Description List [ Execution ] Execution list Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_executions(symbol = \"700.HK\") print(resp)","title":"today_executions"},{"location":"reference_all/#longport.openapi.TradeContext.today_orders","text":"Get today orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None order_id Optional [ str ] Filter by order id None Returns: Type Description List [ Order ] Order list Examples: :: from longport.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, ) print(resp)","title":"today_orders"},{"location":"reference_all/#longport.openapi.TradeContext.unsubscribe","text":"Unsubscribe Parameters: Name Type Description Default topics List [ Type [ TopicType ]] Topic list required","title":"unsubscribe"},{"location":"reference_all/#longport.openapi.TradeDirection","text":"Trade direction","title":"TradeDirection"},{"location":"reference_all/#longport.openapi.TradeDirection.Down","text":"Bases: TradeDirection Down","title":"Down"},{"location":"reference_all/#longport.openapi.TradeDirection.Neutral","text":"Bases: TradeDirection Neutral","title":"Neutral"},{"location":"reference_all/#longport.openapi.TradeDirection.Up","text":"Bases: TradeDirection Up","title":"Up"},{"location":"reference_all/#longport.openapi.TradeSession","text":"Trade session","title":"TradeSession"},{"location":"reference_all/#longport.openapi.TradeSession.Normal","text":"Bases: TradeSession Trading","title":"Normal"},{"location":"reference_all/#longport.openapi.TradeSession.Post","text":"Bases: TradeSession Post-Trading","title":"Post"},{"location":"reference_all/#longport.openapi.TradeSession.Pre","text":"Bases: TradeSession Pre-Trading","title":"Pre"},{"location":"reference_all/#longport.openapi.TradeStatus","text":"Security Status","title":"TradeStatus"},{"location":"reference_all/#longport.openapi.TradeStatus.CodeMoved","text":"Bases: TradeStatus Code Moved","title":"CodeMoved"},{"location":"reference_all/#longport.openapi.TradeStatus.Delisted","text":"Bases: TradeStatus Delisted","title":"Delisted"},{"location":"reference_all/#longport.openapi.TradeStatus.Expired","text":"Bases: TradeStatus Expired","title":"Expired"},{"location":"reference_all/#longport.openapi.TradeStatus.Fuse","text":"Bases: TradeStatus Fuse","title":"Fuse"},{"location":"reference_all/#longport.openapi.TradeStatus.Halted","text":"Bases: TradeStatus Suspension","title":"Halted"},{"location":"reference_all/#longport.openapi.TradeStatus.Normal","text":"Bases: TradeStatus Normal","title":"Normal"},{"location":"reference_all/#longport.openapi.TradeStatus.PrepareList","text":"Bases: TradeStatus Prepare List","title":"PrepareList"},{"location":"reference_all/#longport.openapi.TradeStatus.SplitStockHalts","text":"Bases: TradeStatus Split Stock Halts","title":"SplitStockHalts"},{"location":"reference_all/#longport.openapi.TradeStatus.Suspend","text":"Bases: TradeStatus Suspend","title":"Suspend"},{"location":"reference_all/#longport.openapi.TradeStatus.ToBeOpened","text":"Bases: TradeStatus To Be Opened","title":"ToBeOpened"},{"location":"reference_all/#longport.openapi.TradeStatus.WarrantPrepareList","text":"Bases: TradeStatus Warrant To BeListed","title":"WarrantPrepareList"},{"location":"reference_all/#longport.openapi.TradingSessionInfo","text":"The information of trading session","title":"TradingSessionInfo"},{"location":"reference_all/#longport.openapi.TradingSessionInfo.begin_time","text":"Being trading time","title":"begin_time"},{"location":"reference_all/#longport.openapi.TradingSessionInfo.end_time","text":"End trading time","title":"end_time"},{"location":"reference_all/#longport.openapi.TradingSessionInfo.trade_session","text":"Trading sessions","title":"trade_session"},{"location":"reference_all/#longport.openapi.TriggerStatus","text":"Trigger status","title":"TriggerStatus"},{"location":"reference_all/#longport.openapi.TriggerStatus.Active","text":"Bases: TriggerStatus Active","title":"Active"},{"location":"reference_all/#longport.openapi.TriggerStatus.Deactive","text":"Bases: TriggerStatus Deactive","title":"Deactive"},{"location":"reference_all/#longport.openapi.TriggerStatus.Released","text":"Bases: TriggerStatus Released","title":"Released"},{"location":"reference_all/#longport.openapi.TriggerStatus.Unknown","text":"Bases: TriggerStatus Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.WarrantInfo","text":"Warrant info","title":"WarrantInfo"},{"location":"reference_all/#longport.openapi.WarrantInfo.balance_point","text":"Breakeven point","title":"balance_point"},{"location":"reference_all/#longport.openapi.WarrantInfo.call_price","text":"Call price","title":"call_price"},{"location":"reference_all/#longport.openapi.WarrantInfo.change_rate","text":"Quote change rate","title":"change_rate"},{"location":"reference_all/#longport.openapi.WarrantInfo.change_value","text":"Quote change","title":"change_value"},{"location":"reference_all/#longport.openapi.WarrantInfo.conversion_ratio","text":"Conversion ratio","title":"conversion_ratio"},{"location":"reference_all/#longport.openapi.WarrantInfo.delta","text":"Greek value delta","title":"delta"},{"location":"reference_all/#longport.openapi.WarrantInfo.effective_leverage","text":"Effective leverage","title":"effective_leverage"},{"location":"reference_all/#longport.openapi.WarrantInfo.expiry_date","text":"Expiry date","title":"expiry_date"},{"location":"reference_all/#longport.openapi.WarrantInfo.implied_volatility","text":"Implied volatility","title":"implied_volatility"},{"location":"reference_all/#longport.openapi.WarrantInfo.itm_otm","text":"In/out of the bound","title":"itm_otm"},{"location":"reference_all/#longport.openapi.WarrantInfo.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longport.openapi.WarrantInfo.leverage_ratio","text":"Leverage ratio","title":"leverage_ratio"},{"location":"reference_all/#longport.openapi.WarrantInfo.lower_strike_price","text":"Lower strike price","title":"lower_strike_price"},{"location":"reference_all/#longport.openapi.WarrantInfo.name","text":"Security name","title":"name"},{"location":"reference_all/#longport.openapi.WarrantInfo.outstanding_qty","text":"Outstanding quantity","title":"outstanding_qty"},{"location":"reference_all/#longport.openapi.WarrantInfo.outstanding_ratio","text":"Outstanding ratio","title":"outstanding_ratio"},{"location":"reference_all/#longport.openapi.WarrantInfo.premium","text":"Premium","title":"premium"},{"location":"reference_all/#longport.openapi.WarrantInfo.status","text":"Status","title":"status"},{"location":"reference_all/#longport.openapi.WarrantInfo.strike_price","text":"Strike price","title":"strike_price"},{"location":"reference_all/#longport.openapi.WarrantInfo.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longport.openapi.WarrantInfo.to_call_price","text":"Price interval from the call price","title":"to_call_price"},{"location":"reference_all/#longport.openapi.WarrantInfo.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longport.openapi.WarrantInfo.upper_strike_price","text":"Upper strike price","title":"upper_strike_price"},{"location":"reference_all/#longport.openapi.WarrantInfo.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longport.openapi.WarrantInfo.warrant_type","text":"Warrant type","title":"warrant_type"},{"location":"reference_all/#longport.openapi.WarrantQuote","text":"Quote of warrant","title":"WarrantQuote"},{"location":"reference_all/#longport.openapi.WarrantQuote.call_price","text":"Call price","title":"call_price"},{"location":"reference_all/#longport.openapi.WarrantQuote.category","text":"Warrant type","title":"category"},{"location":"reference_all/#longport.openapi.WarrantQuote.conversion_ratio","text":"Conversion ratio","title":"conversion_ratio"},{"location":"reference_all/#longport.openapi.WarrantQuote.expiry_date","text":"Exprity date","title":"expiry_date"},{"location":"reference_all/#longport.openapi.WarrantQuote.high","text":"High","title":"high"},{"location":"reference_all/#longport.openapi.WarrantQuote.implied_volatility","text":"Implied volatility","title":"implied_volatility"},{"location":"reference_all/#longport.openapi.WarrantQuote.last_done","text":"Latest price","title":"last_done"},{"location":"reference_all/#longport.openapi.WarrantQuote.last_trade_date","text":"Last tradalbe date","title":"last_trade_date"},{"location":"reference_all/#longport.openapi.WarrantQuote.low","text":"Low","title":"low"},{"location":"reference_all/#longport.openapi.WarrantQuote.lower_strike_price","text":"Lower bound price","title":"lower_strike_price"},{"location":"reference_all/#longport.openapi.WarrantQuote.open","text":"Open","title":"open"},{"location":"reference_all/#longport.openapi.WarrantQuote.outstanding_quantity","text":"Outstanding quantity","title":"outstanding_quantity"},{"location":"reference_all/#longport.openapi.WarrantQuote.outstanding_ratio","text":"Outstanding ratio","title":"outstanding_ratio"},{"location":"reference_all/#longport.openapi.WarrantQuote.prev_close","text":"Yesterday's close","title":"prev_close"},{"location":"reference_all/#longport.openapi.WarrantQuote.strike_price","text":"Strike price","title":"strike_price"},{"location":"reference_all/#longport.openapi.WarrantQuote.symbol","text":"Security code","title":"symbol"},{"location":"reference_all/#longport.openapi.WarrantQuote.timestamp","text":"Time of latest price","title":"timestamp"},{"location":"reference_all/#longport.openapi.WarrantQuote.trade_status","text":"Security trading status","title":"trade_status"},{"location":"reference_all/#longport.openapi.WarrantQuote.turnover","text":"Turnover","title":"turnover"},{"location":"reference_all/#longport.openapi.WarrantQuote.underlying_symbol","text":"Underlying security symbol of the warrant","title":"underlying_symbol"},{"location":"reference_all/#longport.openapi.WarrantQuote.upper_strike_price","text":"Upper bound price","title":"upper_strike_price"},{"location":"reference_all/#longport.openapi.WarrantQuote.volume","text":"Volume","title":"volume"},{"location":"reference_all/#longport.openapi.WarrantSortBy","text":"Warrant sort by","title":"WarrantSortBy"},{"location":"reference_all/#longport.openapi.WarrantSortBy.BalancePoint","text":"Bases: WarrantSortBy Breakeven point","title":"BalancePoint"},{"location":"reference_all/#longport.openapi.WarrantSortBy.CallPrice","text":"Bases: WarrantSortBy Call price","title":"CallPrice"},{"location":"reference_all/#longport.openapi.WarrantSortBy.ChangeRate","text":"Bases: WarrantSortBy Change rate","title":"ChangeRate"},{"location":"reference_all/#longport.openapi.WarrantSortBy.ChangeValue","text":"Bases: WarrantSortBy Change value","title":"ChangeValue"},{"location":"reference_all/#longport.openapi.WarrantSortBy.ConversionRatio","text":"Bases: WarrantSortBy Conversion ratio","title":"ConversionRatio"},{"location":"reference_all/#longport.openapi.WarrantSortBy.Delta","text":"Bases: WarrantSortBy Greek value delta","title":"Delta"},{"location":"reference_all/#longport.openapi.WarrantSortBy.EffectiveLeverage","text":"Bases: WarrantSortBy Effective leverage","title":"EffectiveLeverage"},{"location":"reference_all/#longport.openapi.WarrantSortBy.ExpiryDate","text":"Bases: WarrantSortBy Expiry date","title":"ExpiryDate"},{"location":"reference_all/#longport.openapi.WarrantSortBy.ImpliedVolatility","text":"Bases: WarrantSortBy Implied volatility","title":"ImpliedVolatility"},{"location":"reference_all/#longport.openapi.WarrantSortBy.ItmOtm","text":"Bases: WarrantSortBy In/out of the bound","title":"ItmOtm"},{"location":"reference_all/#longport.openapi.WarrantSortBy.LastDone","text":"Bases: WarrantSortBy LastDone","title":"LastDone"},{"location":"reference_all/#longport.openapi.WarrantSortBy.LeverageRatio","text":"Bases: WarrantSortBy Leverage ratio","title":"LeverageRatio"},{"location":"reference_all/#longport.openapi.WarrantSortBy.LowerStrikePrice","text":"Bases: WarrantSortBy Lower strike price","title":"LowerStrikePrice"},{"location":"reference_all/#longport.openapi.WarrantSortBy.OutstandingQuantity","text":"Bases: WarrantSortBy Outstanding quantity","title":"OutstandingQuantity"},{"location":"reference_all/#longport.openapi.WarrantSortBy.OutstandingRatio","text":"Bases: WarrantSortBy Outstanding ratio","title":"OutstandingRatio"},{"location":"reference_all/#longport.openapi.WarrantSortBy.Premium","text":"Bases: WarrantSortBy Premium","title":"Premium"},{"location":"reference_all/#longport.openapi.WarrantSortBy.Status","text":"Bases: WarrantSortBy Status","title":"Status"},{"location":"reference_all/#longport.openapi.WarrantSortBy.StrikePrice","text":"Bases: WarrantSortBy Strike price","title":"StrikePrice"},{"location":"reference_all/#longport.openapi.WarrantSortBy.ToCallPrice","text":"Bases: WarrantSortBy Price interval from the call price","title":"ToCallPrice"},{"location":"reference_all/#longport.openapi.WarrantSortBy.Turnover","text":"Bases: WarrantSortBy Turnover","title":"Turnover"},{"location":"reference_all/#longport.openapi.WarrantSortBy.UpperStrikePrice","text":"Bases: WarrantSortBy Upper strike price","title":"UpperStrikePrice"},{"location":"reference_all/#longport.openapi.WarrantSortBy.Volume","text":"Bases: WarrantSortBy Volume","title":"Volume"},{"location":"reference_all/#longport.openapi.WarrantStatus","text":"Warrant status","title":"WarrantStatus"},{"location":"reference_all/#longport.openapi.WarrantStatus.Normal","text":"Bases: WarrantStatus Normal","title":"Normal"},{"location":"reference_all/#longport.openapi.WarrantStatus.PrepareList","text":"Bases: WarrantStatus Prepare List","title":"PrepareList"},{"location":"reference_all/#longport.openapi.WarrantStatus.Suspend","text":"Bases: WarrantStatus Suspend","title":"Suspend"},{"location":"reference_all/#longport.openapi.WarrantType","text":"Warrant type","title":"WarrantType"},{"location":"reference_all/#longport.openapi.WarrantType.Bear","text":"Bases: WarrantType Bear","title":"Bear"},{"location":"reference_all/#longport.openapi.WarrantType.Bull","text":"Bases: WarrantType Bull","title":"Bull"},{"location":"reference_all/#longport.openapi.WarrantType.Call","text":"Bases: WarrantType Call","title":"Call"},{"location":"reference_all/#longport.openapi.WarrantType.Inline","text":"Bases: WarrantType Inline","title":"Inline"},{"location":"reference_all/#longport.openapi.WarrantType.Put","text":"Bases: WarrantType Put","title":"Put"},{"location":"reference_all/#longport.openapi.WarrantType.Unknown","text":"Bases: WarrantType Unknown","title":"Unknown"},{"location":"reference_all/#longport.openapi.WatchlistGroup","text":"","title":"WatchlistGroup"},{"location":"reference_all/#longport.openapi.WatchlistGroup.id","text":"Group id","title":"id"},{"location":"reference_all/#longport.openapi.WatchlistGroup.name","text":"Group name","title":"name"},{"location":"reference_all/#longport.openapi.WatchlistGroup.securities","text":"Securities","title":"securities"},{"location":"reference_all/#longport.openapi.WatchlistSecurity","text":"Watchlist security","title":"WatchlistSecurity"},{"location":"reference_all/#longport.openapi.WatchlistSecurity.market","text":"Market","title":"market"},{"location":"reference_all/#longport.openapi.WatchlistSecurity.name","text":"Security name","title":"name"},{"location":"reference_all/#longport.openapi.WatchlistSecurity.symbol","text":"Security symbol","title":"symbol"},{"location":"reference_all/#longport.openapi.WatchlistSecurity.watched_at","text":"Watched time","title":"watched_at"},{"location":"reference_all/#longport.openapi.WatchlistSecurity.watched_price","text":"Watched price","title":"watched_price"},{"location":"trade_context/","text":"TradeContext Trade context Parameters: Name Type Description Default config Config Configuration object required account_balance(currency=None) Get account balance Parameters: Name Type Description Default currency Optional [ str ] Currency None Returns: Type Description List [ AccountBalance ] Account list Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.account_balance() print(resp) cancel_order(order_id) Cancel order Parameters: Name Type Description Default order_id str Order ID required Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.cancel_order(\"709043056541253632\") cash_flow(start_at, end_at, business_type=None, symbol=None, page=None, size=None) Get cash flow Parameters: Name Type Description Default start_at datetime Start time required end_at datetime End time required business_type Optional [ Type [ BalanceType ]] Balance type None symbol Optional [ str ] Target security code None page Optional [ int ] Start page (Default: 1) None size Optional [ int ] Page size (Default: 50) None Returns: Type Description List [ CashFlow ] Cash flow list Examples: :: from datetime import datetime from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.cash_flow( start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) estimate_max_purchase_quantity(symbol, order_type, side, price=None, currency=None, order_id=None, fractional_shares=False) Estimating the maximum purchase quantity for Hong Kong and US stocks, warrants, and options Parameters: Name Type Description Default symbol str Security symbol required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order side required price Optional [ Decimal ] Estimated order price, None currency Optional [ str ] Settlement currency None order_id Optional [ str ] Order ID, required when estimating the maximum purchase quantity for a modified order None fractional_shares bool Get the maximum fractional share buying power False Returns: Type Description EstimateMaxPurchaseQuantityResponse Response Examples: :: from longport.openapi import TradeContext, Config, OrderType, OrderSide config = Config.from_env() ctx = TradeContext(config) resp = ctx.estimate_max_purchase_quantity( symbol = \"700.HK\", order_type = OrderType.LO, side = OrderSide.Buy, ) print(resp) fund_positions(symbols=None) Get fund positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by fund codes None Returns: Type Description FundPositionsResponse Fund positions Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.fund_positions() print(resp) history_executions(symbol=None, start_at=None, end_at=None) Get history executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code, example: 700.HK , AAPL.US None start_at Optional [ datetime ] Start time None end_at Optional [ datetime ] End time None Returns: Type Description List [ Execution ] Execution list Examples: :: from datetime import datetime from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_executions( symbol = \"700.HK\", start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) history_orders(symbol=None, status=None, side=None, market=None, start_at=None, end_at=None) Get history orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None start_at Optional [ datetime ] Start time None end_at Optional [ datetime ] End time None Returns: Type Description List [ Order ] Order list Examples: :: from datetime import datetime from longport.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp) margin_ratio(symbol) Get margin ratio Parameters: Name Type Description Default symbol str Security symbol required Returns: Type Description MarginRatio Margin ratio Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.margin_ratio(\"700.HK\") print(resp) order_detail(order_id) Get order detail Parameters: Name Type Description Default order id Order id required Returns: Type Description OrderDetail Order detail Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.order_detail(\"701276261045858304\") print(resp) replace_order(order_id, quantity, price=None, trigger_price=None, limit_offset=None, trailing_amount=None, trailing_percent=None, remark=None) Replace order Parameters: Name Type Description Default quantity Decimal Replaced quantity required price Optional [ Decimal ] Replaced price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Order Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None remark Optional [ str ] Remark (Maximum 64 characters) None Examples: :: from decimal import Decimal from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.replace_order( order_id = \"709043056541253632\", quantity = Decimal(100), price = Decimal(100), ) set_on_order_changed(callback) Set order changed callback, after receiving the order changed event, it will call back to this function. stock_positions(symbols=None) Get stock positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by stock codes None Returns: Type Description StockPositionsResponse Stock positions Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.stock_positions() print(resp) submit_order(symbol, order_type, side, submitted_quantity, time_in_force, submitted_price=None, trigger_price=None, limit_offset=None, trailing_amount=None, trailing_percent=None, expire_date=None, outside_rth=None, remark=None) Submit order Parameters: Name Type Description Default symbol str Security code required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order Side required submitted_quantity Decimal Submitted quantity required time_in_force Type [ TimeInForceType ] Time in force type required submitted_price Optional [ Decimal ] Submitted price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None expire_date Optional [ date ] Long term order expire date (Required when time_in_force is GoodTilDate ) None outside_rth Optional [ Type [ OutsideRTH ]] Enable or disable outside regular trading hours None remark Optional [ str ] Remark (Maximum 64 characters) None Returns: Type Description SubmitOrderResponse Response Examples: :: from decimal import Decimal from longport.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType config = Config.from_env() ctx = TradeContext(config) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(50), submitted_quantity = Decimal(200), time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp) subscribe(topics) Subscribe Parameters: Name Type Description Default topics List [ Type [ TopicType ]] Topic list required Examples: :: from time import sleep from decimal import Decimal from longport.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType, PushOrderChanged, TopicType def on_order_changed(event: PushOrderChanged): print(event) config = Config.from_env() ctx = TradeContext(config) ctx.set_on_order_changed(on_order_changed) ctx.subscribe([TopicType.Private]) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(50), submitted_quantity = Decimal(200), time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp) sleep(5) # waiting for push event today_executions(symbol=None, order_id=None) Get today executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None order_id Optional [ str ] Filter by Order ID None Returns: Type Description List [ Execution ] Execution list Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_executions(symbol = \"700.HK\") print(resp) today_orders(symbol=None, status=None, side=None, market=None, order_id=None) Get today orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None order_id Optional [ str ] Filter by order id None Returns: Type Description List [ Order ] Order list Examples: :: from longport.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, ) print(resp) unsubscribe(topics) Unsubscribe Parameters: Name Type Description Default topics List [ Type [ TopicType ]] Topic list required","title":"TradeContext"},{"location":"trade_context/#tradecontext","text":"Trade context Parameters: Name Type Description Default config Config Configuration object required","title":"TradeContext"},{"location":"trade_context/#longport.openapi.TradeContext.account_balance","text":"Get account balance Parameters: Name Type Description Default currency Optional [ str ] Currency None Returns: Type Description List [ AccountBalance ] Account list Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.account_balance() print(resp)","title":"account_balance"},{"location":"trade_context/#longport.openapi.TradeContext.cancel_order","text":"Cancel order Parameters: Name Type Description Default order_id str Order ID required Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.cancel_order(\"709043056541253632\")","title":"cancel_order"},{"location":"trade_context/#longport.openapi.TradeContext.cash_flow","text":"Get cash flow Parameters: Name Type Description Default start_at datetime Start time required end_at datetime End time required business_type Optional [ Type [ BalanceType ]] Balance type None symbol Optional [ str ] Target security code None page Optional [ int ] Start page (Default: 1) None size Optional [ int ] Page size (Default: 50) None Returns: Type Description List [ CashFlow ] Cash flow list Examples: :: from datetime import datetime from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.cash_flow( start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"cash_flow"},{"location":"trade_context/#longport.openapi.TradeContext.estimate_max_purchase_quantity","text":"Estimating the maximum purchase quantity for Hong Kong and US stocks, warrants, and options Parameters: Name Type Description Default symbol str Security symbol required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order side required price Optional [ Decimal ] Estimated order price, None currency Optional [ str ] Settlement currency None order_id Optional [ str ] Order ID, required when estimating the maximum purchase quantity for a modified order None fractional_shares bool Get the maximum fractional share buying power False Returns: Type Description EstimateMaxPurchaseQuantityResponse Response Examples: :: from longport.openapi import TradeContext, Config, OrderType, OrderSide config = Config.from_env() ctx = TradeContext(config) resp = ctx.estimate_max_purchase_quantity( symbol = \"700.HK\", order_type = OrderType.LO, side = OrderSide.Buy, ) print(resp)","title":"estimate_max_purchase_quantity"},{"location":"trade_context/#longport.openapi.TradeContext.fund_positions","text":"Get fund positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by fund codes None Returns: Type Description FundPositionsResponse Fund positions Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.fund_positions() print(resp)","title":"fund_positions"},{"location":"trade_context/#longport.openapi.TradeContext.history_executions","text":"Get history executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code, example: 700.HK , AAPL.US None start_at Optional [ datetime ] Start time None end_at Optional [ datetime ] End time None Returns: Type Description List [ Execution ] Execution list Examples: :: from datetime import datetime from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_executions( symbol = \"700.HK\", start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"history_executions"},{"location":"trade_context/#longport.openapi.TradeContext.history_orders","text":"Get history orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None start_at Optional [ datetime ] Start time None end_at Optional [ datetime ] End time None Returns: Type Description List [ Order ] Order list Examples: :: from datetime import datetime from longport.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.history_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, start_at = datetime(2022, 5, 9), end_at = datetime(2022, 5, 12), ) print(resp)","title":"history_orders"},{"location":"trade_context/#longport.openapi.TradeContext.margin_ratio","text":"Get margin ratio Parameters: Name Type Description Default symbol str Security symbol required Returns: Type Description MarginRatio Margin ratio Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.margin_ratio(\"700.HK\") print(resp)","title":"margin_ratio"},{"location":"trade_context/#longport.openapi.TradeContext.order_detail","text":"Get order detail Parameters: Name Type Description Default order id Order id required Returns: Type Description OrderDetail Order detail Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.order_detail(\"701276261045858304\") print(resp)","title":"order_detail"},{"location":"trade_context/#longport.openapi.TradeContext.replace_order","text":"Replace order Parameters: Name Type Description Default quantity Decimal Replaced quantity required price Optional [ Decimal ] Replaced price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Order Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None remark Optional [ str ] Remark (Maximum 64 characters) None Examples: :: from decimal import Decimal from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) ctx.replace_order( order_id = \"709043056541253632\", quantity = Decimal(100), price = Decimal(100), )","title":"replace_order"},{"location":"trade_context/#longport.openapi.TradeContext.set_on_order_changed","text":"Set order changed callback, after receiving the order changed event, it will call back to this function.","title":"set_on_order_changed"},{"location":"trade_context/#longport.openapi.TradeContext.stock_positions","text":"Get stock positions Parameters: Name Type Description Default symbols Optional [ List [ str ]] Filter by stock codes None Returns: Type Description StockPositionsResponse Stock positions Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.stock_positions() print(resp)","title":"stock_positions"},{"location":"trade_context/#longport.openapi.TradeContext.submit_order","text":"Submit order Parameters: Name Type Description Default symbol str Security code required order_type Type [ OrderType ] Order type required side Type [ OrderSide ] Order Side required submitted_quantity Decimal Submitted quantity required time_in_force Type [ TimeInForceType ] Time in force type required submitted_price Optional [ Decimal ] Submitted price None trigger_price Optional [ Decimal ] Trigger price ( LIT / MIT Required) None limit_offset Optional [ Decimal ] Limit offset amount ( TSLPAMT / TSLPPCT Required) None trailing_amount Optional [ Decimal ] Trailing amount ( TSLPAMT / TSMAMT Required) None trailing_percent Optional [ Decimal ] Trailing percent ( TSLPPCT / TSMAPCT Required) None expire_date Optional [ date ] Long term order expire date (Required when time_in_force is GoodTilDate ) None outside_rth Optional [ Type [ OutsideRTH ]] Enable or disable outside regular trading hours None remark Optional [ str ] Remark (Maximum 64 characters) None Returns: Type Description SubmitOrderResponse Response Examples: :: from decimal import Decimal from longport.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType config = Config.from_env() ctx = TradeContext(config) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(50), submitted_quantity = Decimal(200), time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp)","title":"submit_order"},{"location":"trade_context/#longport.openapi.TradeContext.subscribe","text":"Subscribe Parameters: Name Type Description Default topics List [ Type [ TopicType ]] Topic list required Examples: :: from time import sleep from decimal import Decimal from longport.openapi import TradeContext, Config, OrderSide, OrderType, TimeInForceType, PushOrderChanged, TopicType def on_order_changed(event: PushOrderChanged): print(event) config = Config.from_env() ctx = TradeContext(config) ctx.set_on_order_changed(on_order_changed) ctx.subscribe([TopicType.Private]) resp = ctx.submit_order( side = OrderSide.Buy, symbol = \"700.HK\", order_type = OrderType.LO, submitted_price = Decimal(50), submitted_quantity = Decimal(200), time_in_force = TimeInForceType.Day, remark = \"Hello from Python SDK\", ) print(resp) sleep(5) # waiting for push event","title":"subscribe"},{"location":"trade_context/#longport.openapi.TradeContext.today_executions","text":"Get today executions Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None order_id Optional [ str ] Filter by Order ID None Returns: Type Description List [ Execution ] Execution list Examples: :: from longport.openapi import TradeContext, Config config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_executions(symbol = \"700.HK\") print(resp)","title":"today_executions"},{"location":"trade_context/#longport.openapi.TradeContext.today_orders","text":"Get today orders Parameters: Name Type Description Default symbol Optional [ str ] Filter by security code None status Optional [ List [ Type [ OrderStatus ]]] Filter by order status None side Optional [ Type [ OrderSide ]] Filter by order side None market Optional [ Type [ Market ]] Filter by market type None order_id Optional [ str ] Filter by order id None Returns: Type Description List [ Order ] Order list Examples: :: from longport.openapi import TradeContext, Config, OrderStatus, OrderSide, Market config = Config.from_env() ctx = TradeContext(config) resp = ctx.today_orders( symbol = \"700.HK\", status = [OrderStatus.Filled, OrderStatus.New], side = OrderSide.Buy, market = Market.HK, ) print(resp)","title":"today_orders"},{"location":"trade_context/#longport.openapi.TradeContext.unsubscribe","text":"Unsubscribe Parameters: Name Type Description Default topics List [ Type [ TopicType ]] Topic list required","title":"unsubscribe"}]}