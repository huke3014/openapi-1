// prettier-ignore
/* eslint-disable */
// @ts-nocheck
/* auto-generated by NAPI-RS */

const { createRequire } = require('node:module')
require = createRequire(__filename)

const { readFileSync } = require('node:fs')
let nativeBinding = null
const loadErrors = []

const isMusl = () => {
  let musl = false
  if (process.platform === 'linux') {
    musl = isMuslFromFilesystem()
    if (musl === null) {
      musl = isMuslFromReport()
    }
    if (musl === null) {
      musl = isMuslFromChildProcess()
    }
  }
  return musl
}

const isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-')

const isMuslFromFilesystem = () => {
  try {
    return readFileSync('/usr/bin/ldd', 'utf-8').includes('musl')
  } catch {
    return null
  }
}

const isMuslFromReport = () => {
  let report = null
  if (typeof process.report?.getReport === 'function') {
    process.report.excludeNetwork = true
    report = process.report.getReport()
  }
  if (!report) {
    return null
  }
  if (report.header && report.header.glibcVersionRuntime) {
    return false
  }
  if (Array.isArray(report.sharedObjects)) {
    if (report.sharedObjects.some(isFileMusl)) {
      return true
    }
  }
  return false
}

const isMuslFromChildProcess = () => {
  try {
    return require('child_process').execSync('ldd --version', { encoding: 'utf8' }).includes('musl')
  } catch (e) {
    // If we reach this case, we don't know if the system is musl or not, so is better to just fallback to false
    return false
  }
}

function requireNative() {
  if (process.env.NAPI_RS_NATIVE_LIBRARY_PATH) {
    try {
      nativeBinding = require(process.env.NAPI_RS_NATIVE_LIBRARY_PATH);
    } catch (err) {
      loadErrors.push(err)
    }
  } else if (process.platform === 'android') {
    if (process.arch === 'arm64') {
      try {
        return require('./longport.android-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-android-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./longport.android-arm-eabi.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-android-arm-eabi')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Android ${process.arch}`))
    }
  } else if (process.platform === 'win32') {
    if (process.arch === 'x64') {
      try {
        return require('./longport.win32-x64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-win32-x64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'ia32') {
      try {
        return require('./longport.win32-ia32-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-win32-ia32-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./longport.win32-arm64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-win32-arm64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Windows: ${process.arch}`))
    }
  } else if (process.platform === 'darwin') {
    try {
      return require('./longport.darwin-universal.node')
    } catch (e) {
      loadErrors.push(e)
    }
    try {
      return require('longport-darwin-universal')
    } catch (e) {
      loadErrors.push(e)
    }
    if (process.arch === 'x64') {
      try {
        return require('./longport.darwin-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-darwin-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./longport.darwin-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-darwin-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on macOS: ${process.arch}`))
    }
  } else if (process.platform === 'freebsd') {
    if (process.arch === 'x64') {
      try {
        return require('./longport.freebsd-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-freebsd-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./longport.freebsd-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-freebsd-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on FreeBSD: ${process.arch}`))
    }
  } else if (process.platform === 'linux') {
    if (process.arch === 'x64') {
      if (isMusl()) {
        try {
          return require('./longport.linux-x64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('longport-linux-x64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./longport.linux-x64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('longport-linux-x64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm64') {
      if (isMusl()) {
        try {
          return require('./longport.linux-arm64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('longport-linux-arm64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./longport.linux-arm64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('longport-linux-arm64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm') {
      if (isMusl()) {
        try {
          return require('./longport.linux-arm-musleabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('longport-linux-arm-musleabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./longport.linux-arm-gnueabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('longport-linux-arm-gnueabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'riscv64') {
      if (isMusl()) {
        try {
          return require('./longport.linux-riscv64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('longport-linux-riscv64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./longport.linux-riscv64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('longport-linux-riscv64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'ppc64') {
      try {
        return require('./longport.linux-ppc64-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-linux-ppc64-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 's390x') {
      try {
        return require('./longport.linux-s390x-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-linux-s390x-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Linux: ${process.arch}`))
    }
  } else if (process.platform === 'openharmony') {
    if (process.arch === 'arm64') {
      try {
        return require('./longport.linux-arm64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-linux-arm64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'x64') {
      try {
        return require('./longport.linux-x64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-linux-x64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./longport.linux-arm-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('longport-linux-arm-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on OpenHarmony: ${process.arch}`))
    }
  } else {
    loadErrors.push(new Error(`Unsupported OS: ${process.platform}, architecture: ${process.arch}`))
  }
}

nativeBinding = requireNative()

if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
  try {
    nativeBinding = require('./longport.wasi.cjs')
  } catch (err) {
    if (process.env.NAPI_RS_FORCE_WASI) {
      loadErrors.push(err)
    }
  }
  if (!nativeBinding) {
    try {
      nativeBinding = require('longport-wasm32-wasi')
    } catch (err) {
      if (process.env.NAPI_RS_FORCE_WASI) {
        loadErrors.push(err)
      }
    }
  }
}

if (!nativeBinding) {
  if (loadErrors.length > 0) {
    throw new Error(
      `Cannot find native binding. ` +
        `npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828). ` +
        'Please try `npm i` again after removing both package-lock.json and node_modules directory.',
      { cause: loadErrors }
    )
  }
  throw new Error(`Failed to load native binding`)
}

module.exports = nativeBinding
module.exports.AccountBalance = nativeBinding.AccountBalance
module.exports.Brokers = nativeBinding.Brokers
module.exports.Candlestick = nativeBinding.Candlestick
module.exports.CapitalDistribution = nativeBinding.CapitalDistribution
module.exports.CapitalDistributionResponse = nativeBinding.CapitalDistributionResponse
module.exports.CapitalFlowLine = nativeBinding.CapitalFlowLine
module.exports.CashFlow = nativeBinding.CashFlow
module.exports.CashInfo = nativeBinding.CashInfo
module.exports.Config = nativeBinding.Config
module.exports.Decimal = nativeBinding.Decimal
module.exports.Depth = nativeBinding.Depth
module.exports.EstimateMaxPurchaseQuantityResponse = nativeBinding.EstimateMaxPurchaseQuantityResponse
module.exports.Execution = nativeBinding.Execution
module.exports.FrozenTransactionFee = nativeBinding.FrozenTransactionFee
module.exports.FundPosition = nativeBinding.FundPosition
module.exports.FundPositionChannel = nativeBinding.FundPositionChannel
module.exports.FundPositionsResponse = nativeBinding.FundPositionsResponse
module.exports.HistoryMarketTemperatureResponse = nativeBinding.HistoryMarketTemperatureResponse
module.exports.HttpClient = nativeBinding.HttpClient
module.exports.IntradayLine = nativeBinding.IntradayLine
module.exports.IssuerInfo = nativeBinding.IssuerInfo
module.exports.MarginRatio = nativeBinding.MarginRatio
module.exports.MarketTemperature = nativeBinding.MarketTemperature
module.exports.MarketTradingDays = nativeBinding.MarketTradingDays
module.exports.MarketTradingSession = nativeBinding.MarketTradingSession
module.exports.NaiveDate = nativeBinding.NaiveDate
module.exports.NaiveDatetime = nativeBinding.NaiveDatetime
module.exports.OptionQuote = nativeBinding.OptionQuote
module.exports.Order = nativeBinding.Order
module.exports.OrderChargeDetail = nativeBinding.OrderChargeDetail
module.exports.OrderChargeFee = nativeBinding.OrderChargeFee
module.exports.OrderChargeItem = nativeBinding.OrderChargeItem
module.exports.OrderDetail = nativeBinding.OrderDetail
module.exports.OrderHistoryDetail = nativeBinding.OrderHistoryDetail
module.exports.ParticipantInfo = nativeBinding.ParticipantInfo
module.exports.PrePostQuote = nativeBinding.PrePostQuote
module.exports.PushBrokers = nativeBinding.PushBrokers
module.exports.PushBrokersEvent = nativeBinding.PushBrokersEvent
module.exports.PushCandlestick = nativeBinding.PushCandlestick
module.exports.PushCandlestickEvent = nativeBinding.PushCandlestickEvent
module.exports.PushDepth = nativeBinding.PushDepth
module.exports.PushDepthEvent = nativeBinding.PushDepthEvent
module.exports.PushOrderChanged = nativeBinding.PushOrderChanged
module.exports.PushQuote = nativeBinding.PushQuote
module.exports.PushQuoteEvent = nativeBinding.PushQuoteEvent
module.exports.PushTrades = nativeBinding.PushTrades
module.exports.PushTradesEvent = nativeBinding.PushTradesEvent
module.exports.QuoteContext = nativeBinding.QuoteContext
module.exports.QuotePackageDetail = nativeBinding.QuotePackageDetail
module.exports.RealtimeQuote = nativeBinding.RealtimeQuote
module.exports.Security = nativeBinding.Security
module.exports.SecurityBrokers = nativeBinding.SecurityBrokers
module.exports.SecurityCalcIndex = nativeBinding.SecurityCalcIndex
module.exports.SecurityDepth = nativeBinding.SecurityDepth
module.exports.SecurityQuote = nativeBinding.SecurityQuote
module.exports.SecurityStaticInfo = nativeBinding.SecurityStaticInfo
module.exports.StockPosition = nativeBinding.StockPosition
module.exports.StockPositionChannel = nativeBinding.StockPositionChannel
module.exports.StockPositionsResponse = nativeBinding.StockPositionsResponse
module.exports.StrikePriceInfo = nativeBinding.StrikePriceInfo
module.exports.SubmitOrderResponse = nativeBinding.SubmitOrderResponse
module.exports.Subscription = nativeBinding.Subscription
module.exports.Time = nativeBinding.Time
module.exports.Trade = nativeBinding.Trade
module.exports.TradeContext = nativeBinding.TradeContext
module.exports.TradingSessionInfo = nativeBinding.TradingSessionInfo
module.exports.WarrantInfo = nativeBinding.WarrantInfo
module.exports.WarrantQuote = nativeBinding.WarrantQuote
module.exports.WatchlistGroup = nativeBinding.WatchlistGroup
module.exports.WatchlistSecurity = nativeBinding.WatchlistSecurity
module.exports.AdjustType = nativeBinding.AdjustType
module.exports.BalanceType = nativeBinding.BalanceType
module.exports.CalcIndex = nativeBinding.CalcIndex
module.exports.CashFlowDirection = nativeBinding.CashFlowDirection
module.exports.ChargeCategoryCode = nativeBinding.ChargeCategoryCode
module.exports.CommissionFreeStatus = nativeBinding.CommissionFreeStatus
module.exports.DeductionStatus = nativeBinding.DeductionStatus
module.exports.DerivativeType = nativeBinding.DerivativeType
module.exports.FilterWarrantExpiryDate = nativeBinding.FilterWarrantExpiryDate
module.exports.FilterWarrantInOutBoundsType = nativeBinding.FilterWarrantInOutBoundsType
module.exports.Granularity = nativeBinding.Granularity
module.exports.Language = nativeBinding.Language
module.exports.Market = nativeBinding.Market
module.exports.OptionDirection = nativeBinding.OptionDirection
module.exports.OptionType = nativeBinding.OptionType
module.exports.OrderSide = nativeBinding.OrderSide
module.exports.OrderStatus = nativeBinding.OrderStatus
module.exports.OrderTag = nativeBinding.OrderTag
module.exports.OrderType = nativeBinding.OrderType
module.exports.OutsideRTH = nativeBinding.OutsideRTH
module.exports.Period = nativeBinding.Period
module.exports.PushCandlestickMode = nativeBinding.PushCandlestickMode
module.exports.SecuritiesUpdateMode = nativeBinding.SecuritiesUpdateMode
module.exports.SecurityBoard = nativeBinding.SecurityBoard
module.exports.SecurityListCategory = nativeBinding.SecurityListCategory
module.exports.SortOrderType = nativeBinding.SortOrderType
module.exports.SubType = nativeBinding.SubType
module.exports.TimeInForceType = nativeBinding.TimeInForceType
module.exports.TopicType = nativeBinding.TopicType
module.exports.TradeDirection = nativeBinding.TradeDirection
module.exports.TradeSession = nativeBinding.TradeSession
module.exports.TradeSessions = nativeBinding.TradeSessions
module.exports.TradeStatus = nativeBinding.TradeStatus
module.exports.TriggerStatus = nativeBinding.TriggerStatus
module.exports.WarrantSortBy = nativeBinding.WarrantSortBy
module.exports.WarrantStatus = nativeBinding.WarrantStatus
module.exports.WarrantType = nativeBinding.WarrantType
