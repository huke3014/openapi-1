/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Configuration parameters */
export interface ConfigParams {
  /** App Key */
  appKey: string
  /** App Secret */
  appSecret: string
  /** Access Token */
  accessToken: string
  /** HTTP API url (default: "https://openapi.longportapp.com") */
  httpUrl?: string
  /**
   * Websocket url for quote API (default:
   * "wss://openapi-quote.longportapp.com/v2")
   */
  quoteWsUrl?: string
  /**
   * Websocket url for trade API (default:
   * "wss://openapi-trade.longportapp.com/v2")
   */
  tradeWsUrl?: string
  /** Language identifier (default: Language.EN) */
  language?: Language
  /** Enable overnight (default: false) */
  enableOvernight?: boolean
  /** Push candlesticks mode (default: PushCandlestickMode.Realtime) */
  pushCandlestickMode?: PushCandlestickMode
  /**
   * Enable printing the opened quote packages when connected to the server
   * (default: true)
   */
  enablePrintQuotePackages: boolean
  /** Set the path of the log files (Default: `no logs`) */
  logPath?: string
}
/** An request to create a watchlist group */
export interface CreateWatchlistGroup {
  /** Group name */
  name: string
  /** Securities */
  securities?: Array<string>
}
/** An request to delete a watchlist group */
export interface DeleteWatchlistGroup {
  /** Group id */
  id: number
  /** Move securities in this group to the default group */
  purge: boolean
}
/** An request to update a watchlist group */
export interface UpdateWatchlistGroup {
  /** Group id */
  id: number
  /** Group name */
  name?: string
  /** Securities */
  securities?: Array<string>
  /** Securities Update mode */
  mode: SecuritiesUpdateMode
}
/** Derivative type */
export const enum DerivativeType {
  /** US stock options */
  Option = 0,
  /** HK warrants */
  Warrant = 1
}
export const enum TradeStatus {
  /** Normal */
  Normal = 0,
  /** Suspension */
  Halted = 1,
  /** Delisted */
  Delisted = 2,
  /** Fuse */
  Fuse = 3,
  /** Prepare List */
  PrepareList = 4,
  /** Code Moved */
  CodeMoved = 5,
  /** To Be Opened */
  ToBeOpened = 6,
  /** Split Stock Halts */
  SplitStockHalts = 7,
  /** Expired */
  Expired = 8,
  /** Warrant To BeListed */
  WarrantPrepareList = 9,
  /** Warrant To BeListed */
  Suspend = 10
}
/** Trade session */
export const enum TradeSession {
  /** Trading */
  Normal = 0,
  /** Pre-Trading */
  Pre = 1,
  /** Post-Trading */
  Post = 2,
  /** Overnight-Trading */
  Overnight = 3
}
/** Quote type of subscription */
export const enum SubType {
  /** Quote */
  Quote = 0,
  /** Depth */
  Depth = 1,
  /** Brokers */
  Brokers = 2,
  /** Trade */
  Trade = 3
}
/** Trade direction */
export const enum TradeDirection {
  /** Neutral */
  Neutral = 0,
  /** Down */
  Down = 1,
  /** Up */
  Up = 2
}
/** Option type */
export const enum OptionType {
  /** Unknown */
  Unknown = 0,
  /** American */
  American = 1,
  /** Europe */
  Europe = 2
}
/** Option direction */
export const enum OptionDirection {
  /** Unknown */
  Unknown = 0,
  /** Put */
  Put = 1,
  /** Call */
  Call = 2
}
/** Warrant type */
export const enum WarrantType {
  /** Unknown */
  Unknown = 0,
  /** Call */
  Call = 1,
  /** Put */
  Put = 2,
  /** Bull */
  Bull = 3,
  /** Bear */
  Bear = 4,
  /** Inline */
  Inline = 5
}
/** Candlestick period */
export const enum Period {
  /** Unknown */
  Unknown = 0,
  /** One Minute */
  Min_1 = 1,
  /** Two Minutes */
  Min_2 = 2,
  /** Three Minutes */
  Min_3 = 3,
  /** Five Minutes */
  Min_5 = 4,
  /** Ten Minutes */
  Min_10 = 5,
  /** Fifteen Minutes */
  Min_15 = 6,
  /** Twenty Minutes */
  Min_20 = 7,
  /** Thirty Minutes */
  Min_30 = 8,
  /** Forty-Five Minutes */
  Min_45 = 9,
  /** One Hour */
  Min_60 = 10,
  /** Two Hours */
  Min_120 = 11,
  /** Three Hours */
  Min_180 = 12,
  /** Four Hours */
  Min_240 = 13,
  /** Daily */
  Day = 14,
  /** Weekly */
  Week = 15,
  /** Monthly */
  Month = 16,
  /** Quarterly */
  Quarter = 17,
  /** Yearly */
  Year = 18
}
/** Candlestick adjustment type */
export const enum AdjustType {
  /** Actual */
  NoAdjust = 0,
  /** Adjust forward */
  ForwardAdjust = 1
}
/** Security board */
export const enum SecurityBoard {
  /** Unknown */
  Unknown = 0,
  /** US Main Board */
  USMain = 1,
  /** US Pink Board */
  USPink = 2,
  /** Dow Jones Industrial Average */
  USDJI = 3,
  /** Nasdsaq Index */
  USNSDQ = 4,
  /** US Industry Board */
  USSector = 5,
  /** US Option */
  USOption = 6,
  /** US Sepecial Option */
  USOptionS = 7,
  /** Hong Kong Equity Securities */
  HKEquity = 8,
  /** HK PreIPO Security */
  HKPreIPO = 9,
  /** HK Warrant */
  HKWarrant = 10,
  /** Hang Seng Index */
  HKHS = 11,
  /** HK Industry Board */
  HKSector = 12,
  /** SH Main Board(Connect) */
  SHMainConnect = 13,
  /** SH Main Board(Non Connect) */
  SHMainNonConnect = 14,
  /** SH Science and Technology Innovation Board */
  SHSTAR = 15,
  /** CN Index */
  CNIX = 16,
  /** CN Industry Board */
  CNSector = 17,
  /** SZ Main Board(Connect) */
  SZMainConnect = 18,
  /** SZ Main Board(Non Connect) */
  SZMainNonConnect = 19,
  /** SZ Gem Board(Connect) */
  SZGEMConnect = 20,
  /** SZ Gem Board(Non Connect) */
  SZGEMNonConnect = 21,
  /** SG Main Board */
  SGMain = 22,
  /** Singapore Straits Index */
  STI = 23,
  /** SG Industry Board */
  SGSector = 24
}
/** Sort order type */
export const enum SortOrderType {
  /** Ascending */
  Ascending = 0,
  /** Descending */
  Descending = 1
}
/** Warrant sort by */
export const enum WarrantSortBy {
  /** Last done */
  LastDone = 0,
  /** Change rate */
  ChangeRate = 1,
  /** Change value */
  ChangeValue = 2,
  /** Volume */
  Volume = 3,
  /** Turnover */
  Turnover = 4,
  /** Expiry date */
  ExpiryDate = 5,
  /** Strike price */
  StrikePrice = 6,
  /** Upper strike price */
  UpperStrikePrice = 7,
  /** Lower strike price */
  LowerStrikePrice = 8,
  /** Outstanding quantity */
  OutstandingQuantity = 9,
  /** Outstanding ratio */
  OutstandingRatio = 10,
  /** Premium */
  Premium = 11,
  /** In/out of the bound */
  ItmOtm = 12,
  /** Implied volatility */
  ImpliedVolatility = 13,
  /** Greek value delta */
  Delta = 14,
  /** Call price */
  CallPrice = 15,
  /** Price interval from the call price */
  ToCallPrice = 16,
  /** Effective leverage */
  EffectiveLeverage = 17,
  /** Leverage ratio */
  LeverageRatio = 18,
  /** Conversion ratio */
  ConversionRatio = 19,
  /** Breakeven point */
  BalancePoint = 20,
  /** Status */
  Status = 21
}
/** Filter warrant expiry date type */
export const enum FilterWarrantExpiryDate {
  /** Less than 3 months */
  LT_3 = 0,
  /** 3 - 6 months */
  Between_3_6 = 1,
  /** 6 - 12 months */
  Between_6_12 = 2,
  /** Greater than 12 months */
  GT_12 = 3
}
/** Filter warrant in/out of the bounds type */
export const enum FilterWarrantInOutBoundsType {
  /** In bounds */
  In = 0,
  /** Out bounds */
  Out = 1
}
/** Warrant status */
export const enum WarrantStatus {
  /** Suspend */
  Suspend = 0,
  /** Prepare List */
  PrepareList = 1,
  /** Normal */
  Normal = 2
}
/** Securities update mode */
export const enum SecuritiesUpdateMode {
  /** Add securities */
  Add = 0,
  /** Remove securities */
  Remove = 1,
  /** Replace securities */
  Replace = 2
}
export const enum CalcIndex {
  /** Latest price */
  LastDone = 0,
  /** Change value */
  ChangeValue = 1,
  /** Change rate */
  ChangeRate = 2,
  /** Volume */
  Volume = 3,
  /** Turnover */
  Turnover = 4,
  /** Year-to-date change ratio */
  YtdChangeRate = 5,
  /** Turnover rate */
  TurnoverRate = 6,
  /** Total market value */
  TotalMarketValue = 7,
  /** Capital flow */
  CapitalFlow = 8,
  /** Amplitude */
  Amplitude = 9,
  /** Volume ratio */
  VolumeRatio = 10,
  /** PE (TTM) */
  PeTtmRatio = 11,
  /** PB */
  PbRatio = 12,
  /** Dividend ratio (TTM) */
  DividendRatioTtm = 13,
  /** Five days change ratio */
  FiveDayChangeRate = 14,
  /** Ten days change ratio */
  TenDayChangeRate = 15,
  /** Half year change ratio */
  HalfYearChangeRate = 16,
  /** Five minutes change ratio */
  FiveMinutesChangeRate = 17,
  /** Expiry date */
  ExpiryDate = 18,
  /** Strike price */
  StrikePrice = 19,
  /** Upper bound price */
  UpperStrikePrice = 20,
  /** Lower bound price */
  LowerStrikePrice = 21,
  /** Outstanding quantity */
  OutstandingQty = 22,
  /** Outstanding ratio */
  OutstandingRatio = 23,
  /** Premium */
  Premium = 24,
  /** In/out of the bound */
  ItmOtm = 25,
  /** Implied volatility */
  ImpliedVolatility = 26,
  /** Warrant delta */
  WarrantDelta = 27,
  /** Call price */
  CallPrice = 28,
  /** Price interval from the call price */
  ToCallPrice = 29,
  /** Effective leverage */
  EffectiveLeverage = 30,
  /** Leverage ratio */
  LeverageRatio = 31,
  /** Conversion ratio */
  ConversionRatio = 32,
  /** Breakeven point */
  BalancePoint = 33,
  /** Open interest */
  OpenInterest = 34,
  /** Delta */
  Delta = 35,
  /** Gamma */
  Gamma = 36,
  /** Theta */
  Theta = 37,
  /** Vega */
  Vega = 38,
  /** Rho */
  Rho = 39
}
/** Security list category */
export const enum SecurityListCategory {
  /** Overnight */
  Overnight = 0
}
/** Trade sessions */
export const enum TradeSessions {
  /** Normal trade session */
  Normal = 0,
  /** All trade sessions */
  All = 1
}
/** Options for get cash flow request */
export interface EstimateMaxPurchaseQuantityOptions {
  symbol: string
  orderType: OrderType
  side: OrderSide
  price?: Decimal
  currency?: string
  orderId?: string
  fractionalShares: boolean
}
/** Options for get cash flow request */
export interface GetCashFlowOptions {
  /** Start time */
  startAt: Date
  /** End time */
  endAt: Date
  /** Business type */
  businessType?: BalanceType
  /** Security symbol */
  symbol?: string
  /** Page number */
  page?: number
  /** Page size */
  size?: number
}
/** Options for get histroy executions request */
export interface GetHistoryExecutionsOptions {
  /** Security symbol */
  symbol?: string
  /** Start time */
  startAt?: Date
  /** End time */
  endAt?: Date
}
/** Options for get histroy orders request */
export interface GetHistoryOrdersOptions {
  /** Security symbol */
  symbol?: string
  /** Order status */
  status?: Array<OrderStatus>
  /** Order side */
  side?: OrderSide
  /** Market */
  market?: Market
  /** Start time */
  startAt?: Date
  /** End time */
  endAt?: Date
}
/** Options for get today executions request */
export interface GetTodayExecutionsOptions {
  /** Security symbol */
  symbol?: string
  /** Order id */
  orderId?: string
}
/** Options for get today orders request */
export interface GetTodayOrdersOptions {
  /** Security symbol */
  symbol?: string
  /** Order status */
  status?: Array<OrderStatus>
  /** Order side */
  side?: OrderSide
  /** Market */
  market?: Market
  /** Order id */
  orderId?: string
}
/** Options for replace order request */
export interface ReplaceOrderOptions {
  /** Order id */
  orderId: string
  /** Replaced quantity */
  quantity: Decimal
  /** Replaced price */
  price?: Decimal
  /** Trigger price (`LIT` / `MIT` Order Required) */
  triggerPrice?: Decimal
  /** Limit offset amount (`TSLPAMT` / `TSLPPCT` Required) */
  limitOffset?: Decimal
  /** Trailing amount (`TSLPAMT` / `TSMAMT` Required) */
  trailingAmount?: Decimal
  /** Trailing percent (`TSLPPCT` / `TSMAPCT` Required) */
  trailingPercent?: Decimal
  /** Remark (Maximum 64 characters) */
  remark?: string
}
/** Options for submit order request */
export interface SubmitOrderOptions {
  /** Security code */
  symbol: string
  /** Order type */
  orderType: OrderType
  /** Order side */
  side: OrderSide
  /** Submitted quantity */
  submittedQuantity: Decimal
  /** Time in force type */
  timeInForce: TimeInForceType
  /** Submitted price */
  submittedPrice?: Decimal
  /** Trigger price (`LIT` / `MIT` Required) */
  triggerPrice?: Decimal
  /** Limit offset amount (`TSLPAMT` / `TSLPPCT` Required) */
  limitOffset?: Decimal
  /** Trailing amount (`TSLPAMT` / `TSMAMT` Required) */
  trailingAmount?: Decimal
  /** Trailing percent (`TSLPPCT` / `TSMAPCT` Required) */
  trailingPercent?: Decimal
  /**
   * Long term order expire date (Required when `time_in_force` is
   * `GoodTilDate`)
   */
  expireDate?: NaiveDate
  /** Enable or disable outside regular trading hours */
  outsideRth?: OutsideRTH
  /** Remark (Maximum 64 characters) */
  remark?: string
}
/** Topic type */
export const enum TopicType {
  /** Private notification for trade */
  Private = 0
}
export const enum OrderStatus {
  /** Unknown */
  Unknown = 0,
  /** Not reported */
  NotReported = 1,
  /** Not reported (Replaced Order) */
  ReplacedNotReported = 2,
  /** Not reported (Protected Order) */
  ProtectedNotReported = 3,
  /** Not reported (Conditional Order) */
  VarietiesNotReported = 4,
  /** Filled */
  Filled = 5,
  /** Wait To New */
  WaitToNew = 6,
  /** New */
  New = 7,
  /** Wait To Replace */
  WaitToReplace = 8,
  /** Pending Replace */
  PendingReplace = 9,
  /** Replaced */
  Replaced = 10,
  /** Partial Filled */
  PartialFilled = 11,
  /** Wait To Cancel */
  WaitToCancel = 12,
  /** Pending Cancel */
  PendingCancel = 13,
  /** Rejected */
  Rejected = 14,
  /** Canceled */
  Canceled = 15,
  /** Expired */
  Expired = 16,
  /** Partial Withdrawal */
  PartialWithdrawal = 17
}
export const enum OrderSide {
  /** Unknown */
  Unknown = 0,
  /** Buy */
  Buy = 1,
  /** Sell */
  Sell = 2
}
export const enum OrderType {
  /** Unknown */
  Unknown = 0,
  /** Limit Order */
  LO = 1,
  /** Enhanced Limit Order */
  ELO = 2,
  /** Market Order */
  MO = 3,
  /** At-auction Order */
  AO = 4,
  /** At-auction Limit Order */
  ALO = 5,
  /** Odd Lots */
  ODD = 6,
  /** Limit If Touched */
  LIT = 7,
  /** Market If Touched */
  MIT = 8,
  /** Trailing Limit If Touched (Trailing Amount) */
  TSLPAMT = 9,
  /** Trailing Limit If Touched (Trailing Percent) */
  TSLPPCT = 10,
  /** Trailing Market If Touched (Trailing Amount) */
  TSMAMT = 11,
  /** Trailing Market If Touched (Trailing Percent) */
  TSMPCT = 12,
  /** Special Limit Order */
  SLO = 13
}
/** Order tag */
export const enum OrderTag {
  /** Unknown */
  Unknown = 0,
  /** Normal Order */
  Normal = 1,
  /** Long term Order */
  LongTerm = 2,
  /** Grey Order */
  Grey = 3,
  /** Force Selling */
  MarginCall = 4,
  /** OTC */
  Offline = 5,
  /** Option Exercise Long */
  Creditor = 6,
  /** Option Exercise Short */
  Debtor = 7,
  /** Wavier Of Option Exercise */
  NonExercise = 8,
  /** Trade Allocation */
  AllocatedSub = 9
}
/** Time in force type */
export const enum TimeInForceType {
  /** Unknown */
  Unknown = 0,
  /** Day Order */
  Day = 1,
  /** Good Til Canceled Order */
  GoodTilCanceled = 2,
  /** Good Til Date Order */
  GoodTilDate = 3
}
/** Trigger status */
export const enum TriggerStatus {
  /** Unknown */
  Unknown = 0,
  /** Deactive */
  Deactive = 1,
  /** Active */
  Active = 2,
  /** Released */
  Released = 3
}
/** Enable or disable outside regular trading hours */
export const enum OutsideRTH {
  /** Unknown */
  Unknown = 0,
  /** Regular trading hour only */
  RTHOnly = 1,
  /** Any time */
  AnyTime = 2,
  /** Overnight */
  Overnight = 3
}
/** Commission-free Status */
export const enum CommissionFreeStatus {
  /** Unknown */
  Unknown = 0,
  /** None */
  None = 1,
  /** Commission-free amount to be calculated */
  Calculated = 2,
  /** Pending commission-free */
  Pending = 3,
  /** Commission-free applied */
  Ready = 4
}
/** Deduction status */
export const enum DeductionStatus {
  /** Unknown */
  Unknown = 0,
  /** Pending Settlement */
  None = 1,
  /** Settled with no data */
  NoData = 2,
  /** Settled and pending distribution */
  Pending = 3,
  /** Settled and distributed */
  Done = 4
}
/** Charge category code */
export const enum ChargeCategoryCode {
  /** Unknown */
  Unknown = 0,
  /** Broker */
  Broker = 1,
  /** Third */
  Third = 2
}
export const enum BalanceType {
  /** Unknown */
  Unknown = 0,
  /** Cash */
  Cash = 1,
  /** Stock */
  Stock = 2,
  /** Fund */
  Fund = 3
}
export const enum CashFlowDirection {
  /** Unknown */
  Unknown = 0,
  /** Out */
  Out = 1,
  /** In */
  In = 2
}
export const enum Market {
  /** Unknown */
  Unknown = 0,
  /** US market */
  US = 1,
  /** HK market */
  HK = 2,
  /** CN market */
  CN = 3,
  /** SG market */
  SG = 4
}
export const enum Language {
  /** zh-CN */
  ZH_CN = 0,
  /** zh-HK */
  ZH_HK = 1,
  /** en */
  EN = 2
}
export const enum PushCandlestickMode {
  /** Realtime mode */
  Realtime = 0,
  /** Confirmed mode */
  Confirmed = 1
}
/** Configuration for LongPort sdk */
export class Config {
  /** Create a new `Config` */
  constructor(params: ConfigParams)
  /**
   * Create a new `Config` from the given environment variables
   *
   * It first gets the environment variables from the `.env` file in the
   * current directory.
   *
   * # Variables
   *
   * - `LONGPORT_APP_KEY` - App key
   * - `LONGPORT_APP_SECRET` - App secret
   * - `LONGPORT_ACCESS_TOKEN` - Access token
   * - `LONGPORT_HTTP_URL` - HTTP endpoint url
   * - `LONGPORT_QUOTE_WS_URL` - Quote websocket endpoint url
   * - `LONGPORT_TRADE_WS_URL` - Trade websocket endpoint url
   * - `LONGPORT_ENABLE_OVERNIGHT` - Enable overnight quote, `true` or
   *   `false` (Default: `false`)
   * - `LONGPORT_PUSH_CANDLESTICK_MODE` - `realtime` or `confirmed` (Default:
   *   `realtime`)
   * - `LONGPORT_PRINT_QUOTE_PACKAGES` - Print quote packages when connected,
   *   `true` or `false` (Default: `true`)
   */
  static fromEnv(): Config
  /**
   * Gets a new `access_token`
   *
   * `expired_at` - The expiration time of the access token, defaults to `90`
   * days.
   */
  refreshAccessToken(expiredAt?: Date | undefined | null): Promise<string>
}
export class Decimal {
  static E(): Decimal
  static E_INVERSE(): Decimal
  static HALF_PI(): Decimal
  static MAX(): Decimal
  static MIN(): Decimal
  static NEGATIVE_ONE(): Decimal
  static ONE(): Decimal
  static ONE_HUNDRED(): Decimal
  static ONE_THOUSAND(): Decimal
  static PI(): Decimal
  static QUARTER_PI(): Decimal
  static TEN(): Decimal
  static TWO(): Decimal
  static TWO_PI(): Decimal
  static ZERO(): Decimal
  constructor(value: string | number)
  static newWithScale(num: number, scale: number): Decimal
  toString(): string
  toNumber(): number
  /** Computes the absolute value. */
  abs(): Decimal
  /** Returns the smallest integer greater than or equal to a number. */
  ceil(): Decimal
  /** Returns the largest integer less than or equal to a number. */
  floor(): Decimal
  /** Returns a new Decimal representing the fractional portion of the number. */
  fract(): Decimal
  /** Returns `true` if the decimal is negative. */
  isNegative(): boolean
  /** Returns `true` if the decimal is positive. */
  isPositive(): boolean
  /** Returns `true` if this Decimal number is equivalent to zero. */
  isZero(): boolean
  /** Returns the maximum of the two numbers. */
  max(other: Decimal): Decimal
  /** Returns the minimum of the two numbers. */
  min(other: Decimal): Decimal
  /** Strips any trailing zero’s from a Decimal and converts `-0` to `0`. */
  normalize(): Decimal
  /**
   * Returns a new Decimal number with no fractional portion (i.e. an
   * integer). Rounding currently follows “Bankers Rounding” rules. e.g.
   * `6.5` -> `6`, `7.5` -> `8`
   */
  round(): Decimal
  /**
   * Returns a new Decimal number with the specified number of decimal
   * points for fractional portion. Rounding currently follows “Bankers
   * Rounding” rules. e.g. 6.5 -> 6, 7.5 -> 8
   */
  roundDp(dp: number): Decimal
  /**
   * Returns a new Decimal integral with no fractional portion. This is a
   * true truncation whereby no rounding is performed.
   */
  trunc(): Decimal
  /** Performs the `+` operation. */
  add(other: Decimal): Decimal
  /** Performs the `-` operation. */
  sub(other: Decimal): Decimal
  /** Performs the `*` operation. */
  mul(other: Decimal): Decimal
  /** Performs the `/` operation. */
  div(other: Decimal): Decimal
  /** Performs the `%` operation. */
  rem(other: Decimal): Decimal
  /** Performs the unary `-` operation. */
  neg(): Decimal
  /**
   * Returns `true` if the value of this Decimal is greater than the value of
   * `x`, otherwise returns `false`.
   */
  greaterThan(other: Decimal): boolean
  /**
   * Returns `true` if the value of this Decimal is greater than or equal to
   * the value of `x`, otherwise returns `false`.
   */
  greaterThanOrEqualTo(other: Decimal): boolean
  /**
   * Returns `true` if the value of this Decimal equals the value of `x`,
   * otherwise returns `false`.
   */
  equals(other: Decimal): boolean
  /**
   * Returns `true` if the value of this Decimal is less than the value of
   * `x`, otherwise returns `false`.
   */
  lessThan(other: Decimal): boolean
  /**
   * Returns `true` if the value of this Decimal is less than or equal to the
   * value of `x`, otherwise returns `false`.
   */
  lessThanOrEqualTo(other: Decimal): boolean
  /**
   * Compares the values of two Decimals.
   *
   * Returns `-1` if the value of this Decimal is less than the value of
   * `x`.
   *
   * Returns `1` if the value of this Decimal is greater than the value of
   * `x`.
   *
   * Returns `0` if the value of this Decimal equals the value of `x`.
   */
  comparedTo(other: Decimal): number
  /** Computes the sine of a number (in radians) */
  sin(): Decimal
  /** Computes the cosine of a number (in radians) */
  cos(): Decimal
  /**
   * Computes the tangent of a number (in radians). Panics upon overflow or
   * upon approaching a limit.
   */
  tan(): Decimal
  /** The square root of a Decimal. Uses a standard Babylonian method. */
  sqrt(): Decimal
  /**
   * Raise self to the given Decimal exponent: x<sup>y</sup>. If `exp` is not
   * whole then the approximation e<sup>y*ln(x)</sup> is used.
   */
  pow(exp: Decimal): Decimal
  /**
   * Calculates the natural logarithm for a Decimal calculated using Taylor’s
   * series.
   */
  ln(): Decimal
  /** Calculates the base 10 logarithm of a specified Decimal number. */
  log10(): Decimal
  /**
   * The estimated exponential function, ex. Stops calculating when it is
   * within tolerance of roughly `0.0000002`.
   */
  exp(): Decimal
  /**
   * The estimated exponential function, e<sup>x</sup> using the `tolerance`
   * provided as a hint as to when to stop calculating. A larger
   * tolerance will cause the number to stop calculating sooner at the
   * potential cost of a slightly less accurate result.
   */
  expWithTolerance(tolerance: Decimal): Decimal
  /** Abramowitz Approximation of Error Function from [wikipedia](https://en.wikipedia.org/wiki/Error_function#Numerical_approximations) */
  erf(): Decimal
  /** The Cumulative distribution function for a Normal distribution */
  normCdf(): Decimal
  /** The Probability density function for a Normal distribution. */
  normPdf(): Decimal
  toJSON(): any
}
export class HttpClient {
  constructor(httpUrl: string, appKey: string, appSecret: string, accessToken: string)
  /**
   * Create a new `HttpClient` from the given environment variables
   *
   * It first gets the environment variables from the `.env` file in the
   * current directory.
   *
   * # Variables
   *
   * - `LONGPORT_HTTP_URL` - HTTP endpoint url
   * - `LONGPORT_APP_KEY` - App key
   * - `LONGPORT_APP_SECRET` - App secret
   * - `LONGPORT_ACCESS_TOKEN` - Access token
   */
  static fromEnv(): HttpClient
  /** Performs a HTTP request */
  request(method: string, path: string, headers?: Record<string, string> | undefined | null, body?: any | undefined | null): Promise<any>
}
/** Quote context */
export class QuoteContext {
  static new(config: Config): Promise<QuoteContext>
  /** Returns the member ID */
  memberId(): number
  /** Returns the quote level */
  quoteLevel(): string
  /** Returns the quote package details */
  quotePackageDetails(): Array<QuotePackageDetail>
  /**
   * Set quote callback, after receiving the quote data push, it will call
   * back to this function.
   */
  setOnQuote(callback: (err: null | Error, event: PushQuoteEvent) => void): void
  /**
   * Set depth callback, after receiving the depth data push, it will call
   * back to this function.
   */
  setOnDepth(callback: (err: null | Error, event: PushDepthEvent) => void): void
  /**
   * Set brokers callback, after receiving the brokers data push, it will
   * call back to this function.
   */
  setOnBrokers(callback: (err: null | Error, event: PushBrokersEvent) => void): void
  /**
   * Set trades callback, after receiving the trades data push, it will call
   * back to this function.
   */
  setOnTrades(callback: (err: null | Error, event: PushTradesEvent) => void): void
  /**
   * Set candlestick callback, after receiving the trades data push, it will
   * call back to this function.
   */
  setOnCandlestick(callback: (err: null | Error, event: PushCandlestickEvent) => void): void
  /**
   * Subscribe
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, SubType } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => {
   *     ctx.setOnQuote((_, event) => console.log(event.toString()));
   *     ctx.subscribe(["700.HK", "AAPL.US"], [SubType.Quote], true);
   *   });
   * ```
   */
  subscribe(symbols: Array<string>, subTypes: Array<SubType>, isFirstPush: boolean): Promise<void>
  /**
   * Unsubscribe
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, SubType } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => {
   *     ctx.subscribe(["700.HK", "AAPL.US"], [SubType.Quote], true)
   *       .then(() => ctx.unsubscribe(["AAPL.US"], [SubType.Quote], true)))
   *   })
   * ```
   */
  unsubscribe(symbols: Array<string>, subTypes: Array<SubType>): Promise<void>
  /** Subscribe security candlesticks */
  subscribeCandlesticks(symbol: string, period: Period, tradeSessions: TradeSessions): Promise<Array<Candlestick>>
  /** Unsubscribe security candlesticks */
  unsubscribeCandlesticks(symbol: string, period: Period): Promise<void>
  /**
   * Get subscription information
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, SubType } = require("longport")
   *
   * let config = Config.fromEnv();
   * QuoteContext.new(config)
   *   .then((ctx) => {
   *     return ctx
   *       .subscribe(["700.HK", "AAPL.US"], [SubType.Quote], true)
   *       .then(() => ctx.subscriptions());
   *   })
   *   .then((resp) => console.log(resp.toString()));
   * ```
   */
  subscriptions(): Promise<Array<Subscription>>
  /**
   * Get basic information of securities
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.staticInfo(["700.HK", "AAPL.US", "TSLA.US", "NFLX.US"]))
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString())
   *     }
   *   })
   * ```
   */
  staticInfo(symbols: Array<string>): Promise<Array<SecurityStaticInfo>>
  /**
   * Get quote of securities
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.quote(["700.HK", "AAPL.US", "TSLA.US", "NFLX.US"]))
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString())
   *     }
   *   })
   * ```
   */
  quote(symbols: Array<string>): Promise<Array<SecurityQuote>>
  /**
   * Get quote of option securities
   *
   * #### Example
   *
   * ```javascript
   * import { Config, QuoteContext } from 'longport'
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.optionQuote(["AAPL230317P160000.US"]))
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString())
   *     }
   *   })
   * ```
   */
  optionQuote(symbols: Array<string>): Promise<Array<OptionQuote>>
  /**
   * Get quote of warrant securities
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.warrantQuote(["21125.HK"]))
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString())
   *     }
   *   })
   * ```
   */
  warrantQuote(symbols: Array<string>): Promise<Array<WarrantQuote>>
  /**
   * Get security depth
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.depth("700.HK"))
   *   .then((resp) => console.log(resp.toString()))
   * ```
   */
  depth(symbol: string): Promise<SecurityDepth>
  /**
   * Get security brokers
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.brokers("700.HK"))
   *   .then((resp) => console.log(resp.toString()))
   * ```
   */
  brokers(symbol: string): Promise<SecurityBrokers>
  /**
   * Get participants
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.participants())
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString());
   *     }
   *   })
   * ```
   */
  participants(): Promise<Array<ParticipantInfo>>
  /**
   * Get security trades
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.trades("700.HK", 10))
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString());
   *     }
   *   })
   * ```
   */
  trades(symbol: string, count: number): Promise<Array<Trade>>
  /**
   * Get security intraday
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.intraday("700.HK"))
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString());
   *     }
   *   })
   * ```
   */
  intraday(symbol: string): Promise<Array<IntradayLine>>
  /**
   * Get security candlesticks
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, Period, AdjustType, TradeSessions } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.candlesticks("700.HK", Period.Day, 10, AdjustType.NoAdjust, TradeSessions.Normal))
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString());
   *     }
   *   })
   * ```
   */
  candlesticks(symbol: string, period: Period, count: number, adjustType: AdjustType, tradeSessions: TradeSessions): Promise<Array<Candlestick>>
  /** Get security history candlesticks by offset */
  historyCandlesticksByOffset(symbol: string, period: Period, adjustType: AdjustType, forward: boolean, datetime: NaiveDatetime | undefined | null, count: number, tradeSessions: TradeSessions): Promise<Array<Candlestick>>
  /** Get security history candlesticks by date */
  historyCandlesticksByDate(symbol: string, period: Period, adjustType: AdjustType, start: NaiveDate | undefined | null, end: NaiveDate | undefined | null, tradeSessions: TradeSessions): Promise<Array<Candlestick>>
  /**
   * Get option chain expiry date list
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.optionChainExpiryDateList("AAPL.US"))
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString())
   *     }
   *   })
   * ```
   */
  optionChainExpiryDateList(symbol: string): Promise<Array<NaiveDate>>
  /**
   * Get option chain info by date
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, NaiveDate } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.optionChainInfoByDate("AAPL.US", new NaiveDate(2023, 1, 20)))
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString())
   *     }
   *   })
   * ```
   */
  optionChainInfoByDate(symbol: string, expiryDate: NaiveDate): Promise<Array<StrikePriceInfo>>
  /**
   * Get warrant issuers
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, NaiveDate } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.warrantIssuers())
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString())
   *     }
   *   })
   * ```
   */
  warrantIssuers(): Promise<Array<IssuerInfo>>
  /**
   * Query warrant list
   *
   * #### Example
   * ```javascript
   * const { Config, QuoteContext, WarrantSortBy, SortOrderType } = require("longport")
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *  .then((ctx) => ctx.warrantList("700.HK", WarrantSortBy.LastDone, SortOrderType.Asc))
   * .then((resp) => {
   *  for (let obj of resp) {
   *   console.log(obj.toString())
   * }
   * })
   * ```
   */
  warrantList(symbol: string, sortBy: WarrantSortBy, sortOrder: SortOrderType, warrantType?: Array<WarrantType> | undefined | null, issuer?: Array<number> | undefined | null, expiryDate?: Array<FilterWarrantExpiryDate> | undefined | null, priceType?: Array<FilterWarrantInOutBoundsType> | undefined | null, status?: Array<WarrantStatus> | undefined | null): Promise<Array<WarrantInfo>>
  /**
   * Get trading session of the day
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, NaiveDate } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.tradingSession())
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString())
   *     }
   *   })
   * ```
   */
  tradingSession(): Promise<Array<MarketTradingSession>>
  /**
   * Get trading session of the day
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, Market, NaiveDate } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.tradingDays(Market.HK, new NaiveDate(2022, 1, 20), new NaiveDate(2022, 2, 20)))
   *   .then((resp) => console.log(resp.toString()))
   * ```
   */
  tradingDays(market: Market, begin: NaiveDate, end: NaiveDate): Promise<MarketTradingDays>
  /**
   * Get capital flow intraday
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.capitalFlow("700.HK"))
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString())
   *     }
   *   })
   * ```
   */
  capitalFlow(symbol: string): Promise<Array<CapitalFlowLine>>
  /**
   * Get capital distribution
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.capitalDistribution("700.HK"))
   *   .then((resp) => console.log(resp.toString()))
   * ```
   */
  capitalDistribution(symbol: string): Promise<CapitalDistributionResponse>
  /** Get calc indexes */
  calcIndexes(symbols: Array<string>, indexes: Array<CalcIndex>): Promise<Array<SecurityCalcIndex>>
  /**
   * Get watchlist
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.watchList())
   *   .then((resp) => console.log(resp.toString()))
   * ```
   */
  watchlist(): Promise<Array<WatchlistGroup>>
  /**
   * Create watchlist group
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   *
   * let config = Config.fromEnv();
   * QuoteContext.new(config)
   *   .then((ctx) => {
   *     ctx.createWatchlistGroup({
   *       name: "Watchlist1",
   *       securities: ["700.HK", "BABA.US"],
   *     })
   *   .then((group_id) => console.log(group_id));
   * });
   */
  createWatchlistGroup(req: CreateWatchlistGroup): Promise<number>
  /**
   * Delete watchlist group
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   * let config = Config.fromEnv();
   * QuoteContext.new(config)
   *   .then(ctx => ctx.deleteWatchlistGroup({ id: 10086 });
   * ```
   */
  deleteWatchlistGroup(req: DeleteWatchlistGroup): Promise<void>
  /**
   * Update watchlist group
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext } = require("longport")
   * let config = Config.fromEnv();
   * QuoteContext.new(config)
   *   .then(ctx => ctx.updateWatchlistGroup({
   *     id: 10086,
   *     name: "Watchlist2",
   *     securities: ["700.HK", "BABA.US"],
   *   });
   * ```
   */
  updateWatchlistGroup(req: UpdateWatchlistGroup): Promise<void>
  /**
   * Get security list
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, Market, SecurityListCategory } = require("longport")
   *
   * let config = Config.fromEnv();
   * QuoteContext.new(config)
   *   .then((ctx) => ctx.securityList(Market.US, SecurityListCategory.Overnight))
   *   .then((resp) => console.log(resp.toString()));
   * ```
   */
  securityList(market: Market, category: SecurityListCategory): Promise<Array<Security>>
  /**
   * Get real-time quote
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, SubType } = require("longport")
   *
   * let config = Config.fromEnv();
   * QuoteContext.new(config).then((ctx) => {
   *   ctx.subscribe(["700.HK", "AAPL.US"], [SubType.Quote], true).then(() => {
   *     setTimeout(() => {
   *       ctx.realtimeQuote(["700.HK", "AAPL.US"]).then((resp) => {
   *         for (let obj of resp) {
   *           console.log(obj.toString());
   *         }
   *       });
   *     }, 5000);
   *   });
   * });
   * ```
   */
  realtimeQuote(symbols: Array<string>): Promise<Array<RealtimeQuote>>
  /**
   * Get real-time depth
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, SubType } = require("longport")
   *
   * let config = Config.fromEnv();
   * QuoteContext.new(config).then((ctx) => {
   *   ctx.subscribe(["700.HK", "AAPL.US"], [SubType.Depth], true);
   *   setTimeout(
   *     () =>
   *       ctx.realtimeDepth("700.HK").then((resp) => console.log(resp.toString())),
   *     5000
   *   );
   * });
   * ```
   */
  realtimeDepth(symbol: string): Promise<SecurityDepth>
  /**
   * Get real-time brokers
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, NaiveDate, SubType } = require("longport")
   *
   * let config = Config.fromEnv();
   * QuoteContext.new(config).then((ctx) => {
   *   ctx.subscribe(["700.HK", "AAPL.US"], [SubType.Brokers], true).then(() => {
   *     setTimeout(
   *       () =>
   *         ctx
   *           .realtimeBrokers("700.HK")
   *           .then((resp) => console.log(resp.toString())),
   *       5000
   *     );
   *   });
   * });
   * ```
   */
  realtimeBrokers(symbol: string): Promise<SecurityBrokers>
  /**
   * Get real-time trades
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, SubType } = require("longport")
   *
   * let config = Config.fromEnv();
   * QuoteContext.new(config).then((ctx) => {
   *   ctx.subscribe(["700.HK", "AAPL.US"], [SubType.Trade], false).then(() => {
   *     setTimeout(() => {
   *       ctx.realtimeTrades("700.HK", 10).then((resp) => {
   *         for (let obj of resp) {
   *           console.log(obj.toString());
   *         }
   *       });
   *     }, 5000);
   *   });
   * });
   * ```
   */
  realtimeTrades(symbol: string, count: number): Promise<Array<Trade>>
  /**
   * Get real-time candlesticks
   *
   * #### Example
   *
   * ```javascript
   * const { Config, QuoteContext, Period } = require("longport")
   *
   * let config = Config.fromEnv();
   * QuoteContext.new(config).then((ctx) => {
   *   ctx.subscribeCandlesticks("700.HK", Period.Min_1).then(() => {
   *     setTimeout(() => {
   *       ctx.realtimeCandlesticks("700.HK", Period.Min_1, 10).then((resp) => {
   *         for (let obj of resp) {
   *           console.log(obj.toString());
   *         }
   *       });
   *     }, 5000);
   *   });
   * });
   * ```
   */
  realtimeCandlesticks(symbol: string, period: Period, count: number): Promise<Array<Candlestick>>
}
export class PushQuoteEvent {
  get symbol(): string
  get data(): PushQuote
  toString(): string
}
export class PushDepthEvent {
  get symbol(): string
  get data(): PushDepth
  toString(): string
}
export class PushBrokersEvent {
  get symbol(): string
  get data(): PushBrokers
  toString(): string
}
export class PushTradesEvent {
  get symbol(): string
  get data(): PushTrades
  toString(): string
}
export class PushCandlestickEvent {
  get symbol(): string
  get data(): PushCandlestick
  toString(): string
}
/** Subscription */
export class Subscription {
  toString(): string
  toJSON(): any
  get symbol(): string
  get subTypes(): Array<SubType>
  get candlesticks(): Array<Period>
}
/** The basic information of securities */
export class SecurityStaticInfo {
  toString(): string
  toJSON(): any
  /** Security code */
  get symbol(): string
  /** Security name (zh-CN) */
  get nameCn(): string
  /** Security name (en) */
  get nameEn(): string
  /** Security name (zh-HK) */
  get nameHk(): string
  /** Exchange which the security belongs to */
  get exchange(): string
  /** Trading currency */
  get currency(): string
  /** Lot size */
  get lotSize(): number
  /** Total shares */
  get totalShares(): number
  /** Circulating shares */
  get circulatingShares(): number
  /** HK shares (only HK stocks) */
  get hkShares(): number
  /** Earnings per share */
  get eps(): Decimal
  /** Earnings per share (TTM) */
  get epsTtm(): Decimal
  /** Net assets per share */
  get bps(): Decimal
  /** Dividend yield */
  get dividendYield(): Decimal
  /** Types of supported derivatives */
  get stockDerivatives(): Array<DerivativeType>
  /** Board */
  get board(): SecurityBoard
}
/** Quote of US pre/post market */
export class PrePostQuote {
  toString(): string
  toJSON(): any
  /** Latest price */
  get lastDone(): Decimal
  /** Time of latest price */
  get timestamp(): Date
  /** Volume */
  get volume(): number
  /** Turnover */
  get turnover(): Decimal
  /** High */
  get high(): Decimal
  /** Low */
  get low(): Decimal
  /** Close of the last trade session */
  get prevClose(): Decimal
}
/** Quote of securitity */
export class SecurityQuote {
  toString(): string
  toJSON(): any
  /** Security code */
  get symbol(): string
  /** Latest price */
  get lastDone(): Decimal
  /** Yesterday's close */
  get prevClose(): Decimal
  /** Open */
  get open(): Decimal
  /** High */
  get high(): Decimal
  /** Low */
  get low(): Decimal
  /** Time of latest price */
  get timestamp(): Date
  /** Volume */
  get volume(): number
  /** Turnover */
  get turnover(): Decimal
  /** Security trading status */
  get tradeStatus(): TradeStatus
  /** Quote of US pre market */
  get preMarketQuote(): PrePostQuote | null
  /** Quote of US post market */
  get postMarketQuote(): PrePostQuote | null
  /** Quote of US overnight market */
  get overnightQuote(): PrePostQuote | null
}
/** Quote of option */
export class OptionQuote {
  toString(): string
  toJSON(): any
  /** Security code */
  get symbol(): string
  /** Latest price */
  get lastDone(): Decimal
  /** Yesterday's close */
  get prevClose(): Decimal
  /** Open */
  get open(): Decimal
  /** High */
  get high(): Decimal
  /** Low */
  get low(): Decimal
  /** Time of latest price */
  get timestamp(): Date
  /** Volume */
  get volume(): number
  /** Turnover */
  get turnover(): Decimal
  /** Security trading status */
  get tradeStatus(): TradeStatus
  /** Implied volatility */
  get impliedVolatility(): Decimal
  /** Number of open positions */
  get openInterest(): number
  /** Exprity date */
  get expiryDate(): NaiveDate
  /** Strike price */
  get strikePrice(): Decimal
  /** Contract multiplier */
  get contractMultiplier(): Decimal
  /** Option type */
  get contractType(): OptionType
  /** Contract size */
  get contractSize(): Decimal
  /** Option direction */
  get direction(): OptionDirection
  /** Underlying security historical volatility of the option */
  get historicalVolatility(): Decimal
  /** Underlying security symbol of the option */
  get underlyingSymbol(): string
}
/** Quote of warrant */
export class WarrantQuote {
  toString(): string
  toJSON(): any
  /** Security code */
  get symbol(): string
  /** Latest price */
  get lastDone(): Decimal
  /** Yesterday's close */
  get prevClose(): Decimal
  /** Open */
  get open(): Decimal
  /** High */
  get high(): Decimal
  /** Low */
  get low(): Decimal
  /** Time of latest price */
  get timestamp(): Date
  /** Volume */
  get volume(): number
  /** Turnover */
  get turnover(): Decimal
  /** Security trading status */
  get tradeStatus(): TradeStatus
  /** Implied volatility */
  get impliedVolatility(): Decimal
  /** Exprity date */
  get expiryDate(): NaiveDate
  /** Last tradalbe date */
  get lastTradeDate(): NaiveDate
  /** Outstanding ratio */
  get outstandingRatio(): Decimal
  /** Outstanding quantity */
  get outstandingQuantity(): number
  /** Conversion ratio */
  get conversionRatio(): Decimal
  /** Warrant type */
  get category(): WarrantType
  /** Strike price */
  get strikePrice(): Decimal
  /** Upper bound price */
  get upperStrikePrice(): Decimal
  /** Lower bound price */
  get lowerStrikePrice(): Decimal
  /** Call price */
  get callPrice(): Decimal
  /** Underlying security symbol of the warrant */
  get underlyingSymbol(): string
}
/** Depth */
export class Depth {
  toString(): string
  toJSON(): any
  /** Position */
  get position(): number
  /** Price */
  get price(): Decimal | null
  /** Volume */
  get volume(): number
  /** Number of orders */
  get orderNum(): number
}
/** Security depth */
export class SecurityDepth {
  toString(): string
  toJSON(): any
  /** Ask depth */
  get asks(): Array<Depth>
  /** Bid depth */
  get bids(): Array<Depth>
}
/** Brokers */
export class Brokers {
  toString(): string
  toJSON(): any
  /** Position */
  get position(): number
  /** Broker IDs */
  get brokerIds(): Array<number>
}
/** Security brokers */
export class SecurityBrokers {
  toString(): string
  toJSON(): any
  /** Ask brokers */
  get askBrokers(): Array<Brokers>
  /** Bid brokers */
  get bidBrokers(): Array<Brokers>
}
/** Participant info */
export class ParticipantInfo {
  toString(): string
  toJSON(): any
  /** Broker IDs */
  get brokerIds(): Array<number>
  /** Participant name (zh-CN) */
  get nameCn(): string
  /** Participant name (en) */
  get nameEn(): string
  /** Participant name (zh-HK) */
  get nameHk(): string
}
/** Trade */
export class Trade {
  toString(): string
  toJSON(): any
  /** Price */
  get price(): Decimal
  /** Volume */
  get volume(): number
  /** Time of trading */
  get timestamp(): Date
  /** Trade type */
  get tradeType(): string
  /** Trade direction */
  get direction(): TradeDirection
  /** Trade session */
  get tradeSession(): TradeSession
}
/** Intraday line */
export class IntradayLine {
  toString(): string
  toJSON(): any
  /** Close price of the minute */
  get price(): Decimal
  /** Start time of the minute */
  get timestamp(): Date
  /** Volume */
  get volume(): number
  /** Turnover */
  get turnover(): Decimal
  /** Average price */
  get avgPrice(): Decimal
}
/** Candlestick */
export class Candlestick {
  toString(): string
  toJSON(): any
  /** Close price */
  get close(): Decimal
  /** Open price */
  get open(): Decimal
  /** Low price */
  get low(): Decimal
  /** High price */
  get high(): Decimal
  /** Volume */
  get volume(): number
  /** Turnover */
  get turnover(): Decimal
  /** Timestamp */
  get timestamp(): Date
}
/** Strike price info */
export class StrikePriceInfo {
  toString(): string
  toJSON(): any
  /** Strike price */
  get price(): Decimal
  /** Security code of call option */
  get callSymbol(): string
  /** Security code of put option */
  get putSymbol(): string
  /** Is standard */
  get standard(): boolean
}
/** Issuer info */
export class IssuerInfo {
  toString(): string
  toJSON(): any
  /** Issuer ID */
  get issuerId(): number
  /** Issuer name (zh-CN) */
  get nameCn(): string
  /** Issuer name (en) */
  get nameEn(): string
  /** Issuer name (zh-HK) */
  get nameHk(): string
}
/** Warrant info */
export class WarrantInfo {
  toString(): string
  toJSON(): any
  /** Security code */
  get symbol(): string
  /** Warrant type */
  get warrantType(): WarrantType
  /** Security name */
  get name(): string
  /** Latest price */
  get lastDone(): Decimal
  /** Quote change rate */
  get changeRate(): Decimal
  /** Quote change */
  get changeValue(): Decimal
  /** Volume */
  get volume(): number
  /** Turnover */
  get turnover(): Decimal
  /** Expiry date */
  get expiryDate(): NaiveDate
  /** Strike price */
  get strikePrice(): Decimal | null
  /** Upper strike price */
  get upperStrikePrice(): Decimal | null
  /** Lower strike price */
  get lowerStrikePrice(): Decimal | null
  /** Outstanding quantity */
  get outstandingQty(): number
  /** Outstanding ratio */
  get outstandingRatio(): Decimal
  /** Premium */
  get premium(): Decimal
  /** In/out of the bound */
  get itmOtm(): Decimal | null
  /** Implied volatility */
  get impliedVolatility(): Decimal | null
  /** Delta */
  get delta(): Decimal | null
  /** Call price */
  get callPrice(): Decimal | null
  /** Price interval from the call price */
  get toCallPrice(): Decimal | null
  /** Effective leverage */
  get effectiveLeverage(): Decimal | null
  /** Leverage ratio */
  get leverageRatio(): Decimal
  /** Conversion ratio */
  get conversionRatio(): Decimal | null
  /** Breakeven point */
  get balancePoint(): Decimal | null
  /** Status */
  get status(): WarrantStatus
}
/** The information of trading session */
export class TradingSessionInfo {
  toString(): string
  toJSON(): any
  /** Being trading time */
  get beginTime(): Time
  /** End trading time */
  get endTime(): Time
  /** Trading session */
  get tradeSession(): TradeSession
}
/** Market trading session */
export class MarketTradingSession {
  toString(): string
  toJSON(): any
  /** Market */
  get market(): Market
  /** Trading session */
  get tradeSessions(): Array<TradingSessionInfo>
}
/** Real-time quote */
export class RealtimeQuote {
  toString(): string
  toJSON(): any
  /** Security code */
  get symbol(): string
  /** Latest price */
  get lastDone(): Decimal
  /** Open */
  get open(): Decimal
  /** High */
  get high(): Decimal
  /** Low */
  get low(): Decimal
  /** Time of latest price */
  get timestamp(): Date
  /** Volume */
  get volume(): number
  /** Turnover */
  get turnover(): Decimal
  /** Security trading status */
  get tradeStatus(): TradeStatus
}
/** Push real-time quote */
export class PushQuote {
  toString(): string
  toJSON(): any
  /** Latest price */
  get lastDone(): Decimal
  /** Open */
  get open(): Decimal
  /** High */
  get high(): Decimal
  /** Low */
  get low(): Decimal
  /** Time of latest price */
  get timestamp(): Date
  /** Volume */
  get volume(): number
  /** Turnover */
  get turnover(): Decimal
  /** Security trading status */
  get tradeStatus(): TradeStatus
  /** Trade session */
  get tradeSession(): TradeSession
  /** Increase volume between pushes */
  get currentVolume(): number
  /** Increase turnover between pushes */
  get currentTurnover(): Decimal
}
/** Push real-time depth */
export class PushDepth {
  toString(): string
  toJSON(): any
  /** Ask depth */
  get asks(): Array<Depth>
  /** Bid depth */
  get bids(): Array<Depth>
}
/** Push real-time brokers */
export class PushBrokers {
  toString(): string
  toJSON(): any
  /** Ask brokers */
  get askBrokers(): Array<Brokers>
  /** Bid brokers */
  get bidBrokers(): Array<Brokers>
}
/** Push real-time trades */
export class PushTrades {
  toString(): string
  toJSON(): any
  /** Trades data */
  get trades(): Array<Trade>
}
/** Candlestick updated event */
export class PushCandlestick {
  toString(): string
  toJSON(): any
  /** Trade session */
  get tradeSession(): TradeSession
  /** Period type */
  get period(): Period
  /** Candlestick */
  get candlestick(): Candlestick
  /** Is confirmed */
  get isConfirmed(): boolean
}
/** Market trading days */
export class MarketTradingDays {
  toString(): string
  toJSON(): any
  /** Trading days */
  get tradingDays(): Array<NaiveDate>
  /** Half trading days */
  get halfTradingDays(): Array<NaiveDate>
}
/** Capital flow line */
export class CapitalFlowLine {
  toString(): string
  toJSON(): any
  /** Inflow capital data */
  get inflow(): Decimal
  /** Time */
  get timestamp(): Date
}
/** Capital distribution */
export class CapitalDistribution {
  toString(): string
  toJSON(): any
  /** Large order */
  get large(): Decimal
  /** Medium order */
  get medium(): Decimal
  /** Small order */
  get small(): Decimal
}
/** Capital distribution response */
export class CapitalDistributionResponse {
  toString(): string
  toJSON(): any
  /** Time */
  get timestamp(): Date
  /** Inflow capital data */
  get capitalIn(): CapitalDistribution
  /** Outflow capital data */
  get capitalOut(): CapitalDistribution
}
/** Watchlist group */
export class WatchlistGroup {
  toString(): string
  toJSON(): any
  /** Group id */
  get id(): number
  /** Group name */
  get name(): string
  /** Securities */
  get securities(): Array<WatchlistSecurity>
}
/** Watchlist security */
export class WatchlistSecurity {
  toString(): string
  toJSON(): any
  /** Security symbol */
  get symbol(): string
  /** Market */
  get market(): Market
  /** Security name */
  get name(): string
  /** Watched price */
  get watchedPrice(): Decimal | null
  /** Watched time */
  get watchedAt(): Date
}
/** Security calc index response */
export class SecurityCalcIndex {
  toString(): string
  toJSON(): any
  /** Security code */
  get symbol(): string
  /** Latest price */
  get lastDone(): Decimal | null
  /** Change value */
  get changeValue(): Decimal | null
  /** Change ratio */
  get changeRate(): Decimal | null
  /** Volume */
  get volume(): number | null
  /** Turnover */
  get turnover(): Decimal | null
  /** Year-to-date change ratio */
  get ytdChangeRate(): Decimal | null
  /** Turnover rate */
  get turnoverRate(): Decimal | null
  /** Total market value */
  get totalMarketValue(): Decimal | null
  /** Capital flow */
  get capitalFlow(): Decimal | null
  /** Amplitude */
  get amplitude(): Decimal | null
  /** Volume ratio */
  get volumeRatio(): Decimal | null
  /** PE (TTM) */
  get peTtmRatio(): Decimal | null
  /** PB */
  get pbRatio(): Decimal | null
  /** Dividend ratio (TTM) */
  get dividendRatioTtm(): Decimal | null
  /** Five days change ratio */
  get fiveDayChangeRate(): Decimal | null
  /** Ten days change ratio */
  get tenDayChangeRate(): Decimal | null
  /** Half year change ratio */
  get halfYearChangeRate(): Decimal | null
  /** Five minutes change ratio */
  get fiveMinutesChangeRate(): Decimal | null
  /** Expiry date */
  get expiryDate(): NaiveDate | null
  /** Strike price */
  get strikePrice(): Decimal | null
  /** Upper bound price */
  get upperStrikePrice(): Decimal | null
  /** Lower bound price */
  get lowerStrikePrice(): Decimal | null
  /** Outstanding quantity */
  get outstandingQty(): number | null
  /** Outstanding ratio */
  get outstandingRatio(): Decimal | null
  /** Premium */
  get premium(): Decimal | null
  /** In/out of the bound */
  get itmOtm(): Decimal | null
  /** Implied volatility */
  get impliedVolatility(): Decimal | null
  /** Warrant delta */
  get warrantDelta(): Decimal | null
  /** Call price */
  get callPrice(): Decimal | null
  /** Price interval from the call price */
  get toCallPrice(): Decimal | null
  /** Effective leverage */
  get effectiveLeverage(): Decimal | null
  /** Leverage ratio */
  get leverageRatio(): Decimal | null
  /** Conversion ratio */
  get conversionRatio(): Decimal | null
  /** Breakeven point */
  get balancePoint(): Decimal | null
  /** Open interest */
  get openInterest(): number | null
  /** Delta */
  get delta(): Decimal | null
  /** Gamma */
  get gamma(): Decimal | null
  /** Theta */
  get theta(): Decimal | null
  /** Vega */
  get vega(): Decimal | null
  /** Rho */
  get rho(): Decimal | null
}
/** Security */
export class Security {
  toString(): string
  toJSON(): any
  /** Security code */
  get symbol(): string
  /** Security name (zh-CN) */
  get nameCn(): string
  /** Security name (en) */
  get nameEn(): string
  /** Security name (zh-HK) */
  get nameHk(): string
}
export class QuotePackageDetail {
  toString(): string
  toJSON(): any
  /** Key */
  get key(): string
  /** Name */
  get name(): string
  /** Description */
  get description(): string
  /** Start time */
  get startAt(): Date
  /** End time */
  get endAt(): Date
}
/** Naive date type */
export class NaiveDate {
  constructor(year: number, month: number, day: number)
  get year(): number
  get month(): number
  get day(): number
  toString(): string
  toJSON(): any
}
/** Time type */
export class Time {
  constructor(hour: number, minute: number, second: number)
  get hour(): number
  get monute(): number
  get toString(): string
  toJSON(): any
}
/** Naive datetime type */
export class NaiveDatetime {
  constructor(date: NaiveDate, time: Time)
  get date(): NaiveDate
  get time(): Time
  toString(): string
  toJSON(): any
}
/** Trade context */
export class TradeContext {
  static new(config: Config): Promise<TradeContext>
  /**
   * Set order changed callback, after receiving the order changed event, it
   * will call back to this function.
   */
  setOnOrderChanged(callback: (err: null | Error, event: PushOrderChanged) => void): void
  /**
   * Subscribe
   *
   * #### Example
   *
   * ```javascript
   * const {
   *  Config,
   *  TradeContext,
   *  Decimal,
   *  OrderSide,
   *  TimeInForceType,
   *  OrderType,
   *  TopicType,
   * } = require("longport");
   *
   * let config = Config.fromEnv();
   * TradeContext.new(config)
   *   .then((ctx) => {`
   *     ctx.setOnQuote((_, event) => console.log(event.toString()));
   *     ctx.subscribe([TopicType.Private]);
   *     return ctx.submitOrder({
   *       symbol: "700.HK",
   *       orderType: OrderType.LO,
   *       side: OrderSide.Buy,
   *       timeInForce: TimeInForceType.Day,
   *       submittedPrice: new Decimal("50"),
   *       submittedQuantity: 200,
   *     });
   *   })
   *   .then((resp) => console.log(resp.toString()));
   * ```
   */
  subscribe(topics: Array<TopicType>): Promise<void>
  /** Unsubscribe */
  unsubscribe(topics: Array<TopicType>): Promise<void>
  /**
   * Get history executions
   *
   * #### Example
   *
   * ```javascript
   * const { Config, TradeContext } = require("longport");
   *
   * let config = Config.fromEnv();
   * TradeContext.new(config)
   *   .then((ctx) =>
   *     ctx.historyExecutions({
   *       symbol: "700.HK",
   *       startAt: new Date(2022, 5, 9),
   *       endAt: new Date(2022, 5, 12),
   *     })
   *   )
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString());
   *     }
   *   });
   * ```
   */
  historyExecutions(opts?: GetHistoryExecutionsOptions | undefined | null): Promise<Array<Execution>>
  /**
   * Get today executions
   *
   * #### Example
   *
   * ```javascript
   * const { Config, TradeContext } = require("longport");
   *
   * let config = Config.fromEnv();
   * TradeContext.new(config)
   *   .then((ctx) => ctx.todayExecutions({ symbol: "700.HK" }))
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString());
   *     }
   *   });
   * ```
   */
  todayExecutions(opts?: GetTodayExecutionsOptions | undefined | null): Promise<Array<Execution>>
  /**
   * Get history orders
   *
   * #### Example
   *
   * ```javascript
   * const {
   *   Config,
   *   TradeContext,
   *   OrderStatus,
   *   OrderSide,
   *   Market,
   * } = require("longport");
   *
   * let config = Config.fromEnv();
   * TradeContext.new(config)
   *   .then((ctx) =>
   *     ctx.historyOrders({
   *       symbol: "700.HK",
   *       status: [OrderStatus.Filled, OrderStatus.New],
   *       side: OrderSide.Buy,
   *       market: Market.HK,
   *       startAt: new Date(2022, 5, 9),
   *       endAt: new Date(2022, 5, 12),
   *     })
   *   )
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString());
   *     }
   *   });
   * ```
   */
  historyOrders(opts?: GetHistoryOrdersOptions | undefined | null): Promise<Array<Order>>
  /**
   * Get today orders
   *
   * #### Example
   *
   * ```javascript
   * const {
   *   Config,
   *   TradeContext,
   *   OrderStatus,
   *   OrderSide,
   *   Market,
   * } = require("longport");
   *
   * let config = Config.fromEnv();
   * TradeContext.new(config)
   *   .then((ctx) =>
   *     ctx.todayOrders({
   *       symbol: "700.HK",
   *       status: [OrderStatus.Filled, OrderStatus.New],
   *       side: OrderSide.Buy,
   *       market: Market.HK,
   *     })
   *   )
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString());
   *     }
   *   });
   * ```
   */
  todayOrders(opts?: GetTodayOrdersOptions | undefined | null): Promise<Array<Order>>
  /**
   * Replace order
   *
   * #### Example
   *
   * ```javascript
   * const { Config, TradeContext, Decimal } = require("longport");
   *
   * let config = Config.fromEnv();
   * TradeContext.new(config)
   *   .then((ctx) =>
   *     ctx.replaceOrder({
   *       orderId: "709043056541253632",
   *       quantity: 100,
   *       price: new Decimal("300"),
   *     })
   *   )
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString());
   *     }
   *   });
   * ```
   */
  replaceOrder(opts: ReplaceOrderOptions): Promise<void>
  /**
   * Submit order
   *
   * #### Example
   *
   * ```javascript
   * const {
   *   Config,
   *   TradeContext,
   *   OrderType,
   *   OrderSide,
   *   Decimal,
   *   TimeInForceType,
   * } = require("longport");
   *
   * let config = Config.fromEnv();
   * TradeContext.new(config)
   *   .then((ctx) =>
   *     ctx.submitOrder({
   *       symbol: "700.HK",
   *       orderType: OrderType.LO,
   *       side: OrderSide.Buy,
   *       timeInForce: TimeInForceType.Day,
   *       submittedQuantity: 200,
   *       submittedPrice: new Decimal("300"),
   *     })
   *   )
   *   .then((resp) => console.log(resp.toString()));
   * ```
   */
  submitOrder(opts: SubmitOrderOptions): Promise<SubmitOrderResponse>
  /**
   * Cancel order
   *
   * #### Example
   *
   * ```javascript
   * const { Config, TradeContext } = require("longport");
   *
   * let config = Config.fromEnv();
   * TradeContext.new(config).then((ctx) => ctx.cancelOrder("709043056541253632"));
   * ```
   */
  cancelOrder(orderId: string): Promise<void>
  /**
   * Get account balance
   *
   * #### Example
   *
   * ```javascript
   * const { Config, TradeContext } = require("longport");
   *
   * let config = Config.fromEnv();
   * TradeContext.new(config)
   *   .then((ctx) => ctx.accountBalance())
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString());
   *     }
   *   });
   * ```
   */
  accountBalance(currency?: string | undefined | null): Promise<Array<AccountBalance>>
  /**
   * Get cash flow
   *
   * #### Example
   *
   * ```javascript
   * const { Config, TradeContext, GetCashFlowOptions } = require("longport");
   *
   * let config = Config.fromEnv();
   * TradeContext.new(config)
   *   .then((ctx) =>
   *     ctx.cashFlow({
   *       startAt: new Date(2022, 5, 9),
   *       endAt: new Date(2022, 5, 12),
   *     })
   *   )
   *   .then((resp) => {
   *     for (let obj of resp) {
   *       console.log(obj.toString());
   *     }
   *   });
   * ```
   */
  cashFlow(opts: GetCashFlowOptions): Promise<Array<CashFlow>>
  /**
   * Get fund positions
   *
   * #### Example
   *
   * ```javascript
   * const { Config, TradeContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * TradeContext.new(config)
   *   .then((ctx) => ctx.fundPositions())
   *   .then((resp) => console.log(resp))
   * ```
   */
  fundPositions(symbols?: Array<string> | undefined | null): Promise<FundPositionsResponse>
  /**
   * Get stock positions
   *
   * #### Example
   *
   * ```javascript
   * const { Config, TradeContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * TradeContext.new(config)
   *   .then((ctx) => ctx.stockPositions())
   *   .then((resp) => console.log(resp))
   * ```
   */
  stockPositions(symbols?: Array<string> | undefined | null): Promise<StockPositionsResponse>
  /**
   * Get margin ratio
   *
   * #### Example
   *
   * ```javascript
   * const { Config, TradeContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * TradeContext.new(config)
   *   .then((ctx) => ctx.marginRatio("700.HK"))
   *   .then((resp) => console.log(resp))
   * ```
   */
  marginRatio(symbol: string): Promise<MarginRatio>
  /**
   * Get order detail
   *
   * #### Example
   *
   * ```javascript
   * const { Config, TradeContext } = require("longport")
   *
   * let config = Config.fromEnv()
   * TradeContext.new(config)
   *   .then((ctx) => ctx.orderDetail("701276261045858304"))
   *   .then((resp) => console.log(resp))
   * ```
   */
  orderDetail(orderId: string): Promise<OrderDetail>
  /**
   * Estimating the maximum purchase quantity for Hong Kong and US stocks,
   * warrants, and options
   *
   * #### Example
   *
   * ```javascript
   * const { Config, TradeContext, OrderType, OrderSide } = require("longport")
   *
   * let config = Config.fromEnv()
   * TradeContext.new(config)
   *   .then((ctx) => ctx.estimateMaxPurchaseQuantity({
   *     symbol: "700.HK",
   *     orderType: OrderType.LO,
   *     side: OrderSide.Buy,
   *   }))
   *   .then((resp) => console.log(resp))
   * ```
   */
  estimateMaxPurchaseQuantity(opts: EstimateMaxPurchaseQuantityOptions): Promise<EstimateMaxPurchaseQuantityResponse>
}
/** Trade */
export class Execution {
  toString(): string
  toJSON(): any
  /** Order ID */
  get orderId(): string
  /** Execution ID */
  get tradeId(): string
  /** Security code */
  get symbol(): string
  /** Trade done time */
  get tradeDoneAt(): Date
  /** Executed quantity */
  get quantity(): Decimal
  /** Executed price */
  get price(): Decimal
}
/** Order */
export class Order {
  toString(): string
  toJSON(): any
  /** Order ID */
  get orderId(): string
  /** Order status */
  get status(): OrderStatus
  /** Stock name */
  get stockName(): string
  /** Submitted quantity */
  get quantity(): Decimal
  /** Executed quantity */
  get executedQuantity(): Decimal
  /** Submitted price */
  get price(): Decimal | null
  /** Executed price */
  get executedPrice(): Decimal | null
  /** Submitted time */
  get submittedAt(): Date
  /** Order side */
  get side(): OrderSide
  /** Security code */
  get symbol(): string
  /** Order type */
  get orderType(): OrderType
  /** Last done */
  get lastDone(): Decimal | null
  /** `LIT` / `MIT` Order Trigger Price */
  get triggerPrice(): Decimal | null
  /** Rejected Message or remark */
  get msg(): string
  /** Order tag */
  get tag(): OrderTag
  /** Time in force type */
  get timeInForce(): TimeInForceType
  /** Long term order expire date */
  get expireDate(): NaiveDate | null
  /** Last updated time */
  get updatedAt(): Date | null
  /** Conditional order trigger time */
  get triggerAt(): Date | null
  /** `TSMAMT` / `TSLPAMT` order trailing amount */
  get trailingAmount(): Decimal | null
  /** `TSMPCT` / `TSLPPCT` order trailing percent */
  get trailingPercent(): Decimal | null
  /** `TSLPAMT` / `TSLPPCT` order limit offset amount */
  get limitOffset(): Decimal | null
  /** Conditional order trigger status */
  get triggerStatus(): TriggerStatus | null
  /** Currency */
  get currency(): string
  /** Enable or disable outside regular trading hours */
  get outsideRth(): OutsideRTH | null
  /** Remark */
  get remark(): string
}
/** Order history detail */
export class OrderHistoryDetail {
  toString(): string
  toJSON(): any
  /**
   * Executed price for executed orders, submitted price for expired,
   * canceled, rejected orders, etc.
   */
  get price(): Decimal
  /**
   * Executed quantity for executed orders, remaining quantity for expired,
   * canceled, rejected orders, etc.
   */
  get quantity(): Decimal
  /** Order status */
  get status(): OrderStatus
  /** Execution or error message */
  get msg(): string
  /** Occurrence time */
  get time(): Date
}
/** Order charge fee */
export class OrderChargeFee {
  toString(): string
  toJSON(): any
  /** Charge code */
  get code(): string
  /** Charge name */
  get name(): string
  /** Charge amount */
  get amount(): Decimal
  /** Charge currency */
  get currency(): string
}
/** Order charge item */
export class OrderChargeItem {
  toString(): string
  toJSON(): any
  /** Charge category code */
  get code(): ChargeCategoryCode
  /** Charge category name */
  get name(): string
  /** Charge details */
  get fees(): Array<OrderChargeFee>
}
/** Order charge detail */
export class OrderChargeDetail {
  toString(): string
  toJSON(): any
  /** Total charges amount */
  get totalAmount(): Decimal
  /** Settlement currency */
  get currency(): string
  /** Order charge items */
  get items(): Array<OrderChargeItem>
}
/** Order detail */
export class OrderDetail {
  toString(): string
  toJSON(): any
  /** Order ID */
  get orderId(): string
  /** Order status */
  get status(): OrderStatus
  /** Stock name */
  get stockName(): string
  /** Submitted quantity */
  get quantity(): Decimal
  /** Executed quantity */
  get executedQuantity(): Decimal
  /** Submitted price */
  get price(): Decimal | null
  /** Executed price */
  get executedPrice(): Decimal | null
  /** Submitted time */
  get submittedAt(): Date
  /** Order side */
  get side(): OrderSide
  /** Security code */
  get symbol(): string
  /** Order type */
  get orderType(): OrderType
  /** Last done */
  get lastDone(): Decimal | null
  /** `LIT` / `MIT` Order Trigger Price */
  get triggerPrice(): Decimal | null
  /** Rejected Message or remark */
  get msg(): string
  /** Order tag */
  get tag(): OrderTag
  /** Time in force type */
  get timeInForce(): TimeInForceType
  /** Long term order expire date */
  get expireDate(): NaiveDate | null
  /** Last updated time */
  get updatedAt(): Date | null
  /** Conditional order trigger time */
  get triggerAt(): Date | null
  /** `TSMAMT` / `TSLPAMT` order trailing amount */
  get trailingAmount(): Decimal | null
  /** `TSMPCT` / `TSLPPCT` order trailing percent */
  get trailingPercent(): Decimal | null
  /** `TSLPAMT` / `TSLPPCT` order limit offset amount */
  get limitOffset(): Decimal | null
  /** Conditional order trigger status */
  get triggerStatus(): TriggerStatus | null
  /** Currency */
  get currency(): string
  /** Enable or disable outside regular trading hours */
  get outsideRth(): OutsideRTH | null
  /** Remark */
  get remark(): string
  /** Commission-free Status */
  get freeStatus(): CommissionFreeStatus
  /** Commission-free amount */
  get freeAmount(): Decimal | null
  /** Commission-free currency */
  get freeCurrency(): string | null
  /** Deduction status */
  get deductionsStatus(): DeductionStatus
  /** Deduction amount */
  get deductionsAmount(): Decimal | null
  /** Deduction currency */
  get deductionsCurrency(): string | null
  /** Platform fee deduction status */
  get platformDeductedStatus(): DeductionStatus
  /** Platform deduction amount */
  get platformDeductedAmount(): Decimal | null
  /** Platform deduction currency */
  get platformDeductedCurrency(): string | null
  /** Order history details */
  get history(): Array<OrderHistoryDetail>
  /** Order charges */
  get chargeDetail(): OrderChargeDetail
}
/** Order changed message */
export class PushOrderChanged {
  toString(): string
  toJSON(): any
  /** Order side */
  get side(): OrderSide
  /** Stock name */
  get stockName(): string
  /** Submitted quantity */
  get submittedQuantity(): Decimal
  /** Order symbol */
  get symbol(): string
  /** Order type */
  get orderType(): OrderType
  /** Submitted price */
  get submittedPrice(): Decimal
  /** Executed quantity */
  get executedQuantity(): Decimal
  /** Executed price */
  get executedPrice(): Decimal | null
  /** Order ID */
  get orderId(): string
  /** Currency */
  get currency(): string
  /** Order status */
  get status(): OrderStatus
  /** Submitted time */
  get submittedAt(): Date
  /** Last updated time */
  get updatedAt(): Date
  /** Order trigger price */
  get triggerPrice(): Decimal | null
  /** Rejected message or remark */
  get msg(): string
  /** Order tag */
  get tag(): OrderTag
  /** Conditional order trigger status */
  get triggerStatus(): TriggerStatus | null
  /** Conditional order trigger time */
  get triggerAt(): Date | null
  /** Trailing amount */
  get trailingAmount(): Decimal | null
  /** Trailing percent */
  get trailingPercent(): Decimal | null
  /** Limit offset amount */
  get limitOffset(): Decimal | null
  /** Account no */
  get accountNo(): string
  /** Last share */
  get lastShare(): Decimal | null
  /** Last price */
  get lastPrice(): Decimal | null
  /** Remark message */
  get remark(): string
}
/** Response for submit order request */
export class SubmitOrderResponse {
  toString(): string
  toJSON(): any
  /** Order id */
  get orderId(): string
}
/** Account balance */
export class CashInfo {
  toString(): string
  toJSON(): any
  /** Withdraw cash */
  get withdrawCash(): Decimal
  /** Available cash */
  get availableCash(): Decimal
  /** Frozen cash */
  get frozenCash(): Decimal
  /** Cash to be settled */
  get settlingCash(): Decimal
  /** Currency */
  get currency(): string
}
/** Account balance */
export class AccountBalance {
  toString(): string
  toJSON(): any
  /** Total cash */
  get totalCash(): Decimal
  /** Maximum financing amount */
  get maxFinanceAmount(): Decimal
  /** Remaining financing amount */
  get remainingFinanceAmount(): Decimal
  /** Risk control level */
  get riskLevel(): number
  /** Margin call */
  get marginCall(): Decimal
  /** Currency */
  get currency(): string
  /** Cash details */
  get cashInfos(): Array<CashInfo>
  /** Net assets */
  get netAssets(): Decimal
  /** Initial margin */
  get initMargin(): Decimal
  /** Maintenance margin */
  get maintenanceMargin(): Decimal
  /** Buy power */
  get buyPower(): Decimal
}
/** Account balance */
export class CashFlow {
  toString(): string
  toJSON(): any
  /** Cash flow name */
  get transactionFlowName(): string
  /** Outflow direction */
  get direction(): CashFlowDirection
  /** Balance type */
  get businessType(): BalanceType
  /** Cash amount */
  get balance(): Decimal
  /** Cash currency */
  get currency(): string
  /** Business time */
  get businessTime(): Date
  /** Associated Stock code information */
  get symbol(): string | null
  /** Cash flow description */
  get description(): string
}
/** Fund positions response */
export class FundPositionsResponse {
  toString(): string
  toJSON(): any
  /** Channels */
  get channels(): Array<FundPositionChannel>
}
/** Fund position channel */
export class FundPositionChannel {
  toString(): string
  toJSON(): any
  /** Account type */
  get accountChannel(): string
  /** Fund positions */
  get positions(): Array<FundPosition>
}
/** Fund position */
export class FundPosition {
  toString(): string
  toJSON(): any
  /** Fund ISIN code */
  get symbol(): string
  /** Current equity */
  get currentNetAssetValue(): Decimal
  /** Current equity time */
  get netAssetValueDay(): Date
  /** Fund name */
  get symbolName(): string
  /** Currency */
  get currency(): string
  /** Net cost */
  get costNetAssetValue(): Decimal
  /** Holding units */
  get holdingUnits(): Decimal
}
/** Stock positions response */
export class StockPositionsResponse {
  toString(): string
  toJSON(): any
  /** Channels */
  get channels(): Array<StockPositionChannel>
}
/** Stock position channel */
export class StockPositionChannel {
  toString(): string
  toJSON(): any
  /** Account type */
  get accountChannel(): string
  /** Stock positions */
  get positions(): Array<StockPosition>
}
/** Stock position */
export class StockPosition {
  toString(): string
  toJSON(): any
  /** Stock code */
  get symbol(): string
  /** Stock name */
  get symbolName(): string
  /** The number of holdings */
  get quantity(): Decimal
  /** Available quantity */
  get availableQuantity(): Decimal
  /** Currency */
  get currency(): string
  /**
   * Cost Price(According to the client's choice of average purchase or
   * diluted cost)
   */
  get costPrice(): Decimal
  /** Market */
  get market(): Market
  /** Initial position before market opening */
  get initQuantity(): Decimal | null
}
/** Margin ratio */
export class MarginRatio {
  toString(): string
  toJSON(): any
  /** Initial margin ratio */
  get imFactor(): Decimal
  /** Maintain the initial margin ratio */
  get mmFactor(): Decimal
  /** Forced close-out margin ratio */
  get fmFactor(): Decimal
}
/** Response for estimate maximum purchase quantity */
export class EstimateMaxPurchaseQuantityResponse {
  toString(): string
  toJSON(): any
  /** Cash available quantity */
  get cashMaxQty(): Decimal
  /** Margin available quantity */
  get marginMaxQty(): Decimal
}
